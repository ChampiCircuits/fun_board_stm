
fun_board_stm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a06c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  0800a24c  0800a24c  0000b24c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a55c  0800a55c  0000c068  2**0
                  CONTENTS
  4 .ARM          00000008  0800a55c  0800a55c  0000b55c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a564  0800a564  0000c068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a564  0800a564  0000b564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800a56c  0800a56c  0000b56c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800a574  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dd4  20000068  0800a5dc  0000c068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e3c  0800a5dc  0000ce3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000279d9  00000000  00000000  0000c098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044e9  00000000  00000000  00033a71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d8  00000000  00000000  00037f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011d5  00000000  00000000  00039638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ba87  00000000  00000000  0003a80d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b3cb  00000000  00000000  00066294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00122562  00000000  00000000  0008165f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a3bc1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008074  00000000  00000000  001a3c04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001abc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a234 	.word	0x0800a234

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	0800a234 	.word	0x0800a234

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2iz>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a64:	d215      	bcs.n	8000a92 <__aeabi_d2iz+0x36>
 8000a66:	d511      	bpl.n	8000a8c <__aeabi_d2iz+0x30>
 8000a68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d912      	bls.n	8000a98 <__aeabi_d2iz+0x3c>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a82:	fa23 f002 	lsr.w	r0, r3, r2
 8000a86:	bf18      	it	ne
 8000a88:	4240      	negne	r0, r0
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a96:	d105      	bne.n	8000aa4 <__aeabi_d2iz+0x48>
 8000a98:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a9c:	bf08      	it	eq
 8000a9e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ac0:	f000 b96a 	b.w	8000d98 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	460c      	mov	r4, r1
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d14e      	bne.n	8000b86 <__udivmoddi4+0xaa>
 8000ae8:	4694      	mov	ip, r2
 8000aea:	458c      	cmp	ip, r1
 8000aec:	4686      	mov	lr, r0
 8000aee:	fab2 f282 	clz	r2, r2
 8000af2:	d962      	bls.n	8000bba <__udivmoddi4+0xde>
 8000af4:	b14a      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af6:	f1c2 0320 	rsb	r3, r2, #32
 8000afa:	4091      	lsls	r1, r2
 8000afc:	fa20 f303 	lsr.w	r3, r0, r3
 8000b00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b04:	4319      	orrs	r1, r3
 8000b06:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0e:	fa1f f68c 	uxth.w	r6, ip
 8000b12:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b22:	fb04 f106 	mul.w	r1, r4, r6
 8000b26:	4299      	cmp	r1, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x64>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b32:	f080 8112 	bcs.w	8000d5a <__udivmoddi4+0x27e>
 8000b36:	4299      	cmp	r1, r3
 8000b38:	f240 810f 	bls.w	8000d5a <__udivmoddi4+0x27e>
 8000b3c:	3c02      	subs	r4, #2
 8000b3e:	4463      	add	r3, ip
 8000b40:	1a59      	subs	r1, r3, r1
 8000b42:	fa1f f38e 	uxth.w	r3, lr
 8000b46:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b4a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b52:	fb00 f606 	mul.w	r6, r0, r6
 8000b56:	429e      	cmp	r6, r3
 8000b58:	d90a      	bls.n	8000b70 <__udivmoddi4+0x94>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b62:	f080 80fc 	bcs.w	8000d5e <__udivmoddi4+0x282>
 8000b66:	429e      	cmp	r6, r3
 8000b68:	f240 80f9 	bls.w	8000d5e <__udivmoddi4+0x282>
 8000b6c:	4463      	add	r3, ip
 8000b6e:	3802      	subs	r0, #2
 8000b70:	1b9b      	subs	r3, r3, r6
 8000b72:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b76:	2100      	movs	r1, #0
 8000b78:	b11d      	cbz	r5, 8000b82 <__udivmoddi4+0xa6>
 8000b7a:	40d3      	lsrs	r3, r2
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d905      	bls.n	8000b96 <__udivmoddi4+0xba>
 8000b8a:	b10d      	cbz	r5, 8000b90 <__udivmoddi4+0xb4>
 8000b8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b90:	2100      	movs	r1, #0
 8000b92:	4608      	mov	r0, r1
 8000b94:	e7f5      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000b96:	fab3 f183 	clz	r1, r3
 8000b9a:	2900      	cmp	r1, #0
 8000b9c:	d146      	bne.n	8000c2c <__udivmoddi4+0x150>
 8000b9e:	42a3      	cmp	r3, r4
 8000ba0:	d302      	bcc.n	8000ba8 <__udivmoddi4+0xcc>
 8000ba2:	4290      	cmp	r0, r2
 8000ba4:	f0c0 80f0 	bcc.w	8000d88 <__udivmoddi4+0x2ac>
 8000ba8:	1a86      	subs	r6, r0, r2
 8000baa:	eb64 0303 	sbc.w	r3, r4, r3
 8000bae:	2001      	movs	r0, #1
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d0e6      	beq.n	8000b82 <__udivmoddi4+0xa6>
 8000bb4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bb8:	e7e3      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000bba:	2a00      	cmp	r2, #0
 8000bbc:	f040 8090 	bne.w	8000ce0 <__udivmoddi4+0x204>
 8000bc0:	eba1 040c 	sub.w	r4, r1, ip
 8000bc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc8:	fa1f f78c 	uxth.w	r7, ip
 8000bcc:	2101      	movs	r1, #1
 8000bce:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bd6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bde:	fb07 f006 	mul.w	r0, r7, r6
 8000be2:	4298      	cmp	r0, r3
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0x11c>
 8000be6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bea:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x11a>
 8000bf0:	4298      	cmp	r0, r3
 8000bf2:	f200 80cd 	bhi.w	8000d90 <__udivmoddi4+0x2b4>
 8000bf6:	4626      	mov	r6, r4
 8000bf8:	1a1c      	subs	r4, r3, r0
 8000bfa:	fa1f f38e 	uxth.w	r3, lr
 8000bfe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c02:	fb08 4410 	mls	r4, r8, r0, r4
 8000c06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c0a:	fb00 f707 	mul.w	r7, r0, r7
 8000c0e:	429f      	cmp	r7, r3
 8000c10:	d908      	bls.n	8000c24 <__udivmoddi4+0x148>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c1a:	d202      	bcs.n	8000c22 <__udivmoddi4+0x146>
 8000c1c:	429f      	cmp	r7, r3
 8000c1e:	f200 80b0 	bhi.w	8000d82 <__udivmoddi4+0x2a6>
 8000c22:	4620      	mov	r0, r4
 8000c24:	1bdb      	subs	r3, r3, r7
 8000c26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2a:	e7a5      	b.n	8000b78 <__udivmoddi4+0x9c>
 8000c2c:	f1c1 0620 	rsb	r6, r1, #32
 8000c30:	408b      	lsls	r3, r1
 8000c32:	fa22 f706 	lsr.w	r7, r2, r6
 8000c36:	431f      	orrs	r7, r3
 8000c38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c40:	ea43 030c 	orr.w	r3, r3, ip
 8000c44:	40f4      	lsrs	r4, r6
 8000c46:	fa00 f801 	lsl.w	r8, r0, r1
 8000c4a:	0c38      	lsrs	r0, r7, #16
 8000c4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c50:	fbb4 fef0 	udiv	lr, r4, r0
 8000c54:	fa1f fc87 	uxth.w	ip, r7
 8000c58:	fb00 441e 	mls	r4, r0, lr, r4
 8000c5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c60:	fb0e f90c 	mul.w	r9, lr, ip
 8000c64:	45a1      	cmp	r9, r4
 8000c66:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6a:	d90a      	bls.n	8000c82 <__udivmoddi4+0x1a6>
 8000c6c:	193c      	adds	r4, r7, r4
 8000c6e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c72:	f080 8084 	bcs.w	8000d7e <__udivmoddi4+0x2a2>
 8000c76:	45a1      	cmp	r9, r4
 8000c78:	f240 8081 	bls.w	8000d7e <__udivmoddi4+0x2a2>
 8000c7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c80:	443c      	add	r4, r7
 8000c82:	eba4 0409 	sub.w	r4, r4, r9
 8000c86:	fa1f f983 	uxth.w	r9, r3
 8000c8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	d907      	bls.n	8000cae <__udivmoddi4+0x1d2>
 8000c9e:	193c      	adds	r4, r7, r4
 8000ca0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ca4:	d267      	bcs.n	8000d76 <__udivmoddi4+0x29a>
 8000ca6:	45a4      	cmp	ip, r4
 8000ca8:	d965      	bls.n	8000d76 <__udivmoddi4+0x29a>
 8000caa:	3b02      	subs	r3, #2
 8000cac:	443c      	add	r4, r7
 8000cae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cb2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cb6:	eba4 040c 	sub.w	r4, r4, ip
 8000cba:	429c      	cmp	r4, r3
 8000cbc:	46ce      	mov	lr, r9
 8000cbe:	469c      	mov	ip, r3
 8000cc0:	d351      	bcc.n	8000d66 <__udivmoddi4+0x28a>
 8000cc2:	d04e      	beq.n	8000d62 <__udivmoddi4+0x286>
 8000cc4:	b155      	cbz	r5, 8000cdc <__udivmoddi4+0x200>
 8000cc6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cca:	eb64 040c 	sbc.w	r4, r4, ip
 8000cce:	fa04 f606 	lsl.w	r6, r4, r6
 8000cd2:	40cb      	lsrs	r3, r1
 8000cd4:	431e      	orrs	r6, r3
 8000cd6:	40cc      	lsrs	r4, r1
 8000cd8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e750      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000ce0:	f1c2 0320 	rsb	r3, r2, #32
 8000ce4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ce8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cec:	fa24 f303 	lsr.w	r3, r4, r3
 8000cf0:	4094      	lsls	r4, r2
 8000cf2:	430c      	orrs	r4, r1
 8000cf4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cfc:	fa1f f78c 	uxth.w	r7, ip
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3110 	mls	r1, r8, r0, r3
 8000d08:	0c23      	lsrs	r3, r4, #16
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f107 	mul.w	r1, r0, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d908      	bls.n	8000d28 <__udivmoddi4+0x24c>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d1e:	d22c      	bcs.n	8000d7a <__udivmoddi4+0x29e>
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d92a      	bls.n	8000d7a <__udivmoddi4+0x29e>
 8000d24:	3802      	subs	r0, #2
 8000d26:	4463      	add	r3, ip
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d30:	fb08 3311 	mls	r3, r8, r1, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb01 f307 	mul.w	r3, r1, r7
 8000d3c:	42a3      	cmp	r3, r4
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x276>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d48:	d213      	bcs.n	8000d72 <__udivmoddi4+0x296>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d911      	bls.n	8000d72 <__udivmoddi4+0x296>
 8000d4e:	3902      	subs	r1, #2
 8000d50:	4464      	add	r4, ip
 8000d52:	1ae4      	subs	r4, r4, r3
 8000d54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d58:	e739      	b.n	8000bce <__udivmoddi4+0xf2>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	e6f0      	b.n	8000b40 <__udivmoddi4+0x64>
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e706      	b.n	8000b70 <__udivmoddi4+0x94>
 8000d62:	45c8      	cmp	r8, r9
 8000d64:	d2ae      	bcs.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d6e:	3801      	subs	r0, #1
 8000d70:	e7a8      	b.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d72:	4631      	mov	r1, r6
 8000d74:	e7ed      	b.n	8000d52 <__udivmoddi4+0x276>
 8000d76:	4603      	mov	r3, r0
 8000d78:	e799      	b.n	8000cae <__udivmoddi4+0x1d2>
 8000d7a:	4630      	mov	r0, r6
 8000d7c:	e7d4      	b.n	8000d28 <__udivmoddi4+0x24c>
 8000d7e:	46d6      	mov	lr, sl
 8000d80:	e77f      	b.n	8000c82 <__udivmoddi4+0x1a6>
 8000d82:	4463      	add	r3, ip
 8000d84:	3802      	subs	r0, #2
 8000d86:	e74d      	b.n	8000c24 <__udivmoddi4+0x148>
 8000d88:	4606      	mov	r6, r0
 8000d8a:	4623      	mov	r3, r4
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e70f      	b.n	8000bb0 <__udivmoddi4+0xd4>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	4463      	add	r3, ip
 8000d94:	e730      	b.n	8000bf8 <__udivmoddi4+0x11c>
 8000d96:	bf00      	nop

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <_write>:


extern "C"
{
int _write(int file, char *ptr, int len)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
   for (int DataIdx = 0; DataIdx < len; DataIdx++)
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	e00b      	b.n	8000dc6 <_write+0x2a>
//        ITM_SendChar(*ptr++);
   	HAL_UART_Transmit(&huart2, (uint8_t*)ptr++, 1, HAL_MAX_DELAY);
 8000dae:	68b9      	ldr	r1, [r7, #8]
 8000db0:	1c4b      	adds	r3, r1, #1
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000db8:	2201      	movs	r2, #1
 8000dba:	4807      	ldr	r0, [pc, #28]	@ (8000dd8 <_write+0x3c>)
 8000dbc:	f004 ff0e 	bl	8005bdc <HAL_UART_Transmit>
   for (int DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	617b      	str	r3, [r7, #20]
 8000dc6:	697a      	ldr	r2, [r7, #20]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	dbef      	blt.n	8000dae <_write+0x12>
   return len;
 8000dce:	687b      	ldr	r3, [r7, #4]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	200005e0 	.word	0x200005e0

08000ddc <HAL_FDCAN_RxFifo0Callback>:
  *         the configuration information for the specified FDCAN.
  * @param  RxFifo0ITs: indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b094      	sub	sp, #80	@ 0x50
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]

    // Attention !! Quand on met un breakpoint dans cette fonction, on ne reçoit plus que 2 messages au lieu du
    // bon nombre.

    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	f003 0301 	and.w	r3, r3, #1
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d02b      	beq.n	8000e48 <HAL_FDCAN_RxFifo0Callback+0x6c>
        /* Retrieve Rx messages from RX FIFO0 */
        FDCAN_RxHeaderTypeDef RxHeader;
        uint8_t RxData[8];

        if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8000df0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000df4:	f107 0208 	add.w	r2, r7, #8
 8000df8:	2140      	movs	r1, #64	@ 0x40
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f001 fd42 	bl	8002884 <HAL_FDCAN_GetRxMessage>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
         * Pour le moment, on n'utilise pas de mutex ou de choses comme ça, donc il faut faire attention
         * à ne pas modifier trop de variables partagées, et de priviligier la modification de variables
         * de 32 bits ou moins (pour que leur modification soit une opération atomique)
         * */

        if (RxHeader.Identifier == CAN_ID_LED_RING_DISTANCES) {
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	f5b3 7f04 	cmp.w	r3, #528	@ 0x210
 8000e0a:	d11d      	bne.n	8000e48 <HAL_FDCAN_RxFifo0Callback+0x6c>
        	msg_recomposer_led_ring_distances.add_frame(RxData, RxHeader.DataLength);
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000e14:	4619      	mov	r1, r3
 8000e16:	480e      	ldr	r0, [pc, #56]	@ (8000e50 <HAL_FDCAN_RxFifo0Callback+0x74>)
 8000e18:	f005 fe46 	bl	8006aa8 <_ZN17MessageRecomposer9add_frameEPhh>

            if (msg_recomposer_led_ring_distances.check_if_new_full_msg()) {
 8000e1c:	480c      	ldr	r0, [pc, #48]	@ (8000e50 <HAL_FDCAN_RxFifo0Callback+0x74>)
 8000e1e:	f005 fefd 	bl	8006c1c <_ZN17MessageRecomposer21check_if_new_full_msgEv>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d00f      	beq.n	8000e48 <HAL_FDCAN_RxFifo0Callback+0x6c>
                std::string proto_msg = msg_recomposer_led_ring_distances.get_full_msg();
 8000e28:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e2c:	4908      	ldr	r1, [pc, #32]	@ (8000e50 <HAL_FDCAN_RxFifo0Callback+0x74>)
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f005 ff00 	bl	8006c34 <_ZN17MessageRecomposer12get_full_msgB5cxx11Ev>
                on_receive_led_ring_distances(proto_msg);
 8000e34:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f000 f80b 	bl	8000e54 <_Z29on_receive_led_ring_distancesRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>

            }
 8000e3e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e42:	4618      	mov	r0, r3
 8000e44:	f008 f864 	bl	8008f10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        }
    }
}
 8000e48:	bf00      	nop
 8000e4a:	3750      	adds	r7, #80	@ 0x50
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000114 	.word	0x20000114

08000e54 <_Z29on_receive_led_ring_distancesRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
/**
 * @brief Function to handle the received message from the CAN bus: it decodes the message and updates the
 * velocity command.
 * @param proto_msg : the received message (protobuf encoded)
 */
void on_receive_led_ring_distances(const std::string &proto_msg) {
 8000e54:	b590      	push	{r4, r7, lr}
 8000e56:	b0a1      	sub	sp, #132	@ 0x84
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]

  // Allocate space for the decoded message.
  msgs_can_LedRingDistances ret_led_ring_distances = msgs_can_LedRingDistances_init_zero;
 8000e5c:	f107 0318 	add.w	r3, r7, #24
 8000e60:	2260      	movs	r2, #96	@ 0x60
 8000e62:	2100      	movs	r1, #0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f008 fc89 	bl	800977c <memset>
  // Create a stream that reads from the buffer.
  pb_istream_t stream_ret = pb_istream_from_buffer((const unsigned char *) proto_msg.c_str(), proto_msg.size());
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f008 f930 	bl	80090d0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8000e70:	4604      	mov	r4, r0
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f008 f880 	bl	8008f78 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	f107 0308 	add.w	r3, r7, #8
 8000e7e:	4621      	mov	r1, r4
 8000e80:	4618      	mov	r0, r3
 8000e82:	f006 faed 	bl	8007460 <pb_istream_from_buffer>
  // Now we are ready to decode the message.
  if (!pb_decode(&stream_ret, msgs_can_LedRingDistances_fields, &ret_led_ring_distances)) {
 8000e86:	f107 0218 	add.w	r2, r7, #24
 8000e8a:	f107 0308 	add.w	r3, r7, #8
 8000e8e:	4920      	ldr	r1, [pc, #128]	@ (8000f10 <_Z29on_receive_led_ring_distancesRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbc>)
 8000e90:	4618      	mov	r0, r3
 8000e92:	f007 fc1f 	bl	80086d4 <pb_decode>
    // We do nothing (fun board is not critical)
  }

  // Use message
  for (int i = 0; i < 24; i++) {
 8000e96:	2300      	movs	r3, #0
 8000e98:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000e9a:	e00d      	b.n	8000eb8 <_Z29on_receive_led_ring_distancesRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x64>
    distances_from_can[i] = ret_led_ring_distances.distances[i];
 8000e9c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	3380      	adds	r3, #128	@ 0x80
 8000ea2:	443b      	add	r3, r7
 8000ea4:	3b68      	subs	r3, #104	@ 0x68
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	491a      	ldr	r1, [pc, #104]	@ (8000f14 <_Z29on_receive_led_ring_distancesRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc0>)
 8000eaa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	440b      	add	r3, r1
 8000eb0:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < 24; i++) {
 8000eb2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000eb8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000eba:	2b17      	cmp	r3, #23
 8000ebc:	ddee      	ble.n	8000e9c <_Z29on_receive_led_ring_distancesRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x48>
   }

   // Print distances
    for (int i = 0; i < 24; i++) {
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000ec2:	e01a      	b.n	8000efa <_Z29on_receive_led_ring_distancesRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa6>
      printf("%d\t",(int)(distances_from_can[i]*100.));
 8000ec4:	4a13      	ldr	r2, [pc, #76]	@ (8000f14 <_Z29on_receive_led_ring_distancesRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc0>)
 8000ec6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	4413      	add	r3, r2
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fb5a 	bl	8000588 <__aeabi_f2d>
 8000ed4:	f04f 0200 	mov.w	r2, #0
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f18 <_Z29on_receive_led_ring_distancesRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc4>)
 8000eda:	f7ff fbad 	bl	8000638 <__aeabi_dmul>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	4610      	mov	r0, r2
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f7ff fdb9 	bl	8000a5c <__aeabi_d2iz>
 8000eea:	4603      	mov	r3, r0
 8000eec:	4619      	mov	r1, r3
 8000eee:	480b      	ldr	r0, [pc, #44]	@ (8000f1c <_Z29on_receive_led_ring_distancesRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc8>)
 8000ef0:	f008 faf4 	bl	80094dc <iprintf>
    for (int i = 0; i < 24; i++) {
 8000ef4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000efa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000efc:	2b17      	cmp	r3, #23
 8000efe:	dde1      	ble.n	8000ec4 <_Z29on_receive_led_ring_distancesRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x70>
    }
    printf("\n");
 8000f00:	200a      	movs	r0, #10
 8000f02:	f008 fafd 	bl	8009500 <putchar>


}
 8000f06:	bf00      	nop
 8000f08:	3784      	adds	r7, #132	@ 0x84
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd90      	pop	{r4, r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	0800a4b0 	.word	0x0800a4b0
 8000f14:	20000674 	.word	0x20000674
 8000f18:	40590000 	.word	0x40590000
 8000f1c:	0800a24c 	.word	0x0800a24c

08000f20 <_Z7Set_LEDiiii>:
  *fG*=255;
  *fB*=255;
}

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
 8000f2c:	603b      	str	r3, [r7, #0]
  LED_Data[LEDnum][0] = LEDnum;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	b2d9      	uxtb	r1, r3
 8000f32:	4a11      	ldr	r2, [pc, #68]	@ (8000f78 <_Z7Set_LEDiiii+0x58>)
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
  LED_Data[LEDnum][1] = Green;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	b2d9      	uxtb	r1, r3
 8000f3e:	4a0e      	ldr	r2, [pc, #56]	@ (8000f78 <_Z7Set_LEDiiii+0x58>)
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4413      	add	r3, r2
 8000f46:	460a      	mov	r2, r1
 8000f48:	705a      	strb	r2, [r3, #1]
  LED_Data[LEDnum][2] = Red;
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	b2d9      	uxtb	r1, r3
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f78 <_Z7Set_LEDiiii+0x58>)
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	4413      	add	r3, r2
 8000f56:	460a      	mov	r2, r1
 8000f58:	709a      	strb	r2, [r3, #2]
  LED_Data[LEDnum][3] = Blue;
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	b2d9      	uxtb	r1, r3
 8000f5e:	4a06      	ldr	r2, [pc, #24]	@ (8000f78 <_Z7Set_LEDiiii+0x58>)
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	4413      	add	r3, r2
 8000f66:	460a      	mov	r2, r1
 8000f68:	70da      	strb	r2, [r3, #3]
}
 8000f6a:	bf00      	nop
 8000f6c:	3714      	adds	r7, #20
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	20000088 	.word	0x20000088

08000f7c <_Z11WS2812_Sendv>:


uint16_t pwmData[(24*MAX_LED)+200];

void WS2812_Send (void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
  uint32_t indx=0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
  uint32_t color;


  for (int i= 0; i<MAX_LED; i++)
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	e036      	b.n	8000ffa <_Z11WS2812_Sendv+0x7e>
  {
#if USE_BRIGHTNESS
    color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
#else
    color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
 8000f8c:	4a31      	ldr	r2, [pc, #196]	@ (8001054 <_Z11WS2812_Sendv+0xd8>)
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4413      	add	r3, r2
 8000f94:	785b      	ldrb	r3, [r3, #1]
 8000f96:	041a      	lsls	r2, r3, #16
 8000f98:	492e      	ldr	r1, [pc, #184]	@ (8001054 <_Z11WS2812_Sendv+0xd8>)
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	789b      	ldrb	r3, [r3, #2]
 8000fa2:	021b      	lsls	r3, r3, #8
 8000fa4:	431a      	orrs	r2, r3
 8000fa6:	492b      	ldr	r1, [pc, #172]	@ (8001054 <_Z11WS2812_Sendv+0xd8>)
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	440b      	add	r3, r1
 8000fae:	78db      	ldrb	r3, [r3, #3]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	607b      	str	r3, [r7, #4]
#endif

    for (int i=23; i>=0; i--)
 8000fb4:	2317      	movs	r3, #23
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	e019      	b.n	8000fee <_Z11WS2812_Sendv+0x72>
    {
      if (color&(1<<i))
 8000fba:	2201      	movs	r2, #1
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d005      	beq.n	8000fd8 <_Z11WS2812_Sendv+0x5c>
      {
        pwmData[indx] = 142;  // 2/3 of 215
 8000fcc:	4a22      	ldr	r2, [pc, #136]	@ (8001058 <_Z11WS2812_Sendv+0xdc>)
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	218e      	movs	r1, #142	@ 0x8e
 8000fd2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000fd6:	e004      	b.n	8000fe2 <_Z11WS2812_Sendv+0x66>
      }

      else pwmData[indx] = 71;  // 1/3 of 215
 8000fd8:	4a1f      	ldr	r2, [pc, #124]	@ (8001058 <_Z11WS2812_Sendv+0xdc>)
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	2147      	movs	r1, #71	@ 0x47
 8000fde:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

      indx++;
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	617b      	str	r3, [r7, #20]
    for (int i=23; i>=0; i--)
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	dae2      	bge.n	8000fba <_Z11WS2812_Sendv+0x3e>
  for (int i= 0; i<MAX_LED; i++)
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	2b17      	cmp	r3, #23
 8000ffe:	ddc5      	ble.n	8000f8c <_Z11WS2812_Sendv+0x10>
    }

  }

  for (int i=0; i<200; i++)
 8001000:	2300      	movs	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	e00a      	b.n	800101c <_Z11WS2812_Sendv+0xa0>
  {
    pwmData[indx] = 0;
 8001006:	4a14      	ldr	r2, [pc, #80]	@ (8001058 <_Z11WS2812_Sendv+0xdc>)
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	2100      	movs	r1, #0
 800100c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    indx++;
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	3301      	adds	r3, #1
 8001014:	617b      	str	r3, [r7, #20]
  for (int i=0; i<200; i++)
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	3301      	adds	r3, #1
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	2bc7      	cmp	r3, #199	@ 0xc7
 8001020:	ddf1      	ble.n	8001006 <_Z11WS2812_Sendv+0x8a>
  }

  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*)pwmData, indx);
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	b29b      	uxth	r3, r3
 8001026:	4a0c      	ldr	r2, [pc, #48]	@ (8001058 <_Z11WS2812_Sendv+0xdc>)
 8001028:	2100      	movs	r1, #0
 800102a:	480c      	ldr	r0, [pc, #48]	@ (800105c <_Z11WS2812_Sendv+0xe0>)
 800102c:	f003 fa20 	bl	8004470 <HAL_TIM_PWM_Start_DMA>
  while (!datasentflag){};
 8001030:	bf00      	nop
 8001032:	4b0b      	ldr	r3, [pc, #44]	@ (8001060 <_Z11WS2812_Sendv+0xe4>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	bf0c      	ite	eq
 800103a:	2301      	moveq	r3, #1
 800103c:	2300      	movne	r3, #0
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1f6      	bne.n	8001032 <_Z11WS2812_Sendv+0xb6>
  datasentflag = 0;
 8001044:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <_Z11WS2812_Sendv+0xe4>)
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
}
 800104a:	bf00      	nop
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000088 	.word	0x20000088
 8001058:	200006d4 	.word	0x200006d4
 800105c:	20000534 	.word	0x20000534
 8001060:	20000084 	.word	0x20000084

08001064 <HAL_TIM_PWM_PulseFinishedCallback>:


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 800106c:	2100      	movs	r1, #0
 800106e:	4805      	ldr	r0, [pc, #20]	@ (8001084 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001070:	f003 fc16 	bl	80048a0 <HAL_TIM_PWM_Stop_DMA>
  datasentflag=1;
 8001074:	4b04      	ldr	r3, [pc, #16]	@ (8001088 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8001076:	2201      	movs	r2, #1
 8001078:	601a      	str	r2, [r3, #0]
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000534 	.word	0x20000534
 8001088:	20000084 	.word	0x20000084

0800108c <_Z24animation_from_distancesv>:


void animation_from_distances() {
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
	float max_dist=2.0;
 8001092:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001096:	60bb      	str	r3, [r7, #8]

	for(int i=0; i<24; i++) {
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	e032      	b.n	8001104 <_Z24animation_from_distancesv+0x78>
		int B = distances_from_can[i] * 255/max_dist;
 800109e:	4a1e      	ldr	r2, [pc, #120]	@ (8001118 <_Z24animation_from_distancesv+0x8c>)
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	4413      	add	r3, r2
 80010a6:	edd3 7a00 	vldr	s15, [r3]
 80010aa:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 800111c <_Z24animation_from_distancesv+0x90>
 80010ae:	ee67 6a87 	vmul.f32	s13, s15, s14
 80010b2:	ed97 7a02 	vldr	s14, [r7, #8]
 80010b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010be:	ee17 3a90 	vmov	r3, s15
 80010c2:	607b      	str	r3, [r7, #4]
		int R = 255 - distances_from_can[i] * 255/max_dist;
 80010c4:	4a14      	ldr	r2, [pc, #80]	@ (8001118 <_Z24animation_from_distancesv+0x8c>)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4413      	add	r3, r2
 80010cc:	edd3 7a00 	vldr	s15, [r3]
 80010d0:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800111c <_Z24animation_from_distancesv+0x90>
 80010d4:	ee67 6a87 	vmul.f32	s13, s15, s14
 80010d8:	ed97 7a02 	vldr	s14, [r7, #8]
 80010dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010e0:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800111c <_Z24animation_from_distancesv+0x90>
 80010e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010ec:	ee17 3a90 	vmov	r3, s15
 80010f0:	603b      	str	r3, [r7, #0]
		Set_LED(i, 0, 0, B);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	2100      	movs	r1, #0
 80010f8:	68f8      	ldr	r0, [r7, #12]
 80010fa:	f7ff ff11 	bl	8000f20 <_Z7Set_LEDiiii>
	for(int i=0; i<24; i++) {
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	3301      	adds	r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	2b17      	cmp	r3, #23
 8001108:	ddc9      	ble.n	800109e <_Z24animation_from_distancesv+0x12>
	}

	WS2812_Send();
 800110a:	f7ff ff37 	bl	8000f7c <_Z11WS2812_Sendv>
}
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000674 	.word	0x20000674
 800111c:	437f0000 	.word	0x437f0000

08001120 <_ZN9ChampiCanaSERKS_>:
#ifndef INC_CHAMPICAN_H_
#define INC_CHAMPICAN_H_

#include "stm32g4xx_hal.h"

class ChampiCan {
 8001120:	b4b0      	push	{r4, r5, r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685a      	ldr	r2, [r3, #4]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	f102 0408 	add.w	r4, r2, #8
 800113a:	f103 0508 	add.w	r5, r3, #8
 800113e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001140:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001142:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001144:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001146:	682b      	ldr	r3, [r5, #0]
 8001148:	6023      	str	r3, [r4, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4618      	mov	r0, r3
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	bcb0      	pop	{r4, r5, r7}
 8001154:	4770      	bx	lr

08001156 <_ZN17MessageRecomposeraSERKS_>:
 */
#define MAX_LENGTH_MSG 30

#include "string"

class MessageRecomposer {
 8001156:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
 800115e:	6039      	str	r1, [r7, #0]
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685a      	ldr	r2, [r3, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	689a      	ldr	r2, [r3, #8]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	7b1a      	ldrb	r2, [r3, #12]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	731a      	strb	r2, [r3, #12]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f103 010d 	add.w	r1, r3, #13
 800117e:	221d      	movs	r2, #29
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	330d      	adds	r3, #13
 8001184:	e004      	b.n	8001190 <_ZN17MessageRecomposeraSERKS_+0x3a>
 8001186:	7818      	ldrb	r0, [r3, #0]
 8001188:	7008      	strb	r0, [r1, #0]
 800118a:	3a01      	subs	r2, #1
 800118c:	3101      	adds	r1, #1
 800118e:	3301      	adds	r3, #1
 8001190:	2a00      	cmp	r2, #0
 8001192:	daf8      	bge.n	8001186 <_ZN17MessageRecomposeraSERKS_+0x30>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 800119a:	251d      	movs	r5, #29
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	f103 042c 	add.w	r4, r3, #44	@ 0x2c
 80011a2:	4616      	mov	r6, r2
 80011a4:	e006      	b.n	80011b4 <_ZN17MessageRecomposeraSERKS_+0x5e>
 80011a6:	4621      	mov	r1, r4
 80011a8:	4630      	mov	r0, r6
 80011aa:	f007 ff15 	bl	8008fd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 80011ae:	3d01      	subs	r5, #1
 80011b0:	3618      	adds	r6, #24
 80011b2:	3418      	adds	r4, #24
 80011b4:	2d00      	cmp	r5, #0
 80011b6:	daf6      	bge.n	80011a6 <_ZN17MessageRecomposeraSERKS_+0x50>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f503 723f 	add.w	r2, r3, #764	@ 0x2fc
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 80011c4:	4619      	mov	r1, r3
 80011c6:	4610      	mov	r0, r2
 80011c8:	f007 ff06 	bl	8008fd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4618      	mov	r0, r3
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080011d8 <_Z5setupv>:





void setup() {
 80011d8:	b580      	push	{r7, lr}
 80011da:	f5ad 7d52 	sub.w	sp, sp, #840	@ 0x348
 80011de:	af00      	add	r7, sp, #0

    champi_can = ChampiCan(&hfdcan1);
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	4922      	ldr	r1, [pc, #136]	@ (800126c <_Z5setupv+0x94>)
 80011e4:	4618      	mov	r0, r3
 80011e6:	f005 fb75 	bl	80068d4 <_ZN9ChampiCanC1EP19FDCAN_HandleTypeDef>
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	4619      	mov	r1, r3
 80011ee:	4820      	ldr	r0, [pc, #128]	@ (8001270 <_Z5setupv+0x98>)
 80011f0:	f7ff ff96 	bl	8001120 <_ZN9ChampiCanaSERKS_>
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	4618      	mov	r0, r3
 80011f8:	f005 fbe0 	bl	80069bc <_ZN9ChampiCanD1Ev>
    msg_recomposer_led_ring_distances = MessageRecomposer();
 80011fc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001200:	4618      	mov	r0, r3
 8001202:	f005 fc31 	bl	8006a68 <_ZN17MessageRecomposerC1Ev>
 8001206:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800120a:	4619      	mov	r1, r3
 800120c:	4819      	ldr	r0, [pc, #100]	@ (8001274 <_Z5setupv+0x9c>)
 800120e:	f7ff ffa2 	bl	8001156 <_ZN17MessageRecomposeraSERKS_>
 8001212:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001216:	4618      	mov	r0, r3
 8001218:	f005 fd20 	bl	8006c5c <_ZN17MessageRecomposerD1Ev>

    if (champi_can.start() != 0) {
 800121c:	4814      	ldr	r0, [pc, #80]	@ (8001270 <_Z5setupv+0x98>)
 800121e:	f005 fba3 	bl	8006968 <_ZN9ChampiCan5startEv>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	bf14      	ite	ne
 8001228:	2301      	movne	r3, #1
 800122a:	2300      	moveq	r3, #0
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <_Z5setupv+0x5e>
        // TODO: On a jamais rencontré cette erreur.
        Error_Handler();
 8001232:	f000 fa77 	bl	8001724 <Error_Handler>
    }


    // set all elements of distances_from_can to 0
    for (int i = 0; i < 24; i++) {
 8001236:	2300      	movs	r3, #0
 8001238:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
 800123c:	e00c      	b.n	8001258 <_Z5setupv+0x80>
        distances_from_can[i] = 0;
 800123e:	4a0e      	ldr	r2, [pc, #56]	@ (8001278 <_Z5setupv+0xa0>)
 8001240:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4413      	add	r3, r2
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 24; i++) {
 800124e:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8001252:	3301      	adds	r3, #1
 8001254:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
 8001258:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 800125c:	2b17      	cmp	r3, #23
 800125e:	ddee      	ble.n	800123e <_Z5setupv+0x66>
    }
}
 8001260:	bf00      	nop
 8001262:	bf00      	nop
 8001264:	f507 7752 	add.w	r7, r7, #840	@ 0x348
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	200004d0 	.word	0x200004d0
 8001270:	200000e8 	.word	0x200000e8
 8001274:	20000114 	.word	0x20000114
 8001278:	20000674 	.word	0x20000674

0800127c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001282:	f000 fd22 	bl	8001cca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001286:	f000 f813 	bl	80012b0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800128a:	f000 fa0b 	bl	80016a4 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800128e:	f000 f9df 	bl	8001650 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 8001292:	f000 f97d 	bl	8001590 <_ZL19MX_USART2_UART_Initv>
  MX_TIM1_Init();
 8001296:	f000 f8ad 	bl	80013f4 <_ZL12MX_TIM1_Initv>
  MX_FDCAN1_Init();
 800129a:	f000 f85f 	bl	800135c <_ZL14MX_FDCAN1_Initv>
  /* USER CODE BEGIN 2 */


  setup();
 800129e:	f7ff ff9b 	bl	80011d8 <_Z5setupv>

  int i = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
  int counter = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	603b      	str	r3, [r7, #0]
  while (1)
  {
    //turning_rainbow_animation();
	animation_from_distances();
 80012aa:	f7ff feef 	bl	800108c <_Z24animation_from_distancesv>
 80012ae:	e7fc      	b.n	80012aa <main+0x2e>

080012b0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b094      	sub	sp, #80	@ 0x50
 80012b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012b6:	f107 0318 	add.w	r3, r7, #24
 80012ba:	2238      	movs	r2, #56	@ 0x38
 80012bc:	2100      	movs	r1, #0
 80012be:	4618      	mov	r0, r3
 80012c0:	f008 fa5c 	bl	800977c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
 80012d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80012d2:	2000      	movs	r0, #0
 80012d4:	f002 f842 	bl	800335c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012d8:	2302      	movs	r3, #2
 80012da:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012e2:	2340      	movs	r3, #64	@ 0x40
 80012e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e6:	2302      	movs	r3, #2
 80012e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012ea:	2302      	movs	r3, #2
 80012ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80012ee:	2304      	movs	r3, #4
 80012f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80012f2:	2355      	movs	r3, #85	@ 0x55
 80012f4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012f6:	2302      	movs	r3, #2
 80012f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012fa:	2302      	movs	r3, #2
 80012fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012fe:	2302      	movs	r3, #2
 8001300:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001302:	f107 0318 	add.w	r3, r7, #24
 8001306:	4618      	mov	r0, r3
 8001308:	f002 f8dc 	bl	80034c4 <HAL_RCC_OscConfig>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	bf14      	ite	ne
 8001312:	2301      	movne	r3, #1
 8001314:	2300      	moveq	r3, #0
 8001316:	b2db      	uxtb	r3, r3
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 800131c:	f000 fa02 	bl	8001724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001320:	230f      	movs	r3, #15
 8001322:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001324:	2303      	movs	r3, #3
 8001326:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800132c:	2300      	movs	r3, #0
 800132e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	2104      	movs	r1, #4
 8001338:	4618      	mov	r0, r3
 800133a:	f002 fbd5 	bl	8003ae8 <HAL_RCC_ClockConfig>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	bf14      	ite	ne
 8001344:	2301      	movne	r3, #1
 8001346:	2300      	moveq	r3, #0
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800134e:	f000 f9e9 	bl	8001724 <Error_Handler>
  }
}
 8001352:	bf00      	nop
 8001354:	3750      	adds	r7, #80	@ 0x50
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001360:	4b22      	ldr	r3, [pc, #136]	@ (80013ec <_ZL14MX_FDCAN1_Initv+0x90>)
 8001362:	4a23      	ldr	r2, [pc, #140]	@ (80013f0 <_ZL14MX_FDCAN1_Initv+0x94>)
 8001364:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001366:	4b21      	ldr	r3, [pc, #132]	@ (80013ec <_ZL14MX_FDCAN1_Initv+0x90>)
 8001368:	2200      	movs	r2, #0
 800136a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800136c:	4b1f      	ldr	r3, [pc, #124]	@ (80013ec <_ZL14MX_FDCAN1_Initv+0x90>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001372:	4b1e      	ldr	r3, [pc, #120]	@ (80013ec <_ZL14MX_FDCAN1_Initv+0x90>)
 8001374:	2200      	movs	r2, #0
 8001376:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001378:	4b1c      	ldr	r3, [pc, #112]	@ (80013ec <_ZL14MX_FDCAN1_Initv+0x90>)
 800137a:	2200      	movs	r2, #0
 800137c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800137e:	4b1b      	ldr	r3, [pc, #108]	@ (80013ec <_ZL14MX_FDCAN1_Initv+0x90>)
 8001380:	2200      	movs	r2, #0
 8001382:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001384:	4b19      	ldr	r3, [pc, #100]	@ (80013ec <_ZL14MX_FDCAN1_Initv+0x90>)
 8001386:	2200      	movs	r2, #0
 8001388:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 10;
 800138a:	4b18      	ldr	r3, [pc, #96]	@ (80013ec <_ZL14MX_FDCAN1_Initv+0x90>)
 800138c:	220a      	movs	r2, #10
 800138e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001390:	4b16      	ldr	r3, [pc, #88]	@ (80013ec <_ZL14MX_FDCAN1_Initv+0x90>)
 8001392:	2201      	movs	r2, #1
 8001394:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 8001396:	4b15      	ldr	r3, [pc, #84]	@ (80013ec <_ZL14MX_FDCAN1_Initv+0x90>)
 8001398:	220e      	movs	r2, #14
 800139a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800139c:	4b13      	ldr	r3, [pc, #76]	@ (80013ec <_ZL14MX_FDCAN1_Initv+0x90>)
 800139e:	2202      	movs	r2, #2
 80013a0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 10;
 80013a2:	4b12      	ldr	r3, [pc, #72]	@ (80013ec <_ZL14MX_FDCAN1_Initv+0x90>)
 80013a4:	220a      	movs	r2, #10
 80013a6:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80013a8:	4b10      	ldr	r3, [pc, #64]	@ (80013ec <_ZL14MX_FDCAN1_Initv+0x90>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 14;
 80013ae:	4b0f      	ldr	r3, [pc, #60]	@ (80013ec <_ZL14MX_FDCAN1_Initv+0x90>)
 80013b0:	220e      	movs	r2, #14
 80013b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 80013b4:	4b0d      	ldr	r3, [pc, #52]	@ (80013ec <_ZL14MX_FDCAN1_Initv+0x90>)
 80013b6:	2202      	movs	r2, #2
 80013b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80013ba:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <_ZL14MX_FDCAN1_Initv+0x90>)
 80013bc:	2200      	movs	r2, #0
 80013be:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80013c0:	4b0a      	ldr	r3, [pc, #40]	@ (80013ec <_ZL14MX_FDCAN1_Initv+0x90>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80013c6:	4b09      	ldr	r3, [pc, #36]	@ (80013ec <_ZL14MX_FDCAN1_Initv+0x90>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80013cc:	4807      	ldr	r0, [pc, #28]	@ (80013ec <_ZL14MX_FDCAN1_Initv+0x90>)
 80013ce:	f001 f8d7 	bl	8002580 <HAL_FDCAN_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	bf14      	ite	ne
 80013d8:	2301      	movne	r3, #1
 80013da:	2300      	moveq	r3, #0
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <_ZL14MX_FDCAN1_Initv+0x8a>
  {
    Error_Handler();
 80013e2:	f000 f99f 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	200004d0 	.word	0x200004d0
 80013f0:	40006400 	.word	0x40006400

080013f4 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b09c      	sub	sp, #112	@ 0x70
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013fa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001408:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001414:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
 8001424:	615a      	str	r2, [r3, #20]
 8001426:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	2234      	movs	r2, #52	@ 0x34
 800142c:	2100      	movs	r1, #0
 800142e:	4618      	mov	r0, r3
 8001430:	f008 f9a4 	bl	800977c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001434:	4b54      	ldr	r3, [pc, #336]	@ (8001588 <_ZL12MX_TIM1_Initv+0x194>)
 8001436:	4a55      	ldr	r2, [pc, #340]	@ (800158c <_ZL12MX_TIM1_Initv+0x198>)
 8001438:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800143a:	4b53      	ldr	r3, [pc, #332]	@ (8001588 <_ZL12MX_TIM1_Initv+0x194>)
 800143c:	2200      	movs	r2, #0
 800143e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001440:	4b51      	ldr	r3, [pc, #324]	@ (8001588 <_ZL12MX_TIM1_Initv+0x194>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 215;
 8001446:	4b50      	ldr	r3, [pc, #320]	@ (8001588 <_ZL12MX_TIM1_Initv+0x194>)
 8001448:	22d7      	movs	r2, #215	@ 0xd7
 800144a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800144c:	4b4e      	ldr	r3, [pc, #312]	@ (8001588 <_ZL12MX_TIM1_Initv+0x194>)
 800144e:	2200      	movs	r2, #0
 8001450:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001452:	4b4d      	ldr	r3, [pc, #308]	@ (8001588 <_ZL12MX_TIM1_Initv+0x194>)
 8001454:	2200      	movs	r2, #0
 8001456:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001458:	4b4b      	ldr	r3, [pc, #300]	@ (8001588 <_ZL12MX_TIM1_Initv+0x194>)
 800145a:	2200      	movs	r2, #0
 800145c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800145e:	484a      	ldr	r0, [pc, #296]	@ (8001588 <_ZL12MX_TIM1_Initv+0x194>)
 8001460:	f002 ff4e 	bl	8004300 <HAL_TIM_Base_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	bf14      	ite	ne
 800146a:	2301      	movne	r3, #1
 800146c:	2300      	moveq	r3, #0
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <_ZL12MX_TIM1_Initv+0x84>
  {
    Error_Handler();
 8001474:	f000 f956 	bl	8001724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001478:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800147c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800147e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001482:	4619      	mov	r1, r3
 8001484:	4840      	ldr	r0, [pc, #256]	@ (8001588 <_ZL12MX_TIM1_Initv+0x194>)
 8001486:	f003 fc17 	bl	8004cb8 <HAL_TIM_ConfigClockSource>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	bf14      	ite	ne
 8001490:	2301      	movne	r3, #1
 8001492:	2300      	moveq	r3, #0
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <_ZL12MX_TIM1_Initv+0xaa>
  {
    Error_Handler();
 800149a:	f000 f943 	bl	8001724 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800149e:	483a      	ldr	r0, [pc, #232]	@ (8001588 <_ZL12MX_TIM1_Initv+0x194>)
 80014a0:	f002 ff85 	bl	80043ae <HAL_TIM_PWM_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	bf14      	ite	ne
 80014aa:	2301      	movne	r3, #1
 80014ac:	2300      	moveq	r3, #0
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <_ZL12MX_TIM1_Initv+0xc4>
  {
    Error_Handler();
 80014b4:	f000 f936 	bl	8001724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b8:	2300      	movs	r3, #0
 80014ba:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014bc:	2300      	movs	r3, #0
 80014be:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014c4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014c8:	4619      	mov	r1, r3
 80014ca:	482f      	ldr	r0, [pc, #188]	@ (8001588 <_ZL12MX_TIM1_Initv+0x194>)
 80014cc:	f004 fa28 	bl	8005920 <HAL_TIMEx_MasterConfigSynchronization>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	bf14      	ite	ne
 80014d6:	2301      	movne	r3, #1
 80014d8:	2300      	moveq	r3, #0
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <_ZL12MX_TIM1_Initv+0xf0>
  {
    Error_Handler();
 80014e0:	f000 f920 	bl	8001724 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014e4:	2360      	movs	r3, #96	@ 0x60
 80014e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ec:	2300      	movs	r3, #0
 80014ee:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014f0:	2300      	movs	r3, #0
 80014f2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014f4:	2300      	movs	r3, #0
 80014f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014f8:	2300      	movs	r3, #0
 80014fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014fc:	2300      	movs	r3, #0
 80014fe:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001500:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001504:	2200      	movs	r2, #0
 8001506:	4619      	mov	r1, r3
 8001508:	481f      	ldr	r0, [pc, #124]	@ (8001588 <_ZL12MX_TIM1_Initv+0x194>)
 800150a:	f003 fac1 	bl	8004a90 <HAL_TIM_PWM_ConfigChannel>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	bf14      	ite	ne
 8001514:	2301      	movne	r3, #1
 8001516:	2300      	moveq	r3, #0
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <_ZL12MX_TIM1_Initv+0x12e>
  {
    Error_Handler();
 800151e:	f000 f901 	bl	8001724 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001522:	2300      	movs	r3, #0
 8001524:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001526:	2300      	movs	r3, #0
 8001528:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001536:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800153a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001540:	2300      	movs	r3, #0
 8001542:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001548:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800154c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001552:	2300      	movs	r3, #0
 8001554:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001556:	2300      	movs	r3, #0
 8001558:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	4619      	mov	r1, r3
 800155e:	480a      	ldr	r0, [pc, #40]	@ (8001588 <_ZL12MX_TIM1_Initv+0x194>)
 8001560:	f004 fa60 	bl	8005a24 <HAL_TIMEx_ConfigBreakDeadTime>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	bf14      	ite	ne
 800156a:	2301      	movne	r3, #1
 800156c:	2300      	moveq	r3, #0
 800156e:	b2db      	uxtb	r3, r3
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <_ZL12MX_TIM1_Initv+0x184>
  {
    Error_Handler();
 8001574:	f000 f8d6 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001578:	4803      	ldr	r0, [pc, #12]	@ (8001588 <_ZL12MX_TIM1_Initv+0x194>)
 800157a:	f000 f9ed 	bl	8001958 <HAL_TIM_MspPostInit>

}
 800157e:	bf00      	nop
 8001580:	3770      	adds	r7, #112	@ 0x70
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000534 	.word	0x20000534
 800158c:	40012c00 	.word	0x40012c00

08001590 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001594:	4b2c      	ldr	r3, [pc, #176]	@ (8001648 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001596:	4a2d      	ldr	r2, [pc, #180]	@ (800164c <_ZL19MX_USART2_UART_Initv+0xbc>)
 8001598:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800159a:	4b2b      	ldr	r3, [pc, #172]	@ (8001648 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800159c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015a2:	4b29      	ldr	r3, [pc, #164]	@ (8001648 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015a8:	4b27      	ldr	r3, [pc, #156]	@ (8001648 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015ae:	4b26      	ldr	r3, [pc, #152]	@ (8001648 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015b4:	4b24      	ldr	r3, [pc, #144]	@ (8001648 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80015b6:	220c      	movs	r2, #12
 80015b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ba:	4b23      	ldr	r3, [pc, #140]	@ (8001648 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80015bc:	2200      	movs	r2, #0
 80015be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c0:	4b21      	ldr	r3, [pc, #132]	@ (8001648 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015c6:	4b20      	ldr	r3, [pc, #128]	@ (8001648 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001648 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001648 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015d8:	481b      	ldr	r0, [pc, #108]	@ (8001648 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80015da:	f004 faaf 	bl	8005b3c <HAL_UART_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	bf14      	ite	ne
 80015e4:	2301      	movne	r3, #1
 80015e6:	2300      	moveq	r3, #0
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 80015ee:	f000 f899 	bl	8001724 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015f2:	2100      	movs	r1, #0
 80015f4:	4814      	ldr	r0, [pc, #80]	@ (8001648 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80015f6:	f005 f8a3 	bl	8006740 <HAL_UARTEx_SetTxFifoThreshold>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	bf14      	ite	ne
 8001600:	2301      	movne	r3, #1
 8001602:	2300      	moveq	r3, #0
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 800160a:	f000 f88b 	bl	8001724 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800160e:	2100      	movs	r1, #0
 8001610:	480d      	ldr	r0, [pc, #52]	@ (8001648 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001612:	f005 f8d3 	bl	80067bc <HAL_UARTEx_SetRxFifoThreshold>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	bf14      	ite	ne
 800161c:	2301      	movne	r3, #1
 800161e:	2300      	moveq	r3, #0
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 8001626:	f000 f87d 	bl	8001724 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800162a:	4807      	ldr	r0, [pc, #28]	@ (8001648 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800162c:	f005 f84f 	bl	80066ce <HAL_UARTEx_DisableFifoMode>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	bf14      	ite	ne
 8001636:	2301      	movne	r3, #1
 8001638:	2300      	moveq	r3, #0
 800163a:	b2db      	uxtb	r3, r3
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8001640:	f000 f870 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}
 8001648:	200005e0 	.word	0x200005e0
 800164c:	40004400 	.word	0x40004400

08001650 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001656:	4b12      	ldr	r3, [pc, #72]	@ (80016a0 <_ZL11MX_DMA_Initv+0x50>)
 8001658:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800165a:	4a11      	ldr	r2, [pc, #68]	@ (80016a0 <_ZL11MX_DMA_Initv+0x50>)
 800165c:	f043 0304 	orr.w	r3, r3, #4
 8001660:	6493      	str	r3, [r2, #72]	@ 0x48
 8001662:	4b0f      	ldr	r3, [pc, #60]	@ (80016a0 <_ZL11MX_DMA_Initv+0x50>)
 8001664:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001666:	f003 0304 	and.w	r3, r3, #4
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800166e:	4b0c      	ldr	r3, [pc, #48]	@ (80016a0 <_ZL11MX_DMA_Initv+0x50>)
 8001670:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001672:	4a0b      	ldr	r2, [pc, #44]	@ (80016a0 <_ZL11MX_DMA_Initv+0x50>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6493      	str	r3, [r2, #72]	@ 0x48
 800167a:	4b09      	ldr	r3, [pc, #36]	@ (80016a0 <_ZL11MX_DMA_Initv+0x50>)
 800167c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	2100      	movs	r1, #0
 800168a:	200b      	movs	r0, #11
 800168c:	f000 fc69 	bl	8001f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001690:	200b      	movs	r0, #11
 8001692:	f000 fc80 	bl	8001f96 <HAL_NVIC_EnableIRQ>

}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40021000 	.word	0x40021000

080016a4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b088      	sub	sp, #32
 80016a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016aa:	f107 030c 	add.w	r3, r7, #12
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]
 80016b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ba:	4b18      	ldr	r3, [pc, #96]	@ (800171c <_ZL12MX_GPIO_Initv+0x78>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016be:	4a17      	ldr	r2, [pc, #92]	@ (800171c <_ZL12MX_GPIO_Initv+0x78>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016c6:	4b15      	ldr	r3, [pc, #84]	@ (800171c <_ZL12MX_GPIO_Initv+0x78>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d2:	4b12      	ldr	r3, [pc, #72]	@ (800171c <_ZL12MX_GPIO_Initv+0x78>)
 80016d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d6:	4a11      	ldr	r2, [pc, #68]	@ (800171c <_ZL12MX_GPIO_Initv+0x78>)
 80016d8:	f043 0302 	orr.w	r3, r3, #2
 80016dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016de:	4b0f      	ldr	r3, [pc, #60]	@ (800171c <_ZL12MX_GPIO_Initv+0x78>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016ea:	2200      	movs	r2, #0
 80016ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016f0:	480b      	ldr	r0, [pc, #44]	@ (8001720 <_ZL12MX_GPIO_Initv+0x7c>)
 80016f2:	f001 fe1b 	bl	800332c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80016f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fc:	2301      	movs	r3, #1
 80016fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001704:	2300      	movs	r3, #0
 8001706:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	4619      	mov	r1, r3
 800170e:	4804      	ldr	r0, [pc, #16]	@ (8001720 <_ZL12MX_GPIO_Initv+0x7c>)
 8001710:	f001 fc8a 	bl	8003028 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001714:	bf00      	nop
 8001716:	3720      	adds	r7, #32
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40021000 	.word	0x40021000
 8001720:	48000400 	.word	0x48000400

08001724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001728:	b672      	cpsid	i
}
 800172a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800172c:	bf00      	nop
 800172e:	e7fd      	b.n	800172c <Error_Handler+0x8>

08001730 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d10d      	bne.n	800175c <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001746:	4293      	cmp	r3, r2
 8001748:	d108      	bne.n	800175c <_Z41__static_initialization_and_destruction_0ii+0x2c>
ChampiCan champi_can;
 800174a:	480f      	ldr	r0, [pc, #60]	@ (8001788 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800174c:	f005 f8f4 	bl	8006938 <_ZN9ChampiCanC1Ev>
MessageRecomposer msg_recomposer_led_ring_distances;
 8001750:	480e      	ldr	r0, [pc, #56]	@ (800178c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001752:	f005 f989 	bl	8006a68 <_ZN17MessageRecomposerC1Ev>
ChampiState champi_state;
 8001756:	480e      	ldr	r0, [pc, #56]	@ (8001790 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001758:	f005 f950 	bl	80069fc <_ZN11ChampiStateC1Ev>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d10d      	bne.n	800177e <_Z41__static_initialization_and_destruction_0ii+0x4e>
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001768:	4293      	cmp	r3, r2
 800176a:	d108      	bne.n	800177e <_Z41__static_initialization_and_destruction_0ii+0x4e>
 800176c:	4808      	ldr	r0, [pc, #32]	@ (8001790 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800176e:	f005 f95b 	bl	8006a28 <_ZN11ChampiStateD1Ev>
MessageRecomposer msg_recomposer_led_ring_distances;
 8001772:	4806      	ldr	r0, [pc, #24]	@ (800178c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001774:	f005 fa72 	bl	8006c5c <_ZN17MessageRecomposerD1Ev>
ChampiCan champi_can;
 8001778:	4803      	ldr	r0, [pc, #12]	@ (8001788 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800177a:	f005 f91f 	bl	80069bc <_ZN9ChampiCanD1Ev>
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	200000e8 	.word	0x200000e8
 800178c:	20000114 	.word	0x20000114
 8001790:	20000428 	.word	0x20000428

08001794 <_GLOBAL__sub_I_datasentflag>:
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
 8001798:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800179c:	2001      	movs	r0, #1
 800179e:	f7ff ffc7 	bl	8001730 <_Z41__static_initialization_and_destruction_0ii>
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <_GLOBAL__sub_D_datasentflag>:
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80017ac:	2000      	movs	r0, #0
 80017ae:	f7ff ffbf 	bl	8001730 <_Z41__static_initialization_and_destruction_0ii>
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ba:	4b0f      	ldr	r3, [pc, #60]	@ (80017f8 <HAL_MspInit+0x44>)
 80017bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017be:	4a0e      	ldr	r2, [pc, #56]	@ (80017f8 <HAL_MspInit+0x44>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80017c6:	4b0c      	ldr	r3, [pc, #48]	@ (80017f8 <HAL_MspInit+0x44>)
 80017c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	607b      	str	r3, [r7, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017d2:	4b09      	ldr	r3, [pc, #36]	@ (80017f8 <HAL_MspInit+0x44>)
 80017d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d6:	4a08      	ldr	r2, [pc, #32]	@ (80017f8 <HAL_MspInit+0x44>)
 80017d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80017de:	4b06      	ldr	r3, [pc, #24]	@ (80017f8 <HAL_MspInit+0x44>)
 80017e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80017ea:	f001 fe5b 	bl	80034a4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40021000 	.word	0x40021000

080017fc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b09a      	sub	sp, #104	@ 0x68
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001814:	f107 0310 	add.w	r3, r7, #16
 8001818:	2244      	movs	r2, #68	@ 0x44
 800181a:	2100      	movs	r1, #0
 800181c:	4618      	mov	r0, r3
 800181e:	f007 ffad 	bl	800977c <memset>
  if(hfdcan->Instance==FDCAN1)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a24      	ldr	r2, [pc, #144]	@ (80018b8 <HAL_FDCAN_MspInit+0xbc>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d141      	bne.n	80018b0 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800182c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001830:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001832:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001836:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001838:	f107 0310 	add.w	r3, r7, #16
 800183c:	4618      	mov	r0, r3
 800183e:	f002 fb6f 	bl	8003f20 <HAL_RCCEx_PeriphCLKConfig>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001848:	f7ff ff6c 	bl	8001724 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800184c:	4b1b      	ldr	r3, [pc, #108]	@ (80018bc <HAL_FDCAN_MspInit+0xc0>)
 800184e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001850:	4a1a      	ldr	r2, [pc, #104]	@ (80018bc <HAL_FDCAN_MspInit+0xc0>)
 8001852:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001856:	6593      	str	r3, [r2, #88]	@ 0x58
 8001858:	4b18      	ldr	r3, [pc, #96]	@ (80018bc <HAL_FDCAN_MspInit+0xc0>)
 800185a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800185c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001864:	4b15      	ldr	r3, [pc, #84]	@ (80018bc <HAL_FDCAN_MspInit+0xc0>)
 8001866:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001868:	4a14      	ldr	r2, [pc, #80]	@ (80018bc <HAL_FDCAN_MspInit+0xc0>)
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001870:	4b12      	ldr	r3, [pc, #72]	@ (80018bc <HAL_FDCAN_MspInit+0xc0>)
 8001872:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800187c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001880:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001882:	2302      	movs	r3, #2
 8001884:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188a:	2300      	movs	r3, #0
 800188c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800188e:	2309      	movs	r3, #9
 8001890:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001892:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001896:	4619      	mov	r1, r3
 8001898:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800189c:	f001 fbc4 	bl	8003028 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80018a0:	2200      	movs	r2, #0
 80018a2:	2100      	movs	r1, #0
 80018a4:	2015      	movs	r0, #21
 80018a6:	f000 fb5c 	bl	8001f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80018aa:	2015      	movs	r0, #21
 80018ac:	f000 fb73 	bl	8001f96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80018b0:	bf00      	nop
 80018b2:	3768      	adds	r7, #104	@ 0x68
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40006400 	.word	0x40006400
 80018bc:	40021000 	.word	0x40021000

080018c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a1e      	ldr	r2, [pc, #120]	@ (8001948 <HAL_TIM_Base_MspInit+0x88>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d136      	bne.n	8001940 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018d2:	4b1e      	ldr	r3, [pc, #120]	@ (800194c <HAL_TIM_Base_MspInit+0x8c>)
 80018d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018d6:	4a1d      	ldr	r2, [pc, #116]	@ (800194c <HAL_TIM_Base_MspInit+0x8c>)
 80018d8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80018dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80018de:	4b1b      	ldr	r3, [pc, #108]	@ (800194c <HAL_TIM_Base_MspInit+0x8c>)
 80018e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel1;
 80018ea:	4b19      	ldr	r3, [pc, #100]	@ (8001950 <HAL_TIM_Base_MspInit+0x90>)
 80018ec:	4a19      	ldr	r2, [pc, #100]	@ (8001954 <HAL_TIM_Base_MspInit+0x94>)
 80018ee:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 80018f0:	4b17      	ldr	r3, [pc, #92]	@ (8001950 <HAL_TIM_Base_MspInit+0x90>)
 80018f2:	222a      	movs	r2, #42	@ 0x2a
 80018f4:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018f6:	4b16      	ldr	r3, [pc, #88]	@ (8001950 <HAL_TIM_Base_MspInit+0x90>)
 80018f8:	2210      	movs	r2, #16
 80018fa:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018fc:	4b14      	ldr	r3, [pc, #80]	@ (8001950 <HAL_TIM_Base_MspInit+0x90>)
 80018fe:	2200      	movs	r2, #0
 8001900:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001902:	4b13      	ldr	r3, [pc, #76]	@ (8001950 <HAL_TIM_Base_MspInit+0x90>)
 8001904:	2280      	movs	r2, #128	@ 0x80
 8001906:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001908:	4b11      	ldr	r3, [pc, #68]	@ (8001950 <HAL_TIM_Base_MspInit+0x90>)
 800190a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800190e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001910:	4b0f      	ldr	r3, [pc, #60]	@ (8001950 <HAL_TIM_Base_MspInit+0x90>)
 8001912:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001916:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001918:	4b0d      	ldr	r3, [pc, #52]	@ (8001950 <HAL_TIM_Base_MspInit+0x90>)
 800191a:	2200      	movs	r2, #0
 800191c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800191e:	4b0c      	ldr	r3, [pc, #48]	@ (8001950 <HAL_TIM_Base_MspInit+0x90>)
 8001920:	2200      	movs	r2, #0
 8001922:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001924:	480a      	ldr	r0, [pc, #40]	@ (8001950 <HAL_TIM_Base_MspInit+0x90>)
 8001926:	f000 fb51 	bl	8001fcc <HAL_DMA_Init>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8001930:	f7ff fef8 	bl	8001724 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a06      	ldr	r2, [pc, #24]	@ (8001950 <HAL_TIM_Base_MspInit+0x90>)
 8001938:	625a      	str	r2, [r3, #36]	@ 0x24
 800193a:	4a05      	ldr	r2, [pc, #20]	@ (8001950 <HAL_TIM_Base_MspInit+0x90>)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001940:	bf00      	nop
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40012c00 	.word	0x40012c00
 800194c:	40021000 	.word	0x40021000
 8001950:	20000580 	.word	0x20000580
 8001954:	40020008 	.word	0x40020008

08001958 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	f107 030c 	add.w	r3, r7, #12
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a12      	ldr	r2, [pc, #72]	@ (80019c0 <HAL_TIM_MspPostInit+0x68>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d11d      	bne.n	80019b6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197a:	4b12      	ldr	r3, [pc, #72]	@ (80019c4 <HAL_TIM_MspPostInit+0x6c>)
 800197c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800197e:	4a11      	ldr	r2, [pc, #68]	@ (80019c4 <HAL_TIM_MspPostInit+0x6c>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001986:	4b0f      	ldr	r3, [pc, #60]	@ (80019c4 <HAL_TIM_MspPostInit+0x6c>)
 8001988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001992:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001996:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001998:	2302      	movs	r3, #2
 800199a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a0:	2300      	movs	r3, #0
 80019a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80019a4:	2306      	movs	r3, #6
 80019a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a8:	f107 030c 	add.w	r3, r7, #12
 80019ac:	4619      	mov	r1, r3
 80019ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019b2:	f001 fb39 	bl	8003028 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80019b6:	bf00      	nop
 80019b8:	3720      	adds	r7, #32
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40012c00 	.word	0x40012c00
 80019c4:	40021000 	.word	0x40021000

080019c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b09a      	sub	sp, #104	@ 0x68
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019e0:	f107 0310 	add.w	r3, r7, #16
 80019e4:	2244      	movs	r2, #68	@ 0x44
 80019e6:	2100      	movs	r1, #0
 80019e8:	4618      	mov	r0, r3
 80019ea:	f007 fec7 	bl	800977c <memset>
  if(huart->Instance==USART2)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a1f      	ldr	r2, [pc, #124]	@ (8001a70 <HAL_UART_MspInit+0xa8>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d136      	bne.n	8001a66 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80019f8:	2302      	movs	r3, #2
 80019fa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80019fc:	2300      	movs	r3, #0
 80019fe:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a00:	f107 0310 	add.w	r3, r7, #16
 8001a04:	4618      	mov	r0, r3
 8001a06:	f002 fa8b 	bl	8003f20 <HAL_RCCEx_PeriphCLKConfig>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a10:	f7ff fe88 	bl	8001724 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a14:	4b17      	ldr	r3, [pc, #92]	@ (8001a74 <HAL_UART_MspInit+0xac>)
 8001a16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a18:	4a16      	ldr	r2, [pc, #88]	@ (8001a74 <HAL_UART_MspInit+0xac>)
 8001a1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a20:	4b14      	ldr	r3, [pc, #80]	@ (8001a74 <HAL_UART_MspInit+0xac>)
 8001a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2c:	4b11      	ldr	r3, [pc, #68]	@ (8001a74 <HAL_UART_MspInit+0xac>)
 8001a2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a30:	4a10      	ldr	r2, [pc, #64]	@ (8001a74 <HAL_UART_MspInit+0xac>)
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a38:	4b0e      	ldr	r3, [pc, #56]	@ (8001a74 <HAL_UART_MspInit+0xac>)
 8001a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	60bb      	str	r3, [r7, #8]
 8001a42:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001a44:	230c      	movs	r3, #12
 8001a46:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a50:	2300      	movs	r3, #0
 8001a52:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a54:	2307      	movs	r3, #7
 8001a56:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a58:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a62:	f001 fae1 	bl	8003028 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a66:	bf00      	nop
 8001a68:	3768      	adds	r7, #104	@ 0x68
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40004400 	.word	0x40004400
 8001a74:	40021000 	.word	0x40021000

08001a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a7c:	bf00      	nop
 8001a7e:	e7fd      	b.n	8001a7c <NMI_Handler+0x4>

08001a80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a84:	bf00      	nop
 8001a86:	e7fd      	b.n	8001a84 <HardFault_Handler+0x4>

08001a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a8c:	bf00      	nop
 8001a8e:	e7fd      	b.n	8001a8c <MemManage_Handler+0x4>

08001a90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a94:	bf00      	nop
 8001a96:	e7fd      	b.n	8001a94 <BusFault_Handler+0x4>

08001a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a9c:	bf00      	nop
 8001a9e:	e7fd      	b.n	8001a9c <UsageFault_Handler+0x4>

08001aa0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ace:	f000 f94f 	bl	8001d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001adc:	4802      	ldr	r0, [pc, #8]	@ (8001ae8 <DMA1_Channel1_IRQHandler+0x10>)
 8001ade:	f000 fbff 	bl	80022e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000580 	.word	0x20000580

08001aec <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001af0:	4802      	ldr	r0, [pc, #8]	@ (8001afc <FDCAN1_IT0_IRQHandler+0x10>)
 8001af2:	f001 f8b5 	bl	8002c60 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	200004d0 	.word	0x200004d0

08001b00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return 1;
 8001b04:	2301      	movs	r3, #1
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <_kill>:

int _kill(int pid, int sig)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b1a:	f007 fed1 	bl	80098c0 <__errno>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2216      	movs	r2, #22
 8001b22:	601a      	str	r2, [r3, #0]
  return -1;
 8001b24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <_exit>:

void _exit (int status)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b38:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7ff ffe7 	bl	8001b10 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b42:	bf00      	nop
 8001b44:	e7fd      	b.n	8001b42 <_exit+0x12>

08001b46 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b086      	sub	sp, #24
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	60f8      	str	r0, [r7, #12]
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	e00a      	b.n	8001b6e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b58:	f3af 8000 	nop.w
 8001b5c:	4601      	mov	r1, r0
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	1c5a      	adds	r2, r3, #1
 8001b62:	60ba      	str	r2, [r7, #8]
 8001b64:	b2ca      	uxtb	r2, r1
 8001b66:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	617b      	str	r3, [r7, #20]
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	dbf0      	blt.n	8001b58 <_read+0x12>
  }

  return len;
 8001b76:	687b      	ldr	r3, [r7, #4]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ba8:	605a      	str	r2, [r3, #4]
  return 0;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <_isatty>:

int _isatty(int file)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bc0:	2301      	movs	r3, #1
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b085      	sub	sp, #20
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	60f8      	str	r0, [r7, #12]
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bf0:	4a14      	ldr	r2, [pc, #80]	@ (8001c44 <_sbrk+0x5c>)
 8001bf2:	4b15      	ldr	r3, [pc, #84]	@ (8001c48 <_sbrk+0x60>)
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bfc:	4b13      	ldr	r3, [pc, #76]	@ (8001c4c <_sbrk+0x64>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d102      	bne.n	8001c0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c04:	4b11      	ldr	r3, [pc, #68]	@ (8001c4c <_sbrk+0x64>)
 8001c06:	4a12      	ldr	r2, [pc, #72]	@ (8001c50 <_sbrk+0x68>)
 8001c08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c0a:	4b10      	ldr	r3, [pc, #64]	@ (8001c4c <_sbrk+0x64>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4413      	add	r3, r2
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d207      	bcs.n	8001c28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c18:	f007 fe52 	bl	80098c0 <__errno>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	220c      	movs	r2, #12
 8001c20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c26:	e009      	b.n	8001c3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c28:	4b08      	ldr	r3, [pc, #32]	@ (8001c4c <_sbrk+0x64>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c2e:	4b07      	ldr	r3, [pc, #28]	@ (8001c4c <_sbrk+0x64>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	4a05      	ldr	r2, [pc, #20]	@ (8001c4c <_sbrk+0x64>)
 8001c38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20008000 	.word	0x20008000
 8001c48:	00000400 	.word	0x00000400
 8001c4c:	20000ce4 	.word	0x20000ce4
 8001c50:	20000e40 	.word	0x20000e40

08001c54 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c58:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <SystemInit+0x20>)
 8001c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c5e:	4a05      	ldr	r2, [pc, #20]	@ (8001c74 <SystemInit+0x20>)
 8001c60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c78:	480d      	ldr	r0, [pc, #52]	@ (8001cb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c7a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c7c:	f7ff ffea 	bl	8001c54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c80:	480c      	ldr	r0, [pc, #48]	@ (8001cb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c82:	490d      	ldr	r1, [pc, #52]	@ (8001cb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c84:	4a0d      	ldr	r2, [pc, #52]	@ (8001cbc <LoopForever+0xe>)
  movs r3, #0
 8001c86:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001c88:	e002      	b.n	8001c90 <LoopCopyDataInit>

08001c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c8e:	3304      	adds	r3, #4

08001c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c94:	d3f9      	bcc.n	8001c8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c96:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c98:	4c0a      	ldr	r4, [pc, #40]	@ (8001cc4 <LoopForever+0x16>)
  movs r3, #0
 8001c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c9c:	e001      	b.n	8001ca2 <LoopFillZerobss>

08001c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca0:	3204      	adds	r2, #4

08001ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca4:	d3fb      	bcc.n	8001c9e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001ca6:	f007 fe11 	bl	80098cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001caa:	f7ff fae7 	bl	800127c <main>

08001cae <LoopForever>:

LoopForever:
    b LoopForever
 8001cae:	e7fe      	b.n	8001cae <LoopForever>
  ldr   r0, =_estack
 8001cb0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001cb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cb8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001cbc:	0800a574 	.word	0x0800a574
  ldr r2, =_sbss
 8001cc0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001cc4:	20000e3c 	.word	0x20000e3c

08001cc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cc8:	e7fe      	b.n	8001cc8 <ADC1_2_IRQHandler>

08001cca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cd4:	2003      	movs	r0, #3
 8001cd6:	f000 f939 	bl	8001f4c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cda:	2000      	movs	r0, #0
 8001cdc:	f000 f80e 	bl	8001cfc <HAL_InitTick>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d002      	beq.n	8001cec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	71fb      	strb	r3, [r7, #7]
 8001cea:	e001      	b.n	8001cf0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cec:	f7ff fd62 	bl	80017b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cf0:	79fb      	ldrb	r3, [r7, #7]

}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d04:	2300      	movs	r3, #0
 8001d06:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d08:	4b16      	ldr	r3, [pc, #88]	@ (8001d64 <HAL_InitTick+0x68>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d022      	beq.n	8001d56 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d10:	4b15      	ldr	r3, [pc, #84]	@ (8001d68 <HAL_InitTick+0x6c>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	4b13      	ldr	r3, [pc, #76]	@ (8001d64 <HAL_InitTick+0x68>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d24:	4618      	mov	r0, r3
 8001d26:	f000 f944 	bl	8001fb2 <HAL_SYSTICK_Config>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d10f      	bne.n	8001d50 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b0f      	cmp	r3, #15
 8001d34:	d809      	bhi.n	8001d4a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d36:	2200      	movs	r2, #0
 8001d38:	6879      	ldr	r1, [r7, #4]
 8001d3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d3e:	f000 f910 	bl	8001f62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d42:	4a0a      	ldr	r2, [pc, #40]	@ (8001d6c <HAL_InitTick+0x70>)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6013      	str	r3, [r2, #0]
 8001d48:	e007      	b.n	8001d5a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	73fb      	strb	r3, [r7, #15]
 8001d4e:	e004      	b.n	8001d5a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	73fb      	strb	r3, [r7, #15]
 8001d54:	e001      	b.n	8001d5a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20000008 	.word	0x20000008
 8001d68:	20000000 	.word	0x20000000
 8001d6c:	20000004 	.word	0x20000004

08001d70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d74:	4b05      	ldr	r3, [pc, #20]	@ (8001d8c <HAL_IncTick+0x1c>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4b05      	ldr	r3, [pc, #20]	@ (8001d90 <HAL_IncTick+0x20>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	4a03      	ldr	r2, [pc, #12]	@ (8001d8c <HAL_IncTick+0x1c>)
 8001d80:	6013      	str	r3, [r2, #0]
}
 8001d82:	bf00      	nop
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	20000ce8 	.word	0x20000ce8
 8001d90:	20000008 	.word	0x20000008

08001d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return uwTick;
 8001d98:	4b03      	ldr	r3, [pc, #12]	@ (8001da8 <HAL_GetTick+0x14>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	20000ce8 	.word	0x20000ce8

08001dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001df0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dc8:	4013      	ands	r3, r2
 8001dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dde:	4a04      	ldr	r2, [pc, #16]	@ (8001df0 <__NVIC_SetPriorityGrouping+0x44>)
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	60d3      	str	r3, [r2, #12]
}
 8001de4:	bf00      	nop
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001df8:	4b04      	ldr	r3, [pc, #16]	@ (8001e0c <__NVIC_GetPriorityGrouping+0x18>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	0a1b      	lsrs	r3, r3, #8
 8001dfe:	f003 0307 	and.w	r3, r3, #7
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	db0b      	blt.n	8001e3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	f003 021f 	and.w	r2, r3, #31
 8001e28:	4907      	ldr	r1, [pc, #28]	@ (8001e48 <__NVIC_EnableIRQ+0x38>)
 8001e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2e:	095b      	lsrs	r3, r3, #5
 8001e30:	2001      	movs	r0, #1
 8001e32:	fa00 f202 	lsl.w	r2, r0, r2
 8001e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	e000e100 	.word	0xe000e100

08001e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	6039      	str	r1, [r7, #0]
 8001e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	db0a      	blt.n	8001e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	490c      	ldr	r1, [pc, #48]	@ (8001e98 <__NVIC_SetPriority+0x4c>)
 8001e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6a:	0112      	lsls	r2, r2, #4
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	440b      	add	r3, r1
 8001e70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e74:	e00a      	b.n	8001e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	4908      	ldr	r1, [pc, #32]	@ (8001e9c <__NVIC_SetPriority+0x50>)
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	3b04      	subs	r3, #4
 8001e84:	0112      	lsls	r2, r2, #4
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	440b      	add	r3, r1
 8001e8a:	761a      	strb	r2, [r3, #24]
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	e000e100 	.word	0xe000e100
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b089      	sub	sp, #36	@ 0x24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	f1c3 0307 	rsb	r3, r3, #7
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	bf28      	it	cs
 8001ebe:	2304      	movcs	r3, #4
 8001ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	2b06      	cmp	r3, #6
 8001ec8:	d902      	bls.n	8001ed0 <NVIC_EncodePriority+0x30>
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	3b03      	subs	r3, #3
 8001ece:	e000      	b.n	8001ed2 <NVIC_EncodePriority+0x32>
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43da      	mvns	r2, r3
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	401a      	ands	r2, r3
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ee8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef2:	43d9      	mvns	r1, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef8:	4313      	orrs	r3, r2
         );
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3724      	adds	r7, #36	@ 0x24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
	...

08001f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f18:	d301      	bcc.n	8001f1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e00f      	b.n	8001f3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f48 <SysTick_Config+0x40>)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f26:	210f      	movs	r1, #15
 8001f28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f2c:	f7ff ff8e 	bl	8001e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f30:	4b05      	ldr	r3, [pc, #20]	@ (8001f48 <SysTick_Config+0x40>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f36:	4b04      	ldr	r3, [pc, #16]	@ (8001f48 <SysTick_Config+0x40>)
 8001f38:	2207      	movs	r2, #7
 8001f3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	e000e010 	.word	0xe000e010

08001f4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff ff29 	bl	8001dac <__NVIC_SetPriorityGrouping>
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b086      	sub	sp, #24
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	4603      	mov	r3, r0
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	607a      	str	r2, [r7, #4]
 8001f6e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f70:	f7ff ff40 	bl	8001df4 <__NVIC_GetPriorityGrouping>
 8001f74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	68b9      	ldr	r1, [r7, #8]
 8001f7a:	6978      	ldr	r0, [r7, #20]
 8001f7c:	f7ff ff90 	bl	8001ea0 <NVIC_EncodePriority>
 8001f80:	4602      	mov	r2, r0
 8001f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f86:	4611      	mov	r1, r2
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff ff5f 	bl	8001e4c <__NVIC_SetPriority>
}
 8001f8e:	bf00      	nop
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ff33 	bl	8001e10 <__NVIC_EnableIRQ>
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff ffa4 	bl	8001f08 <SysTick_Config>
 8001fc0:	4603      	mov	r3, r0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
	...

08001fcc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e08d      	b.n	80020fa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	4b47      	ldr	r3, [pc, #284]	@ (8002104 <HAL_DMA_Init+0x138>)
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d80f      	bhi.n	800200a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	4b45      	ldr	r3, [pc, #276]	@ (8002108 <HAL_DMA_Init+0x13c>)
 8001ff2:	4413      	add	r3, r2
 8001ff4:	4a45      	ldr	r2, [pc, #276]	@ (800210c <HAL_DMA_Init+0x140>)
 8001ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffa:	091b      	lsrs	r3, r3, #4
 8001ffc:	009a      	lsls	r2, r3, #2
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a42      	ldr	r2, [pc, #264]	@ (8002110 <HAL_DMA_Init+0x144>)
 8002006:	641a      	str	r2, [r3, #64]	@ 0x40
 8002008:	e00e      	b.n	8002028 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	4b40      	ldr	r3, [pc, #256]	@ (8002114 <HAL_DMA_Init+0x148>)
 8002012:	4413      	add	r3, r2
 8002014:	4a3d      	ldr	r2, [pc, #244]	@ (800210c <HAL_DMA_Init+0x140>)
 8002016:	fba2 2303 	umull	r2, r3, r2, r3
 800201a:	091b      	lsrs	r3, r3, #4
 800201c:	009a      	lsls	r2, r3, #2
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a3c      	ldr	r2, [pc, #240]	@ (8002118 <HAL_DMA_Init+0x14c>)
 8002026:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2202      	movs	r2, #2
 800202c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800203e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002042:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800204c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002058:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002064:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	4313      	orrs	r3, r2
 8002070:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 fa1e 	bl	80024bc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002088:	d102      	bne.n	8002090 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80020a4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d010      	beq.n	80020d0 <HAL_DMA_Init+0x104>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	d80c      	bhi.n	80020d0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 fa3e 	bl	8002538 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80020cc:	605a      	str	r2, [r3, #4]
 80020ce:	e008      	b.n	80020e2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40020407 	.word	0x40020407
 8002108:	bffdfff8 	.word	0xbffdfff8
 800210c:	cccccccd 	.word	0xcccccccd
 8002110:	40020000 	.word	0x40020000
 8002114:	bffdfbf8 	.word	0xbffdfbf8
 8002118:	40020400 	.word	0x40020400

0800211c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
 8002128:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800212a:	2300      	movs	r3, #0
 800212c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002134:	2b01      	cmp	r3, #1
 8002136:	d101      	bne.n	800213c <HAL_DMA_Start_IT+0x20>
 8002138:	2302      	movs	r3, #2
 800213a:	e066      	b.n	800220a <HAL_DMA_Start_IT+0xee>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b01      	cmp	r3, #1
 800214e:	d155      	bne.n	80021fc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2202      	movs	r2, #2
 8002154:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f022 0201 	bic.w	r2, r2, #1
 800216c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	68b9      	ldr	r1, [r7, #8]
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f000 f962 	bl	800243e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217e:	2b00      	cmp	r3, #0
 8002180:	d008      	beq.n	8002194 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f042 020e 	orr.w	r2, r2, #14
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	e00f      	b.n	80021b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0204 	bic.w	r2, r2, #4
 80021a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 020a 	orr.w	r2, r2, #10
 80021b2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d007      	beq.n	80021d2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021d0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d007      	beq.n	80021ea <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021e8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f042 0201 	orr.w	r2, r2, #1
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	e005      	b.n	8002208 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002204:	2302      	movs	r3, #2
 8002206:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002208:	7dfb      	ldrb	r3, [r7, #23]
}
 800220a:	4618      	mov	r0, r3
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b084      	sub	sp, #16
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800221a:	2300      	movs	r3, #0
 800221c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d00d      	beq.n	8002246 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2204      	movs	r2, #4
 800222e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	73fb      	strb	r3, [r7, #15]
 8002244:	e047      	b.n	80022d6 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 020e 	bic.w	r2, r2, #14
 8002254:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 0201 	bic.w	r2, r2, #1
 8002264:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002270:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002274:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800227a:	f003 021f 	and.w	r2, r3, #31
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002282:	2101      	movs	r1, #1
 8002284:	fa01 f202 	lsl.w	r2, r1, r2
 8002288:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002292:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00c      	beq.n	80022b6 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022aa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80022b4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	4798      	blx	r3
    }
  }
  return status;
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fc:	f003 031f 	and.w	r3, r3, #31
 8002300:	2204      	movs	r2, #4
 8002302:	409a      	lsls	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4013      	ands	r3, r2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d026      	beq.n	800235a <HAL_DMA_IRQHandler+0x7a>
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	f003 0304 	and.w	r3, r3, #4
 8002312:	2b00      	cmp	r3, #0
 8002314:	d021      	beq.n	800235a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0320 	and.w	r3, r3, #32
 8002320:	2b00      	cmp	r3, #0
 8002322:	d107      	bne.n	8002334 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0204 	bic.w	r2, r2, #4
 8002332:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002338:	f003 021f 	and.w	r2, r3, #31
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002340:	2104      	movs	r1, #4
 8002342:	fa01 f202 	lsl.w	r2, r1, r2
 8002346:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234c:	2b00      	cmp	r3, #0
 800234e:	d071      	beq.n	8002434 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002358:	e06c      	b.n	8002434 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800235e:	f003 031f 	and.w	r3, r3, #31
 8002362:	2202      	movs	r2, #2
 8002364:	409a      	lsls	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	4013      	ands	r3, r2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d02e      	beq.n	80023cc <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d029      	beq.n	80023cc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0320 	and.w	r3, r3, #32
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10b      	bne.n	800239e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 020a 	bic.w	r2, r2, #10
 8002394:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a2:	f003 021f 	and.w	r2, r3, #31
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023aa:	2102      	movs	r1, #2
 80023ac:	fa01 f202 	lsl.w	r2, r1, r2
 80023b0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d038      	beq.n	8002434 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80023ca:	e033      	b.n	8002434 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d0:	f003 031f 	and.w	r3, r3, #31
 80023d4:	2208      	movs	r2, #8
 80023d6:	409a      	lsls	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	4013      	ands	r3, r2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d02a      	beq.n	8002436 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	f003 0308 	and.w	r3, r3, #8
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d025      	beq.n	8002436 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 020e 	bic.w	r2, r2, #14
 80023f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023fe:	f003 021f 	and.w	r2, r3, #31
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002406:	2101      	movs	r1, #1
 8002408:	fa01 f202 	lsl.w	r2, r1, r2
 800240c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002428:	2b00      	cmp	r3, #0
 800242a:	d004      	beq.n	8002436 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002434:	bf00      	nop
 8002436:	bf00      	nop
}
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800243e:	b480      	push	{r7}
 8002440:	b085      	sub	sp, #20
 8002442:	af00      	add	r7, sp, #0
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	607a      	str	r2, [r7, #4]
 800244a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002454:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800245a:	2b00      	cmp	r3, #0
 800245c:	d004      	beq.n	8002468 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002466:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246c:	f003 021f 	and.w	r2, r3, #31
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002474:	2101      	movs	r1, #1
 8002476:	fa01 f202 	lsl.w	r2, r1, r2
 800247a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	2b10      	cmp	r3, #16
 800248a:	d108      	bne.n	800249e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68ba      	ldr	r2, [r7, #8]
 800249a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800249c:	e007      	b.n	80024ae <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	60da      	str	r2, [r3, #12]
}
 80024ae:	bf00      	nop
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
	...

080024bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80024bc:	b480      	push	{r7}
 80024be:	b087      	sub	sp, #28
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	461a      	mov	r2, r3
 80024ca:	4b16      	ldr	r3, [pc, #88]	@ (8002524 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d802      	bhi.n	80024d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80024d0:	4b15      	ldr	r3, [pc, #84]	@ (8002528 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80024d2:	617b      	str	r3, [r7, #20]
 80024d4:	e001      	b.n	80024da <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80024d6:	4b15      	ldr	r3, [pc, #84]	@ (800252c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80024d8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	3b08      	subs	r3, #8
 80024e6:	4a12      	ldr	r2, [pc, #72]	@ (8002530 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80024e8:	fba2 2303 	umull	r2, r3, r2, r3
 80024ec:	091b      	lsrs	r3, r3, #4
 80024ee:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f4:	089b      	lsrs	r3, r3, #2
 80024f6:	009a      	lsls	r2, r3, #2
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	4413      	add	r3, r2
 80024fc:	461a      	mov	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a0b      	ldr	r2, [pc, #44]	@ (8002534 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002506:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f003 031f 	and.w	r3, r3, #31
 800250e:	2201      	movs	r2, #1
 8002510:	409a      	lsls	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002516:	bf00      	nop
 8002518:	371c      	adds	r7, #28
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	40020407 	.word	0x40020407
 8002528:	40020800 	.word	0x40020800
 800252c:	40020820 	.word	0x40020820
 8002530:	cccccccd 	.word	0xcccccccd
 8002534:	40020880 	.word	0x40020880

08002538 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	b2db      	uxtb	r3, r3
 8002546:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	4b0b      	ldr	r3, [pc, #44]	@ (8002578 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800254c:	4413      	add	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	461a      	mov	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a08      	ldr	r2, [pc, #32]	@ (800257c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800255a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	3b01      	subs	r3, #1
 8002560:	f003 031f 	and.w	r3, r3, #31
 8002564:	2201      	movs	r2, #1
 8002566:	409a      	lsls	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800256c:	bf00      	nop
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	1000823f 	.word	0x1000823f
 800257c:	40020940 	.word	0x40020940

08002580 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e147      	b.n	8002822 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d106      	bne.n	80025ac <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7ff f928 	bl	80017fc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	699a      	ldr	r2, [r3, #24]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 0210 	bic.w	r2, r2, #16
 80025ba:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025bc:	f7ff fbea 	bl	8001d94 <HAL_GetTick>
 80025c0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80025c2:	e012      	b.n	80025ea <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80025c4:	f7ff fbe6 	bl	8001d94 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b0a      	cmp	r3, #10
 80025d0:	d90b      	bls.n	80025ea <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025d6:	f043 0201 	orr.w	r2, r3, #1
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2203      	movs	r2, #3
 80025e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e11b      	b.n	8002822 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	f003 0308 	and.w	r3, r3, #8
 80025f4:	2b08      	cmp	r3, #8
 80025f6:	d0e5      	beq.n	80025c4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	699a      	ldr	r2, [r3, #24]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0201 	orr.w	r2, r2, #1
 8002606:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002608:	f7ff fbc4 	bl	8001d94 <HAL_GetTick>
 800260c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800260e:	e012      	b.n	8002636 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002610:	f7ff fbc0 	bl	8001d94 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b0a      	cmp	r3, #10
 800261c:	d90b      	bls.n	8002636 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002622:	f043 0201 	orr.w	r2, r3, #1
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2203      	movs	r2, #3
 800262e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e0f5      	b.n	8002822 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0e5      	beq.n	8002610 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	699a      	ldr	r2, [r3, #24]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f042 0202 	orr.w	r2, r2, #2
 8002652:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a74      	ldr	r2, [pc, #464]	@ (800282c <HAL_FDCAN_Init+0x2ac>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d103      	bne.n	8002666 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800265e:	4a74      	ldr	r2, [pc, #464]	@ (8002830 <HAL_FDCAN_Init+0x2b0>)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	7c1b      	ldrb	r3, [r3, #16]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d108      	bne.n	8002680 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	699a      	ldr	r2, [r3, #24]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800267c:	619a      	str	r2, [r3, #24]
 800267e:	e007      	b.n	8002690 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	699a      	ldr	r2, [r3, #24]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800268e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	7c5b      	ldrb	r3, [r3, #17]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d108      	bne.n	80026aa <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	699a      	ldr	r2, [r3, #24]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80026a6:	619a      	str	r2, [r3, #24]
 80026a8:	e007      	b.n	80026ba <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	699a      	ldr	r2, [r3, #24]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80026b8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	7c9b      	ldrb	r3, [r3, #18]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d108      	bne.n	80026d4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	699a      	ldr	r2, [r3, #24]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80026d0:	619a      	str	r2, [r3, #24]
 80026d2:	e007      	b.n	80026e4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	699a      	ldr	r2, [r3, #24]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80026e2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	699a      	ldr	r2, [r3, #24]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8002708:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	691a      	ldr	r2, [r3, #16]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 0210 	bic.w	r2, r2, #16
 8002718:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d108      	bne.n	8002734 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	699a      	ldr	r2, [r3, #24]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f042 0204 	orr.w	r2, r2, #4
 8002730:	619a      	str	r2, [r3, #24]
 8002732:	e02c      	b.n	800278e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d028      	beq.n	800278e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	2b02      	cmp	r3, #2
 8002742:	d01c      	beq.n	800277e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	699a      	ldr	r2, [r3, #24]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002752:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	691a      	ldr	r2, [r3, #16]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f042 0210 	orr.w	r2, r2, #16
 8002762:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	2b03      	cmp	r3, #3
 800276a:	d110      	bne.n	800278e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	699a      	ldr	r2, [r3, #24]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 0220 	orr.w	r2, r2, #32
 800277a:	619a      	str	r2, [r3, #24]
 800277c:	e007      	b.n	800278e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	699a      	ldr	r2, [r3, #24]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f042 0220 	orr.w	r2, r2, #32
 800278c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	3b01      	subs	r3, #1
 8002794:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	3b01      	subs	r3, #1
 800279c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800279e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80027a6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80027b6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80027b8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80027c2:	d115      	bne.n	80027f0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ce:	3b01      	subs	r3, #1
 80027d0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80027d2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d8:	3b01      	subs	r3, #1
 80027da:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80027dc:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e4:	3b01      	subs	r3, #1
 80027e6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80027ec:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80027ee:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 fbb8 	bl	8002f7c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40006400 	.word	0x40006400
 8002830:	40006500 	.word	0x40006500

08002834 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b01      	cmp	r3, #1
 8002846:	d110      	bne.n	800286a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2202      	movs	r2, #2
 800284c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	699a      	ldr	r2, [r3, #24]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0201 	bic.w	r2, r2, #1
 800285e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8002866:	2300      	movs	r3, #0
 8002868:	e006      	b.n	8002878 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800286e:	f043 0204 	orr.w	r2, r3, #4
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
  }
}
 8002878:	4618      	mov	r0, r3
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8002884:	b480      	push	{r7}
 8002886:	b08b      	sub	sp, #44	@ 0x2c
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
 8002890:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8002892:	2300      	movs	r3, #0
 8002894:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800289c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800289e:	7efb      	ldrb	r3, [r7, #27]
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	f040 80e8 	bne.w	8002a76 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	2b40      	cmp	r3, #64	@ 0x40
 80028aa:	d137      	bne.n	800291c <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028b4:	f003 030f 	and.w	r3, r3, #15
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d107      	bne.n	80028cc <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028c0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e0db      	b.n	8002a84 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028d4:	0e1b      	lsrs	r3, r3, #24
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d10a      	bne.n	80028f4 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028e6:	0a5b      	lsrs	r3, r3, #9
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d101      	bne.n	80028f4 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80028f0:	2301      	movs	r3, #1
 80028f2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028fc:	0a1b      	lsrs	r3, r3, #8
 80028fe:	f003 0303 	and.w	r3, r3, #3
 8002902:	69fa      	ldr	r2, [r7, #28]
 8002904:	4413      	add	r3, r2
 8002906:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800290c:	69fa      	ldr	r2, [r7, #28]
 800290e:	4613      	mov	r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	4413      	add	r3, r2
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	440b      	add	r3, r1
 8002918:	627b      	str	r3, [r7, #36]	@ 0x24
 800291a:	e036      	b.n	800298a <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002924:	f003 030f 	and.w	r3, r3, #15
 8002928:	2b00      	cmp	r3, #0
 800292a:	d107      	bne.n	800293c <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002930:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e0a3      	b.n	8002a84 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002944:	0e1b      	lsrs	r3, r3, #24
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b01      	cmp	r3, #1
 800294c:	d10a      	bne.n	8002964 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002956:	0a1b      	lsrs	r3, r3, #8
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b01      	cmp	r3, #1
 800295e:	d101      	bne.n	8002964 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002960:	2301      	movs	r3, #1
 8002962:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800296c:	0a1b      	lsrs	r3, r3, #8
 800296e:	f003 0303 	and.w	r3, r3, #3
 8002972:	69fa      	ldr	r2, [r7, #28]
 8002974:	4413      	add	r3, r2
 8002976:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800297c:	69fa      	ldr	r2, [r7, #28]
 800297e:	4613      	mov	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	4413      	add	r3, r2
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	440b      	add	r3, r1
 8002988:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800298a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d107      	bne.n	80029ae <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800299e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	0c9b      	lsrs	r3, r3, #18
 80029a4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	e005      	b.n	80029ba <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80029ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80029ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80029c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80029d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d4:	3304      	adds	r3, #4
 80029d6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80029d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	b29a      	uxth	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80029e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	0c1b      	lsrs	r3, r3, #16
 80029e8:	f003 020f 	and.w	r2, r3, #15
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80029f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80029fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8002a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	0e1b      	lsrs	r3, r3, #24
 8002a0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8002a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	0fda      	lsrs	r2, r3, #31
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8002a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a22:	3304      	adds	r3, #4
 8002a24:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8002a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a28:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	623b      	str	r3, [r7, #32]
 8002a2e:	e00a      	b.n	8002a46 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	6a3b      	ldr	r3, [r7, #32]
 8002a34:	441a      	add	r2, r3
 8002a36:	6839      	ldr	r1, [r7, #0]
 8002a38:	6a3b      	ldr	r3, [r7, #32]
 8002a3a:	440b      	add	r3, r1
 8002a3c:	7812      	ldrb	r2, [r2, #0]
 8002a3e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8002a40:	6a3b      	ldr	r3, [r7, #32]
 8002a42:	3301      	adds	r3, #1
 8002a44:	623b      	str	r3, [r7, #32]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	4a11      	ldr	r2, [pc, #68]	@ (8002a90 <HAL_FDCAN_GetRxMessage+0x20c>)
 8002a4c:	5cd3      	ldrb	r3, [r2, r3]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	6a3b      	ldr	r3, [r7, #32]
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d3ec      	bcc.n	8002a30 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2b40      	cmp	r3, #64	@ 0x40
 8002a5a:	d105      	bne.n	8002a68 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	69fa      	ldr	r2, [r7, #28]
 8002a62:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8002a66:	e004      	b.n	8002a72 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	69fa      	ldr	r2, [r7, #28]
 8002a6e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8002a72:	2300      	movs	r3, #0
 8002a74:	e006      	b.n	8002a84 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a7a:	f043 0208 	orr.w	r2, r3, #8
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
  }
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	372c      	adds	r7, #44	@ 0x2c
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	0800a438 	.word	0x0800a438

08002a94 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b087      	sub	sp, #28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002aa6:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002aa8:	7dfb      	ldrb	r3, [r7, #23]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d003      	beq.n	8002ab6 <HAL_FDCAN_ActivateNotification+0x22>
 8002aae:	7dfb      	ldrb	r3, [r7, #23]
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	f040 80c8 	bne.w	8002c46 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002abc:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d004      	beq.n	8002ad2 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d03b      	beq.n	8002b4a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d004      	beq.n	8002ae6 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d031      	beq.n	8002b4a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d004      	beq.n	8002afa <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	f003 0304 	and.w	r3, r3, #4
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d027      	beq.n	8002b4a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d004      	beq.n	8002b0e <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d01d      	beq.n	8002b4a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d004      	beq.n	8002b22 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	f003 0310 	and.w	r3, r3, #16
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d013      	beq.n	8002b4a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d004      	beq.n	8002b36 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	f003 0320 	and.w	r3, r3, #32
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d009      	beq.n	8002b4a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00c      	beq.n	8002b5a <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d107      	bne.n	8002b5a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f042 0201 	orr.w	r2, r2, #1
 8002b58:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d004      	beq.n	8002b6e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d13b      	bne.n	8002be6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d004      	beq.n	8002b82 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d131      	bne.n	8002be6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d004      	beq.n	8002b96 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	f003 0304 	and.w	r3, r3, #4
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d127      	bne.n	8002be6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d004      	beq.n	8002baa <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	f003 0308 	and.w	r3, r3, #8
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d11d      	bne.n	8002be6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d004      	beq.n	8002bbe <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	f003 0310 	and.w	r3, r3, #16
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d113      	bne.n	8002be6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d004      	beq.n	8002bd2 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	f003 0320 	and.w	r3, r3, #32
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d109      	bne.n	8002be6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00c      	beq.n	8002bf6 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d007      	beq.n	8002bf6 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f042 0202 	orr.w	r2, r2, #2
 8002bf4:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d009      	beq.n	8002c14 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d009      	beq.n	8002c32 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8002c42:	2300      	movs	r3, #0
 8002c44:	e006      	b.n	8002c54 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c4a:	f043 0202 	orr.w	r2, r3, #2
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
  }
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	371c      	adds	r7, #28
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b08c      	sub	sp, #48	@ 0x30
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c6e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8002c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c94:	4013      	ands	r3, r2
 8002c96:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ca2:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002caa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cac:	4013      	ands	r3, r2
 8002cae:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cb6:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8002cba:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc2:	6a3a      	ldr	r2, [r7, #32]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cce:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002cd2:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cda:	69fa      	ldr	r2, [r7, #28]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ce6:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cee:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00b      	beq.n	8002d12 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d006      	beq.n	8002d12 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2240      	movs	r2, #64	@ 0x40
 8002d0a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f916 	bl	8002f3e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d019      	beq.n	8002d50 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d014      	beq.n	8002d50 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002d2e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d46:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002d48:	6939      	ldr	r1, [r7, #16]
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f8d8 	bl	8002f00 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d007      	beq.n	8002d66 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d5c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002d5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 f8a2 	bl	8002eaa <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8002d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d007      	beq.n	8002d7c <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d72:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002d74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7fe f830 	bl	8000ddc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d007      	beq.n	8002d92 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d88:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002d8a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 f897 	bl	8002ec0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00c      	beq.n	8002db6 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d007      	beq.n	8002db6 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dae:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 f890 	bl	8002ed6 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d018      	beq.n	8002df2 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d013      	beq.n	8002df2 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002dd2:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	4013      	ands	r3, r2
 8002de0:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2280      	movs	r2, #128	@ 0x80
 8002de8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002dea:	68f9      	ldr	r1, [r7, #12]
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 f87c 	bl	8002eea <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00c      	beq.n	8002e16 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d007      	beq.n	8002e16 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e0e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 f880 	bl	8002f16 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00c      	beq.n	8002e3a <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d007      	beq.n	8002e3a <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002e32:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 f878 	bl	8002f2a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00f      	beq.n	8002e64 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00a      	beq.n	8002e64 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002e56:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e5c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d007      	beq.n	8002e7a <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	69fa      	ldr	r2, [r7, #28]
 8002e70:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002e72:	69f9      	ldr	r1, [r7, #28]
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 f876 	bl	8002f66 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d009      	beq.n	8002e94 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6a3a      	ldr	r2, [r7, #32]
 8002e86:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d002      	beq.n	8002ea2 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 f858 	bl	8002f52 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002ea2:	bf00      	nop
 8002ea4:	3730      	adds	r7, #48	@ 0x30
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
 8002eb2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8002eca:	bf00      	nop
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b083      	sub	sp, #12
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b083      	sub	sp, #12
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
 8002ef2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
 8002f6e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002f84:	4b27      	ldr	r3, [pc, #156]	@ (8003024 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8002f86:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f96:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f9e:	041a      	lsls	r2, r3, #16
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fbc:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fc4:	061a      	lsls	r2, r3, #24
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	60fb      	str	r3, [r7, #12]
 8002ffc:	e005      	b.n	800300a <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	3304      	adds	r3, #4
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	429a      	cmp	r2, r3
 8003014:	d3f3      	bcc.n	8002ffe <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8003016:	bf00      	nop
 8003018:	bf00      	nop
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	4000a400 	.word	0x4000a400

08003028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003028:	b480      	push	{r7}
 800302a:	b087      	sub	sp, #28
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003032:	2300      	movs	r3, #0
 8003034:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003036:	e15a      	b.n	80032ee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	2101      	movs	r1, #1
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	fa01 f303 	lsl.w	r3, r1, r3
 8003044:	4013      	ands	r3, r2
 8003046:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2b00      	cmp	r3, #0
 800304c:	f000 814c 	beq.w	80032e8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f003 0303 	and.w	r3, r3, #3
 8003058:	2b01      	cmp	r3, #1
 800305a:	d005      	beq.n	8003068 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003064:	2b02      	cmp	r3, #2
 8003066:	d130      	bne.n	80030ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	2203      	movs	r2, #3
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	43db      	mvns	r3, r3
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	4013      	ands	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	68da      	ldr	r2, [r3, #12]
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	4313      	orrs	r3, r2
 8003090:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800309e:	2201      	movs	r2, #1
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	43db      	mvns	r3, r3
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	4013      	ands	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	091b      	lsrs	r3, r3, #4
 80030b4:	f003 0201 	and.w	r2, r3, #1
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	2b03      	cmp	r3, #3
 80030d4:	d017      	beq.n	8003106 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	2203      	movs	r2, #3
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	43db      	mvns	r3, r3
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	4013      	ands	r3, r2
 80030ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	689a      	ldr	r2, [r3, #8]
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d123      	bne.n	800315a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	08da      	lsrs	r2, r3, #3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	3208      	adds	r2, #8
 800311a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800311e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	220f      	movs	r2, #15
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	43db      	mvns	r3, r3
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	4013      	ands	r3, r2
 8003134:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	691a      	ldr	r2, [r3, #16]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	4313      	orrs	r3, r2
 800314a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	08da      	lsrs	r2, r3, #3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3208      	adds	r2, #8
 8003154:	6939      	ldr	r1, [r7, #16]
 8003156:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	2203      	movs	r2, #3
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	43db      	mvns	r3, r3
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	4013      	ands	r3, r2
 8003170:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f003 0203 	and.w	r2, r3, #3
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	4313      	orrs	r3, r2
 8003186:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003196:	2b00      	cmp	r3, #0
 8003198:	f000 80a6 	beq.w	80032e8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800319c:	4b5b      	ldr	r3, [pc, #364]	@ (800330c <HAL_GPIO_Init+0x2e4>)
 800319e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031a0:	4a5a      	ldr	r2, [pc, #360]	@ (800330c <HAL_GPIO_Init+0x2e4>)
 80031a2:	f043 0301 	orr.w	r3, r3, #1
 80031a6:	6613      	str	r3, [r2, #96]	@ 0x60
 80031a8:	4b58      	ldr	r3, [pc, #352]	@ (800330c <HAL_GPIO_Init+0x2e4>)
 80031aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	60bb      	str	r3, [r7, #8]
 80031b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031b4:	4a56      	ldr	r2, [pc, #344]	@ (8003310 <HAL_GPIO_Init+0x2e8>)
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	089b      	lsrs	r3, r3, #2
 80031ba:	3302      	adds	r3, #2
 80031bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f003 0303 	and.w	r3, r3, #3
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	220f      	movs	r2, #15
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	43db      	mvns	r3, r3
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	4013      	ands	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80031de:	d01f      	beq.n	8003220 <HAL_GPIO_Init+0x1f8>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a4c      	ldr	r2, [pc, #304]	@ (8003314 <HAL_GPIO_Init+0x2ec>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d019      	beq.n	800321c <HAL_GPIO_Init+0x1f4>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a4b      	ldr	r2, [pc, #300]	@ (8003318 <HAL_GPIO_Init+0x2f0>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d013      	beq.n	8003218 <HAL_GPIO_Init+0x1f0>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a4a      	ldr	r2, [pc, #296]	@ (800331c <HAL_GPIO_Init+0x2f4>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d00d      	beq.n	8003214 <HAL_GPIO_Init+0x1ec>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a49      	ldr	r2, [pc, #292]	@ (8003320 <HAL_GPIO_Init+0x2f8>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d007      	beq.n	8003210 <HAL_GPIO_Init+0x1e8>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a48      	ldr	r2, [pc, #288]	@ (8003324 <HAL_GPIO_Init+0x2fc>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d101      	bne.n	800320c <HAL_GPIO_Init+0x1e4>
 8003208:	2305      	movs	r3, #5
 800320a:	e00a      	b.n	8003222 <HAL_GPIO_Init+0x1fa>
 800320c:	2306      	movs	r3, #6
 800320e:	e008      	b.n	8003222 <HAL_GPIO_Init+0x1fa>
 8003210:	2304      	movs	r3, #4
 8003212:	e006      	b.n	8003222 <HAL_GPIO_Init+0x1fa>
 8003214:	2303      	movs	r3, #3
 8003216:	e004      	b.n	8003222 <HAL_GPIO_Init+0x1fa>
 8003218:	2302      	movs	r3, #2
 800321a:	e002      	b.n	8003222 <HAL_GPIO_Init+0x1fa>
 800321c:	2301      	movs	r3, #1
 800321e:	e000      	b.n	8003222 <HAL_GPIO_Init+0x1fa>
 8003220:	2300      	movs	r3, #0
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	f002 0203 	and.w	r2, r2, #3
 8003228:	0092      	lsls	r2, r2, #2
 800322a:	4093      	lsls	r3, r2
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	4313      	orrs	r3, r2
 8003230:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003232:	4937      	ldr	r1, [pc, #220]	@ (8003310 <HAL_GPIO_Init+0x2e8>)
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	089b      	lsrs	r3, r3, #2
 8003238:	3302      	adds	r3, #2
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003240:	4b39      	ldr	r3, [pc, #228]	@ (8003328 <HAL_GPIO_Init+0x300>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	43db      	mvns	r3, r3
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	4013      	ands	r3, r2
 800324e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	4313      	orrs	r3, r2
 8003262:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003264:	4a30      	ldr	r2, [pc, #192]	@ (8003328 <HAL_GPIO_Init+0x300>)
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800326a:	4b2f      	ldr	r3, [pc, #188]	@ (8003328 <HAL_GPIO_Init+0x300>)
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	43db      	mvns	r3, r3
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	4013      	ands	r3, r2
 8003278:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4313      	orrs	r3, r2
 800328c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800328e:	4a26      	ldr	r2, [pc, #152]	@ (8003328 <HAL_GPIO_Init+0x300>)
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003294:	4b24      	ldr	r3, [pc, #144]	@ (8003328 <HAL_GPIO_Init+0x300>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	43db      	mvns	r3, r3
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	4013      	ands	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032b8:	4a1b      	ldr	r2, [pc, #108]	@ (8003328 <HAL_GPIO_Init+0x300>)
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80032be:	4b1a      	ldr	r3, [pc, #104]	@ (8003328 <HAL_GPIO_Init+0x300>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	43db      	mvns	r3, r3
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	4013      	ands	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4313      	orrs	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032e2:	4a11      	ldr	r2, [pc, #68]	@ (8003328 <HAL_GPIO_Init+0x300>)
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	3301      	adds	r3, #1
 80032ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	fa22 f303 	lsr.w	r3, r2, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f47f ae9d 	bne.w	8003038 <HAL_GPIO_Init+0x10>
  }
}
 80032fe:	bf00      	nop
 8003300:	bf00      	nop
 8003302:	371c      	adds	r7, #28
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	40021000 	.word	0x40021000
 8003310:	40010000 	.word	0x40010000
 8003314:	48000400 	.word	0x48000400
 8003318:	48000800 	.word	0x48000800
 800331c:	48000c00 	.word	0x48000c00
 8003320:	48001000 	.word	0x48001000
 8003324:	48001400 	.word	0x48001400
 8003328:	40010400 	.word	0x40010400

0800332c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	460b      	mov	r3, r1
 8003336:	807b      	strh	r3, [r7, #2]
 8003338:	4613      	mov	r3, r2
 800333a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800333c:	787b      	ldrb	r3, [r7, #1]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d003      	beq.n	800334a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003342:	887a      	ldrh	r2, [r7, #2]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003348:	e002      	b.n	8003350 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800334a:	887a      	ldrh	r2, [r7, #2]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d141      	bne.n	80033ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800336a:	4b4b      	ldr	r3, [pc, #300]	@ (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003372:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003376:	d131      	bne.n	80033dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003378:	4b47      	ldr	r3, [pc, #284]	@ (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800337a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800337e:	4a46      	ldr	r2, [pc, #280]	@ (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003380:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003384:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003388:	4b43      	ldr	r3, [pc, #268]	@ (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003390:	4a41      	ldr	r2, [pc, #260]	@ (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003392:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003396:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003398:	4b40      	ldr	r3, [pc, #256]	@ (800349c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2232      	movs	r2, #50	@ 0x32
 800339e:	fb02 f303 	mul.w	r3, r2, r3
 80033a2:	4a3f      	ldr	r2, [pc, #252]	@ (80034a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80033a4:	fba2 2303 	umull	r2, r3, r2, r3
 80033a8:	0c9b      	lsrs	r3, r3, #18
 80033aa:	3301      	adds	r3, #1
 80033ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033ae:	e002      	b.n	80033b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	3b01      	subs	r3, #1
 80033b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033b6:	4b38      	ldr	r3, [pc, #224]	@ (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033c2:	d102      	bne.n	80033ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1f2      	bne.n	80033b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033ca:	4b33      	ldr	r3, [pc, #204]	@ (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033d6:	d158      	bne.n	800348a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e057      	b.n	800348c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033dc:	4b2e      	ldr	r3, [pc, #184]	@ (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033e2:	4a2d      	ldr	r2, [pc, #180]	@ (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80033ec:	e04d      	b.n	800348a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033f4:	d141      	bne.n	800347a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80033f6:	4b28      	ldr	r3, [pc, #160]	@ (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80033fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003402:	d131      	bne.n	8003468 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003404:	4b24      	ldr	r3, [pc, #144]	@ (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003406:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800340a:	4a23      	ldr	r2, [pc, #140]	@ (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800340c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003410:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003414:	4b20      	ldr	r3, [pc, #128]	@ (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800341c:	4a1e      	ldr	r2, [pc, #120]	@ (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800341e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003422:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003424:	4b1d      	ldr	r3, [pc, #116]	@ (800349c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2232      	movs	r2, #50	@ 0x32
 800342a:	fb02 f303 	mul.w	r3, r2, r3
 800342e:	4a1c      	ldr	r2, [pc, #112]	@ (80034a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003430:	fba2 2303 	umull	r2, r3, r2, r3
 8003434:	0c9b      	lsrs	r3, r3, #18
 8003436:	3301      	adds	r3, #1
 8003438:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800343a:	e002      	b.n	8003442 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	3b01      	subs	r3, #1
 8003440:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003442:	4b15      	ldr	r3, [pc, #84]	@ (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800344a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800344e:	d102      	bne.n	8003456 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f2      	bne.n	800343c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003456:	4b10      	ldr	r3, [pc, #64]	@ (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800345e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003462:	d112      	bne.n	800348a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e011      	b.n	800348c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003468:	4b0b      	ldr	r3, [pc, #44]	@ (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800346a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800346e:	4a0a      	ldr	r2, [pc, #40]	@ (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003470:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003474:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003478:	e007      	b.n	800348a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800347a:	4b07      	ldr	r3, [pc, #28]	@ (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003482:	4a05      	ldr	r2, [pc, #20]	@ (8003498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003484:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003488:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	40007000 	.word	0x40007000
 800349c:	20000000 	.word	0x20000000
 80034a0:	431bde83 	.word	0x431bde83

080034a4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80034a8:	4b05      	ldr	r3, [pc, #20]	@ (80034c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	4a04      	ldr	r2, [pc, #16]	@ (80034c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80034ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034b2:	6093      	str	r3, [r2, #8]
}
 80034b4:	bf00      	nop
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	40007000 	.word	0x40007000

080034c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b088      	sub	sp, #32
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e2fe      	b.n	8003ad4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d075      	beq.n	80035ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034e2:	4b97      	ldr	r3, [pc, #604]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 030c 	and.w	r3, r3, #12
 80034ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034ec:	4b94      	ldr	r3, [pc, #592]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	f003 0303 	and.w	r3, r3, #3
 80034f4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	2b0c      	cmp	r3, #12
 80034fa:	d102      	bne.n	8003502 <HAL_RCC_OscConfig+0x3e>
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	2b03      	cmp	r3, #3
 8003500:	d002      	beq.n	8003508 <HAL_RCC_OscConfig+0x44>
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	2b08      	cmp	r3, #8
 8003506:	d10b      	bne.n	8003520 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003508:	4b8d      	ldr	r3, [pc, #564]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d05b      	beq.n	80035cc <HAL_RCC_OscConfig+0x108>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d157      	bne.n	80035cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e2d9      	b.n	8003ad4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003528:	d106      	bne.n	8003538 <HAL_RCC_OscConfig+0x74>
 800352a:	4b85      	ldr	r3, [pc, #532]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a84      	ldr	r2, [pc, #528]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 8003530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003534:	6013      	str	r3, [r2, #0]
 8003536:	e01d      	b.n	8003574 <HAL_RCC_OscConfig+0xb0>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003540:	d10c      	bne.n	800355c <HAL_RCC_OscConfig+0x98>
 8003542:	4b7f      	ldr	r3, [pc, #508]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a7e      	ldr	r2, [pc, #504]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 8003548:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	4b7c      	ldr	r3, [pc, #496]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a7b      	ldr	r2, [pc, #492]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 8003554:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	e00b      	b.n	8003574 <HAL_RCC_OscConfig+0xb0>
 800355c:	4b78      	ldr	r3, [pc, #480]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a77      	ldr	r2, [pc, #476]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 8003562:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003566:	6013      	str	r3, [r2, #0]
 8003568:	4b75      	ldr	r3, [pc, #468]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a74      	ldr	r2, [pc, #464]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 800356e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003572:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d013      	beq.n	80035a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357c:	f7fe fc0a 	bl	8001d94 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003584:	f7fe fc06 	bl	8001d94 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b64      	cmp	r3, #100	@ 0x64
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e29e      	b.n	8003ad4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003596:	4b6a      	ldr	r3, [pc, #424]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d0f0      	beq.n	8003584 <HAL_RCC_OscConfig+0xc0>
 80035a2:	e014      	b.n	80035ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a4:	f7fe fbf6 	bl	8001d94 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035ac:	f7fe fbf2 	bl	8001d94 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b64      	cmp	r3, #100	@ 0x64
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e28a      	b.n	8003ad4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035be:	4b60      	ldr	r3, [pc, #384]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1f0      	bne.n	80035ac <HAL_RCC_OscConfig+0xe8>
 80035ca:	e000      	b.n	80035ce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d075      	beq.n	80036c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035da:	4b59      	ldr	r3, [pc, #356]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 030c 	and.w	r3, r3, #12
 80035e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035e4:	4b56      	ldr	r3, [pc, #344]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f003 0303 	and.w	r3, r3, #3
 80035ec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	2b0c      	cmp	r3, #12
 80035f2:	d102      	bne.n	80035fa <HAL_RCC_OscConfig+0x136>
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d002      	beq.n	8003600 <HAL_RCC_OscConfig+0x13c>
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d11f      	bne.n	8003640 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003600:	4b4f      	ldr	r3, [pc, #316]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <HAL_RCC_OscConfig+0x154>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d101      	bne.n	8003618 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e25d      	b.n	8003ad4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003618:	4b49      	ldr	r3, [pc, #292]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	061b      	lsls	r3, r3, #24
 8003626:	4946      	ldr	r1, [pc, #280]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 8003628:	4313      	orrs	r3, r2
 800362a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800362c:	4b45      	ldr	r3, [pc, #276]	@ (8003744 <HAL_RCC_OscConfig+0x280>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f7fe fb63 	bl	8001cfc <HAL_InitTick>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d043      	beq.n	80036c4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e249      	b.n	8003ad4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d023      	beq.n	8003690 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003648:	4b3d      	ldr	r3, [pc, #244]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a3c      	ldr	r2, [pc, #240]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 800364e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003652:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003654:	f7fe fb9e 	bl	8001d94 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800365c:	f7fe fb9a 	bl	8001d94 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e232      	b.n	8003ad4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800366e:	4b34      	ldr	r3, [pc, #208]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0f0      	beq.n	800365c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800367a:	4b31      	ldr	r3, [pc, #196]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	061b      	lsls	r3, r3, #24
 8003688:	492d      	ldr	r1, [pc, #180]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 800368a:	4313      	orrs	r3, r2
 800368c:	604b      	str	r3, [r1, #4]
 800368e:	e01a      	b.n	80036c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003690:	4b2b      	ldr	r3, [pc, #172]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a2a      	ldr	r2, [pc, #168]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 8003696:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800369a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369c:	f7fe fb7a 	bl	8001d94 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036a4:	f7fe fb76 	bl	8001d94 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e20e      	b.n	8003ad4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036b6:	4b22      	ldr	r3, [pc, #136]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1f0      	bne.n	80036a4 <HAL_RCC_OscConfig+0x1e0>
 80036c2:	e000      	b.n	80036c6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d041      	beq.n	8003756 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d01c      	beq.n	8003714 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036da:	4b19      	ldr	r3, [pc, #100]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 80036dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036e0:	4a17      	ldr	r2, [pc, #92]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 80036e2:	f043 0301 	orr.w	r3, r3, #1
 80036e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ea:	f7fe fb53 	bl	8001d94 <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036f0:	e008      	b.n	8003704 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036f2:	f7fe fb4f 	bl	8001d94 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e1e7      	b.n	8003ad4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003704:	4b0e      	ldr	r3, [pc, #56]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 8003706:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0ef      	beq.n	80036f2 <HAL_RCC_OscConfig+0x22e>
 8003712:	e020      	b.n	8003756 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003714:	4b0a      	ldr	r3, [pc, #40]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 8003716:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800371a:	4a09      	ldr	r2, [pc, #36]	@ (8003740 <HAL_RCC_OscConfig+0x27c>)
 800371c:	f023 0301 	bic.w	r3, r3, #1
 8003720:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003724:	f7fe fb36 	bl	8001d94 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800372a:	e00d      	b.n	8003748 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800372c:	f7fe fb32 	bl	8001d94 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d906      	bls.n	8003748 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e1ca      	b.n	8003ad4 <HAL_RCC_OscConfig+0x610>
 800373e:	bf00      	nop
 8003740:	40021000 	.word	0x40021000
 8003744:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003748:	4b8c      	ldr	r3, [pc, #560]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 800374a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1ea      	bne.n	800372c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0304 	and.w	r3, r3, #4
 800375e:	2b00      	cmp	r3, #0
 8003760:	f000 80a6 	beq.w	80038b0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003764:	2300      	movs	r3, #0
 8003766:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003768:	4b84      	ldr	r3, [pc, #528]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 800376a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800376c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_RCC_OscConfig+0x2b4>
 8003774:	2301      	movs	r3, #1
 8003776:	e000      	b.n	800377a <HAL_RCC_OscConfig+0x2b6>
 8003778:	2300      	movs	r3, #0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00d      	beq.n	800379a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800377e:	4b7f      	ldr	r3, [pc, #508]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 8003780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003782:	4a7e      	ldr	r2, [pc, #504]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 8003784:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003788:	6593      	str	r3, [r2, #88]	@ 0x58
 800378a:	4b7c      	ldr	r3, [pc, #496]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 800378c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800378e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003796:	2301      	movs	r3, #1
 8003798:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800379a:	4b79      	ldr	r3, [pc, #484]	@ (8003980 <HAL_RCC_OscConfig+0x4bc>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d118      	bne.n	80037d8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037a6:	4b76      	ldr	r3, [pc, #472]	@ (8003980 <HAL_RCC_OscConfig+0x4bc>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a75      	ldr	r2, [pc, #468]	@ (8003980 <HAL_RCC_OscConfig+0x4bc>)
 80037ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037b2:	f7fe faef 	bl	8001d94 <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037b8:	e008      	b.n	80037cc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ba:	f7fe faeb 	bl	8001d94 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e183      	b.n	8003ad4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037cc:	4b6c      	ldr	r3, [pc, #432]	@ (8003980 <HAL_RCC_OscConfig+0x4bc>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d0f0      	beq.n	80037ba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d108      	bne.n	80037f2 <HAL_RCC_OscConfig+0x32e>
 80037e0:	4b66      	ldr	r3, [pc, #408]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 80037e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e6:	4a65      	ldr	r2, [pc, #404]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 80037e8:	f043 0301 	orr.w	r3, r3, #1
 80037ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037f0:	e024      	b.n	800383c <HAL_RCC_OscConfig+0x378>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	2b05      	cmp	r3, #5
 80037f8:	d110      	bne.n	800381c <HAL_RCC_OscConfig+0x358>
 80037fa:	4b60      	ldr	r3, [pc, #384]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 80037fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003800:	4a5e      	ldr	r2, [pc, #376]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 8003802:	f043 0304 	orr.w	r3, r3, #4
 8003806:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800380a:	4b5c      	ldr	r3, [pc, #368]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 800380c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003810:	4a5a      	ldr	r2, [pc, #360]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 8003812:	f043 0301 	orr.w	r3, r3, #1
 8003816:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800381a:	e00f      	b.n	800383c <HAL_RCC_OscConfig+0x378>
 800381c:	4b57      	ldr	r3, [pc, #348]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 800381e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003822:	4a56      	ldr	r2, [pc, #344]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 8003824:	f023 0301 	bic.w	r3, r3, #1
 8003828:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800382c:	4b53      	ldr	r3, [pc, #332]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 800382e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003832:	4a52      	ldr	r2, [pc, #328]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 8003834:	f023 0304 	bic.w	r3, r3, #4
 8003838:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d016      	beq.n	8003872 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003844:	f7fe faa6 	bl	8001d94 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800384a:	e00a      	b.n	8003862 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800384c:	f7fe faa2 	bl	8001d94 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	f241 3288 	movw	r2, #5000	@ 0x1388
 800385a:	4293      	cmp	r3, r2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e138      	b.n	8003ad4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003862:	4b46      	ldr	r3, [pc, #280]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 8003864:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d0ed      	beq.n	800384c <HAL_RCC_OscConfig+0x388>
 8003870:	e015      	b.n	800389e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003872:	f7fe fa8f 	bl	8001d94 <HAL_GetTick>
 8003876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003878:	e00a      	b.n	8003890 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800387a:	f7fe fa8b 	bl	8001d94 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003888:	4293      	cmp	r3, r2
 800388a:	d901      	bls.n	8003890 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e121      	b.n	8003ad4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003890:	4b3a      	ldr	r3, [pc, #232]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 8003892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1ed      	bne.n	800387a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800389e:	7ffb      	ldrb	r3, [r7, #31]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d105      	bne.n	80038b0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a4:	4b35      	ldr	r3, [pc, #212]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 80038a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a8:	4a34      	ldr	r2, [pc, #208]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 80038aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038ae:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0320 	and.w	r3, r3, #32
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d03c      	beq.n	8003936 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d01c      	beq.n	80038fe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80038c4:	4b2d      	ldr	r3, [pc, #180]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 80038c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038ca:	4a2c      	ldr	r2, [pc, #176]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 80038cc:	f043 0301 	orr.w	r3, r3, #1
 80038d0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d4:	f7fe fa5e 	bl	8001d94 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038dc:	f7fe fa5a 	bl	8001d94 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e0f2      	b.n	8003ad4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038ee:	4b23      	ldr	r3, [pc, #140]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 80038f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0ef      	beq.n	80038dc <HAL_RCC_OscConfig+0x418>
 80038fc:	e01b      	b.n	8003936 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80038fe:	4b1f      	ldr	r3, [pc, #124]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 8003900:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003904:	4a1d      	ldr	r2, [pc, #116]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 8003906:	f023 0301 	bic.w	r3, r3, #1
 800390a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800390e:	f7fe fa41 	bl	8001d94 <HAL_GetTick>
 8003912:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003914:	e008      	b.n	8003928 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003916:	f7fe fa3d 	bl	8001d94 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d901      	bls.n	8003928 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e0d5      	b.n	8003ad4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003928:	4b14      	ldr	r3, [pc, #80]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 800392a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1ef      	bne.n	8003916 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 80c9 	beq.w	8003ad2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003940:	4b0e      	ldr	r3, [pc, #56]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f003 030c 	and.w	r3, r3, #12
 8003948:	2b0c      	cmp	r3, #12
 800394a:	f000 8083 	beq.w	8003a54 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	2b02      	cmp	r3, #2
 8003954:	d15e      	bne.n	8003a14 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003956:	4b09      	ldr	r3, [pc, #36]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a08      	ldr	r2, [pc, #32]	@ (800397c <HAL_RCC_OscConfig+0x4b8>)
 800395c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003960:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003962:	f7fe fa17 	bl	8001d94 <HAL_GetTick>
 8003966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003968:	e00c      	b.n	8003984 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800396a:	f7fe fa13 	bl	8001d94 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d905      	bls.n	8003984 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e0ab      	b.n	8003ad4 <HAL_RCC_OscConfig+0x610>
 800397c:	40021000 	.word	0x40021000
 8003980:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003984:	4b55      	ldr	r3, [pc, #340]	@ (8003adc <HAL_RCC_OscConfig+0x618>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1ec      	bne.n	800396a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003990:	4b52      	ldr	r3, [pc, #328]	@ (8003adc <HAL_RCC_OscConfig+0x618>)
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	4b52      	ldr	r3, [pc, #328]	@ (8003ae0 <HAL_RCC_OscConfig+0x61c>)
 8003996:	4013      	ands	r3, r2
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	6a11      	ldr	r1, [r2, #32]
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80039a0:	3a01      	subs	r2, #1
 80039a2:	0112      	lsls	r2, r2, #4
 80039a4:	4311      	orrs	r1, r2
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80039aa:	0212      	lsls	r2, r2, #8
 80039ac:	4311      	orrs	r1, r2
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80039b2:	0852      	lsrs	r2, r2, #1
 80039b4:	3a01      	subs	r2, #1
 80039b6:	0552      	lsls	r2, r2, #21
 80039b8:	4311      	orrs	r1, r2
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80039be:	0852      	lsrs	r2, r2, #1
 80039c0:	3a01      	subs	r2, #1
 80039c2:	0652      	lsls	r2, r2, #25
 80039c4:	4311      	orrs	r1, r2
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80039ca:	06d2      	lsls	r2, r2, #27
 80039cc:	430a      	orrs	r2, r1
 80039ce:	4943      	ldr	r1, [pc, #268]	@ (8003adc <HAL_RCC_OscConfig+0x618>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039d4:	4b41      	ldr	r3, [pc, #260]	@ (8003adc <HAL_RCC_OscConfig+0x618>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a40      	ldr	r2, [pc, #256]	@ (8003adc <HAL_RCC_OscConfig+0x618>)
 80039da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039de:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039e0:	4b3e      	ldr	r3, [pc, #248]	@ (8003adc <HAL_RCC_OscConfig+0x618>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	4a3d      	ldr	r2, [pc, #244]	@ (8003adc <HAL_RCC_OscConfig+0x618>)
 80039e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ec:	f7fe f9d2 	bl	8001d94 <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f4:	f7fe f9ce 	bl	8001d94 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e066      	b.n	8003ad4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a06:	4b35      	ldr	r3, [pc, #212]	@ (8003adc <HAL_RCC_OscConfig+0x618>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d0f0      	beq.n	80039f4 <HAL_RCC_OscConfig+0x530>
 8003a12:	e05e      	b.n	8003ad2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a14:	4b31      	ldr	r3, [pc, #196]	@ (8003adc <HAL_RCC_OscConfig+0x618>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a30      	ldr	r2, [pc, #192]	@ (8003adc <HAL_RCC_OscConfig+0x618>)
 8003a1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a20:	f7fe f9b8 	bl	8001d94 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a28:	f7fe f9b4 	bl	8001d94 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e04c      	b.n	8003ad4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a3a:	4b28      	ldr	r3, [pc, #160]	@ (8003adc <HAL_RCC_OscConfig+0x618>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1f0      	bne.n	8003a28 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003a46:	4b25      	ldr	r3, [pc, #148]	@ (8003adc <HAL_RCC_OscConfig+0x618>)
 8003a48:	68da      	ldr	r2, [r3, #12]
 8003a4a:	4924      	ldr	r1, [pc, #144]	@ (8003adc <HAL_RCC_OscConfig+0x618>)
 8003a4c:	4b25      	ldr	r3, [pc, #148]	@ (8003ae4 <HAL_RCC_OscConfig+0x620>)
 8003a4e:	4013      	ands	r3, r2
 8003a50:	60cb      	str	r3, [r1, #12]
 8003a52:	e03e      	b.n	8003ad2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	69db      	ldr	r3, [r3, #28]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d101      	bne.n	8003a60 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e039      	b.n	8003ad4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003a60:	4b1e      	ldr	r3, [pc, #120]	@ (8003adc <HAL_RCC_OscConfig+0x618>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f003 0203 	and.w	r2, r3, #3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d12c      	bne.n	8003ace <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d123      	bne.n	8003ace <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a90:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d11b      	bne.n	8003ace <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d113      	bne.n	8003ace <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab0:	085b      	lsrs	r3, r3, #1
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d109      	bne.n	8003ace <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ac4:	085b      	lsrs	r3, r3, #1
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d001      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e000      	b.n	8003ad4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3720      	adds	r7, #32
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	019f800c 	.word	0x019f800c
 8003ae4:	feeefffc 	.word	0xfeeefffc

08003ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003af2:	2300      	movs	r3, #0
 8003af4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e11e      	b.n	8003d3e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b00:	4b91      	ldr	r3, [pc, #580]	@ (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 030f 	and.w	r3, r3, #15
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d910      	bls.n	8003b30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b0e:	4b8e      	ldr	r3, [pc, #568]	@ (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f023 020f 	bic.w	r2, r3, #15
 8003b16:	498c      	ldr	r1, [pc, #560]	@ (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b1e:	4b8a      	ldr	r3, [pc, #552]	@ (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d001      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e106      	b.n	8003d3e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d073      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	2b03      	cmp	r3, #3
 8003b42:	d129      	bne.n	8003b98 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b44:	4b81      	ldr	r3, [pc, #516]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d101      	bne.n	8003b54 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e0f4      	b.n	8003d3e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003b54:	f000 f99e 	bl	8003e94 <RCC_GetSysClockFreqFromPLLSource>
 8003b58:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	4a7c      	ldr	r2, [pc, #496]	@ (8003d50 <HAL_RCC_ClockConfig+0x268>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d93f      	bls.n	8003be2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b62:	4b7a      	ldr	r3, [pc, #488]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d009      	beq.n	8003b82 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d033      	beq.n	8003be2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d12f      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b82:	4b72      	ldr	r3, [pc, #456]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b8a:	4a70      	ldr	r2, [pc, #448]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003b8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b90:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003b92:	2380      	movs	r3, #128	@ 0x80
 8003b94:	617b      	str	r3, [r7, #20]
 8003b96:	e024      	b.n	8003be2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d107      	bne.n	8003bb0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ba0:	4b6a      	ldr	r3, [pc, #424]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d109      	bne.n	8003bc0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e0c6      	b.n	8003d3e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bb0:	4b66      	ldr	r3, [pc, #408]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d101      	bne.n	8003bc0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e0be      	b.n	8003d3e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003bc0:	f000 f8ce 	bl	8003d60 <HAL_RCC_GetSysClockFreq>
 8003bc4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	4a61      	ldr	r2, [pc, #388]	@ (8003d50 <HAL_RCC_ClockConfig+0x268>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d909      	bls.n	8003be2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003bce:	4b5f      	ldr	r3, [pc, #380]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003bd6:	4a5d      	ldr	r2, [pc, #372]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003bd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bdc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003bde:	2380      	movs	r3, #128	@ 0x80
 8003be0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003be2:	4b5a      	ldr	r3, [pc, #360]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f023 0203 	bic.w	r2, r3, #3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	4957      	ldr	r1, [pc, #348]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bf4:	f7fe f8ce 	bl	8001d94 <HAL_GetTick>
 8003bf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bfa:	e00a      	b.n	8003c12 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bfc:	f7fe f8ca 	bl	8001d94 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e095      	b.n	8003d3e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c12:	4b4e      	ldr	r3, [pc, #312]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 020c 	and.w	r2, r3, #12
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d1eb      	bne.n	8003bfc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d023      	beq.n	8003c78 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d005      	beq.n	8003c48 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c3c:	4b43      	ldr	r3, [pc, #268]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	4a42      	ldr	r2, [pc, #264]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003c42:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c46:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0308 	and.w	r3, r3, #8
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d007      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003c54:	4b3d      	ldr	r3, [pc, #244]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003c5c:	4a3b      	ldr	r2, [pc, #236]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003c5e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c64:	4b39      	ldr	r3, [pc, #228]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	4936      	ldr	r1, [pc, #216]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	608b      	str	r3, [r1, #8]
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	2b80      	cmp	r3, #128	@ 0x80
 8003c7c:	d105      	bne.n	8003c8a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003c7e:	4b33      	ldr	r3, [pc, #204]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	4a32      	ldr	r2, [pc, #200]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003c84:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c88:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c8a:	4b2f      	ldr	r3, [pc, #188]	@ (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d21d      	bcs.n	8003cd4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c98:	4b2b      	ldr	r3, [pc, #172]	@ (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f023 020f 	bic.w	r2, r3, #15
 8003ca0:	4929      	ldr	r1, [pc, #164]	@ (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ca8:	f7fe f874 	bl	8001d94 <HAL_GetTick>
 8003cac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cae:	e00a      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cb0:	f7fe f870 	bl	8001d94 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e03b      	b.n	8003d3e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc6:	4b20      	ldr	r3, [pc, #128]	@ (8003d48 <HAL_RCC_ClockConfig+0x260>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 030f 	and.w	r3, r3, #15
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d1ed      	bne.n	8003cb0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d008      	beq.n	8003cf2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	4917      	ldr	r1, [pc, #92]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0308 	and.w	r3, r3, #8
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d009      	beq.n	8003d12 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cfe:	4b13      	ldr	r3, [pc, #76]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	490f      	ldr	r1, [pc, #60]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d12:	f000 f825 	bl	8003d60 <HAL_RCC_GetSysClockFreq>
 8003d16:	4602      	mov	r2, r0
 8003d18:	4b0c      	ldr	r3, [pc, #48]	@ (8003d4c <HAL_RCC_ClockConfig+0x264>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	091b      	lsrs	r3, r3, #4
 8003d1e:	f003 030f 	and.w	r3, r3, #15
 8003d22:	490c      	ldr	r1, [pc, #48]	@ (8003d54 <HAL_RCC_ClockConfig+0x26c>)
 8003d24:	5ccb      	ldrb	r3, [r1, r3]
 8003d26:	f003 031f 	and.w	r3, r3, #31
 8003d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8003d58 <HAL_RCC_ClockConfig+0x270>)
 8003d30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003d32:	4b0a      	ldr	r3, [pc, #40]	@ (8003d5c <HAL_RCC_ClockConfig+0x274>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fd ffe0 	bl	8001cfc <HAL_InitTick>
 8003d3c:	4603      	mov	r3, r0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3718      	adds	r7, #24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	40022000 	.word	0x40022000
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	04c4b400 	.word	0x04c4b400
 8003d54:	0800a420 	.word	0x0800a420
 8003d58:	20000000 	.word	0x20000000
 8003d5c:	20000004 	.word	0x20000004

08003d60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b087      	sub	sp, #28
 8003d64:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003d66:	4b2c      	ldr	r3, [pc, #176]	@ (8003e18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 030c 	and.w	r3, r3, #12
 8003d6e:	2b04      	cmp	r3, #4
 8003d70:	d102      	bne.n	8003d78 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d72:	4b2a      	ldr	r3, [pc, #168]	@ (8003e1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d74:	613b      	str	r3, [r7, #16]
 8003d76:	e047      	b.n	8003e08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003d78:	4b27      	ldr	r3, [pc, #156]	@ (8003e18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f003 030c 	and.w	r3, r3, #12
 8003d80:	2b08      	cmp	r3, #8
 8003d82:	d102      	bne.n	8003d8a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d84:	4b26      	ldr	r3, [pc, #152]	@ (8003e20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d86:	613b      	str	r3, [r7, #16]
 8003d88:	e03e      	b.n	8003e08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003d8a:	4b23      	ldr	r3, [pc, #140]	@ (8003e18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 030c 	and.w	r3, r3, #12
 8003d92:	2b0c      	cmp	r3, #12
 8003d94:	d136      	bne.n	8003e04 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d96:	4b20      	ldr	r3, [pc, #128]	@ (8003e18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	f003 0303 	and.w	r3, r3, #3
 8003d9e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003da0:	4b1d      	ldr	r3, [pc, #116]	@ (8003e18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	091b      	lsrs	r3, r3, #4
 8003da6:	f003 030f 	and.w	r3, r3, #15
 8003daa:	3301      	adds	r3, #1
 8003dac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2b03      	cmp	r3, #3
 8003db2:	d10c      	bne.n	8003dce <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003db4:	4a1a      	ldr	r2, [pc, #104]	@ (8003e20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dbc:	4a16      	ldr	r2, [pc, #88]	@ (8003e18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dbe:	68d2      	ldr	r2, [r2, #12]
 8003dc0:	0a12      	lsrs	r2, r2, #8
 8003dc2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003dc6:	fb02 f303 	mul.w	r3, r2, r3
 8003dca:	617b      	str	r3, [r7, #20]
      break;
 8003dcc:	e00c      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003dce:	4a13      	ldr	r2, [pc, #76]	@ (8003e1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd6:	4a10      	ldr	r2, [pc, #64]	@ (8003e18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dd8:	68d2      	ldr	r2, [r2, #12]
 8003dda:	0a12      	lsrs	r2, r2, #8
 8003ddc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003de0:	fb02 f303 	mul.w	r3, r2, r3
 8003de4:	617b      	str	r3, [r7, #20]
      break;
 8003de6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003de8:	4b0b      	ldr	r3, [pc, #44]	@ (8003e18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	0e5b      	lsrs	r3, r3, #25
 8003dee:	f003 0303 	and.w	r3, r3, #3
 8003df2:	3301      	adds	r3, #1
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e00:	613b      	str	r3, [r7, #16]
 8003e02:	e001      	b.n	8003e08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003e04:	2300      	movs	r3, #0
 8003e06:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003e08:	693b      	ldr	r3, [r7, #16]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	371c      	adds	r7, #28
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	00f42400 	.word	0x00f42400
 8003e20:	007a1200 	.word	0x007a1200

08003e24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e28:	4b03      	ldr	r3, [pc, #12]	@ (8003e38 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	20000000 	.word	0x20000000

08003e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e40:	f7ff fff0 	bl	8003e24 <HAL_RCC_GetHCLKFreq>
 8003e44:	4602      	mov	r2, r0
 8003e46:	4b06      	ldr	r3, [pc, #24]	@ (8003e60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	0a1b      	lsrs	r3, r3, #8
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	4904      	ldr	r1, [pc, #16]	@ (8003e64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e52:	5ccb      	ldrb	r3, [r1, r3]
 8003e54:	f003 031f 	and.w	r3, r3, #31
 8003e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	40021000 	.word	0x40021000
 8003e64:	0800a430 	.word	0x0800a430

08003e68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e6c:	f7ff ffda 	bl	8003e24 <HAL_RCC_GetHCLKFreq>
 8003e70:	4602      	mov	r2, r0
 8003e72:	4b06      	ldr	r3, [pc, #24]	@ (8003e8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	0adb      	lsrs	r3, r3, #11
 8003e78:	f003 0307 	and.w	r3, r3, #7
 8003e7c:	4904      	ldr	r1, [pc, #16]	@ (8003e90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e7e:	5ccb      	ldrb	r3, [r1, r3]
 8003e80:	f003 031f 	and.w	r3, r3, #31
 8003e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	0800a430 	.word	0x0800a430

08003e94 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b087      	sub	sp, #28
 8003e98:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e9a:	4b1e      	ldr	r3, [pc, #120]	@ (8003f14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	f003 0303 	and.w	r3, r3, #3
 8003ea2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8003f14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	091b      	lsrs	r3, r3, #4
 8003eaa:	f003 030f 	and.w	r3, r3, #15
 8003eae:	3301      	adds	r3, #1
 8003eb0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	2b03      	cmp	r3, #3
 8003eb6:	d10c      	bne.n	8003ed2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003eb8:	4a17      	ldr	r2, [pc, #92]	@ (8003f18 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec0:	4a14      	ldr	r2, [pc, #80]	@ (8003f14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ec2:	68d2      	ldr	r2, [r2, #12]
 8003ec4:	0a12      	lsrs	r2, r2, #8
 8003ec6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003eca:	fb02 f303 	mul.w	r3, r2, r3
 8003ece:	617b      	str	r3, [r7, #20]
    break;
 8003ed0:	e00c      	b.n	8003eec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ed2:	4a12      	ldr	r2, [pc, #72]	@ (8003f1c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eda:	4a0e      	ldr	r2, [pc, #56]	@ (8003f14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003edc:	68d2      	ldr	r2, [r2, #12]
 8003ede:	0a12      	lsrs	r2, r2, #8
 8003ee0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003ee4:	fb02 f303 	mul.w	r3, r2, r3
 8003ee8:	617b      	str	r3, [r7, #20]
    break;
 8003eea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003eec:	4b09      	ldr	r3, [pc, #36]	@ (8003f14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	0e5b      	lsrs	r3, r3, #25
 8003ef2:	f003 0303 	and.w	r3, r3, #3
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f04:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003f06:	687b      	ldr	r3, [r7, #4]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	371c      	adds	r7, #28
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr
 8003f14:	40021000 	.word	0x40021000
 8003f18:	007a1200 	.word	0x007a1200
 8003f1c:	00f42400 	.word	0x00f42400

08003f20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f28:	2300      	movs	r3, #0
 8003f2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 8098 	beq.w	800406e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f42:	4b43      	ldr	r3, [pc, #268]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10d      	bne.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f4e:	4b40      	ldr	r3, [pc, #256]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f52:	4a3f      	ldr	r2, [pc, #252]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f58:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f5a:	4b3d      	ldr	r3, [pc, #244]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f62:	60bb      	str	r3, [r7, #8]
 8003f64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f66:	2301      	movs	r3, #1
 8003f68:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f6a:	4b3a      	ldr	r3, [pc, #232]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a39      	ldr	r2, [pc, #228]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f76:	f7fd ff0d 	bl	8001d94 <HAL_GetTick>
 8003f7a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f7c:	e009      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f7e:	f7fd ff09 	bl	8001d94 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d902      	bls.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	74fb      	strb	r3, [r7, #19]
        break;
 8003f90:	e005      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f92:	4b30      	ldr	r3, [pc, #192]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d0ef      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003f9e:	7cfb      	ldrb	r3, [r7, #19]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d159      	bne.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fa4:	4b2a      	ldr	r3, [pc, #168]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003faa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d01e      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d019      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003fc0:	4b23      	ldr	r3, [pc, #140]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fcc:	4b20      	ldr	r3, [pc, #128]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fd2:	4a1f      	ldr	r2, [pc, #124]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fdc:	4b1c      	ldr	r3, [pc, #112]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fe2:	4a1b      	ldr	r2, [pc, #108]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fe4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fe8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003fec:	4a18      	ldr	r2, [pc, #96]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d016      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffe:	f7fd fec9 	bl	8001d94 <HAL_GetTick>
 8004002:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004004:	e00b      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004006:	f7fd fec5 	bl	8001d94 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004014:	4293      	cmp	r3, r2
 8004016:	d902      	bls.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	74fb      	strb	r3, [r7, #19]
            break;
 800401c:	e006      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800401e:	4b0c      	ldr	r3, [pc, #48]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004020:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d0ec      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800402c:	7cfb      	ldrb	r3, [r7, #19]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10b      	bne.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004032:	4b07      	ldr	r3, [pc, #28]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004034:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004038:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004040:	4903      	ldr	r1, [pc, #12]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004042:	4313      	orrs	r3, r2
 8004044:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004048:	e008      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800404a:	7cfb      	ldrb	r3, [r7, #19]
 800404c:	74bb      	strb	r3, [r7, #18]
 800404e:	e005      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004050:	40021000 	.word	0x40021000
 8004054:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004058:	7cfb      	ldrb	r3, [r7, #19]
 800405a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800405c:	7c7b      	ldrb	r3, [r7, #17]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d105      	bne.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004062:	4ba6      	ldr	r3, [pc, #664]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004066:	4aa5      	ldr	r2, [pc, #660]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004068:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800406c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00a      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800407a:	4ba0      	ldr	r3, [pc, #640]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800407c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004080:	f023 0203 	bic.w	r2, r3, #3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	499c      	ldr	r1, [pc, #624]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800408a:	4313      	orrs	r3, r2
 800408c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00a      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800409c:	4b97      	ldr	r3, [pc, #604]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800409e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040a2:	f023 020c 	bic.w	r2, r3, #12
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	4994      	ldr	r1, [pc, #592]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0304 	and.w	r3, r3, #4
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00a      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040be:	4b8f      	ldr	r3, [pc, #572]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	498b      	ldr	r1, [pc, #556]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0308 	and.w	r3, r3, #8
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00a      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040e0:	4b86      	ldr	r3, [pc, #536]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040e6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	4983      	ldr	r1, [pc, #524]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0320 	and.w	r3, r3, #32
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00a      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004102:	4b7e      	ldr	r3, [pc, #504]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004108:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	497a      	ldr	r1, [pc, #488]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004112:	4313      	orrs	r3, r2
 8004114:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00a      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004124:	4b75      	ldr	r3, [pc, #468]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800412a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	4972      	ldr	r1, [pc, #456]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004134:	4313      	orrs	r3, r2
 8004136:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00a      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004146:	4b6d      	ldr	r3, [pc, #436]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004148:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800414c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	4969      	ldr	r1, [pc, #420]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004156:	4313      	orrs	r3, r2
 8004158:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00a      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004168:	4b64      	ldr	r3, [pc, #400]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800416a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800416e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	4961      	ldr	r1, [pc, #388]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004178:	4313      	orrs	r3, r2
 800417a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00a      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800418a:	4b5c      	ldr	r3, [pc, #368]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800418c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004190:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004198:	4958      	ldr	r1, [pc, #352]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800419a:	4313      	orrs	r3, r2
 800419c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d015      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041ac:	4b53      	ldr	r3, [pc, #332]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ba:	4950      	ldr	r1, [pc, #320]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041ca:	d105      	bne.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041cc:	4b4b      	ldr	r3, [pc, #300]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	4a4a      	ldr	r2, [pc, #296]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041d6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d015      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80041e4:	4b45      	ldr	r3, [pc, #276]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f2:	4942      	ldr	r1, [pc, #264]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004202:	d105      	bne.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004204:	4b3d      	ldr	r3, [pc, #244]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	4a3c      	ldr	r2, [pc, #240]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800420a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800420e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d015      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800421c:	4b37      	ldr	r3, [pc, #220]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800421e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004222:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800422a:	4934      	ldr	r1, [pc, #208]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800422c:	4313      	orrs	r3, r2
 800422e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004236:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800423a:	d105      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800423c:	4b2f      	ldr	r3, [pc, #188]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	4a2e      	ldr	r2, [pc, #184]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004242:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004246:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d015      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004254:	4b29      	ldr	r3, [pc, #164]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800425a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004262:	4926      	ldr	r1, [pc, #152]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004264:	4313      	orrs	r3, r2
 8004266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800426e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004272:	d105      	bne.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004274:	4b21      	ldr	r3, [pc, #132]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	4a20      	ldr	r2, [pc, #128]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800427a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800427e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d015      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800428c:	4b1b      	ldr	r3, [pc, #108]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800428e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004292:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800429a:	4918      	ldr	r1, [pc, #96]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800429c:	4313      	orrs	r3, r2
 800429e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042aa:	d105      	bne.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042ac:	4b13      	ldr	r3, [pc, #76]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	4a12      	ldr	r2, [pc, #72]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042b6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d015      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80042c4:	4b0d      	ldr	r3, [pc, #52]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042d2:	490a      	ldr	r1, [pc, #40]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042e2:	d105      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80042e4:	4b05      	ldr	r3, [pc, #20]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	4a04      	ldr	r2, [pc, #16]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042ee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80042f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3718      	adds	r7, #24
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	40021000 	.word	0x40021000

08004300 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e049      	b.n	80043a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d106      	bne.n	800432c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7fd faca 	bl	80018c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2202      	movs	r2, #2
 8004330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	3304      	adds	r3, #4
 800433c:	4619      	mov	r1, r3
 800433e:	4610      	mov	r0, r2
 8004340:	f000 fe9a 	bl	8005078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b082      	sub	sp, #8
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e049      	b.n	8004454 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d106      	bne.n	80043da <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 f841 	bl	800445c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2202      	movs	r2, #2
 80043de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	3304      	adds	r3, #4
 80043ea:	4619      	mov	r1, r3
 80043ec:	4610      	mov	r0, r2
 80043ee:	f000 fe43 	bl	8005078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3708      	adds	r7, #8
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
 800447c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800447e:	2300      	movs	r3, #0
 8004480:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d109      	bne.n	800449c <HAL_TIM_PWM_Start_DMA+0x2c>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	bf0c      	ite	eq
 8004494:	2301      	moveq	r3, #1
 8004496:	2300      	movne	r3, #0
 8004498:	b2db      	uxtb	r3, r3
 800449a:	e03c      	b.n	8004516 <HAL_TIM_PWM_Start_DMA+0xa6>
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	2b04      	cmp	r3, #4
 80044a0:	d109      	bne.n	80044b6 <HAL_TIM_PWM_Start_DMA+0x46>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	bf0c      	ite	eq
 80044ae:	2301      	moveq	r3, #1
 80044b0:	2300      	movne	r3, #0
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	e02f      	b.n	8004516 <HAL_TIM_PWM_Start_DMA+0xa6>
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	2b08      	cmp	r3, #8
 80044ba:	d109      	bne.n	80044d0 <HAL_TIM_PWM_Start_DMA+0x60>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	bf0c      	ite	eq
 80044c8:	2301      	moveq	r3, #1
 80044ca:	2300      	movne	r3, #0
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	e022      	b.n	8004516 <HAL_TIM_PWM_Start_DMA+0xa6>
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	2b0c      	cmp	r3, #12
 80044d4:	d109      	bne.n	80044ea <HAL_TIM_PWM_Start_DMA+0x7a>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	bf0c      	ite	eq
 80044e2:	2301      	moveq	r3, #1
 80044e4:	2300      	movne	r3, #0
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	e015      	b.n	8004516 <HAL_TIM_PWM_Start_DMA+0xa6>
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	2b10      	cmp	r3, #16
 80044ee:	d109      	bne.n	8004504 <HAL_TIM_PWM_Start_DMA+0x94>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	bf0c      	ite	eq
 80044fc:	2301      	moveq	r3, #1
 80044fe:	2300      	movne	r3, #0
 8004500:	b2db      	uxtb	r3, r3
 8004502:	e008      	b.n	8004516 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b02      	cmp	r3, #2
 800450e:	bf0c      	ite	eq
 8004510:	2301      	moveq	r3, #1
 8004512:	2300      	movne	r3, #0
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800451a:	2302      	movs	r3, #2
 800451c:	e1a6      	b.n	800486c <HAL_TIM_PWM_Start_DMA+0x3fc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d109      	bne.n	8004538 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b01      	cmp	r3, #1
 800452e:	bf0c      	ite	eq
 8004530:	2301      	moveq	r3, #1
 8004532:	2300      	movne	r3, #0
 8004534:	b2db      	uxtb	r3, r3
 8004536:	e03c      	b.n	80045b2 <HAL_TIM_PWM_Start_DMA+0x142>
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	2b04      	cmp	r3, #4
 800453c:	d109      	bne.n	8004552 <HAL_TIM_PWM_Start_DMA+0xe2>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b01      	cmp	r3, #1
 8004548:	bf0c      	ite	eq
 800454a:	2301      	moveq	r3, #1
 800454c:	2300      	movne	r3, #0
 800454e:	b2db      	uxtb	r3, r3
 8004550:	e02f      	b.n	80045b2 <HAL_TIM_PWM_Start_DMA+0x142>
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	2b08      	cmp	r3, #8
 8004556:	d109      	bne.n	800456c <HAL_TIM_PWM_Start_DMA+0xfc>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b01      	cmp	r3, #1
 8004562:	bf0c      	ite	eq
 8004564:	2301      	moveq	r3, #1
 8004566:	2300      	movne	r3, #0
 8004568:	b2db      	uxtb	r3, r3
 800456a:	e022      	b.n	80045b2 <HAL_TIM_PWM_Start_DMA+0x142>
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	2b0c      	cmp	r3, #12
 8004570:	d109      	bne.n	8004586 <HAL_TIM_PWM_Start_DMA+0x116>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b01      	cmp	r3, #1
 800457c:	bf0c      	ite	eq
 800457e:	2301      	moveq	r3, #1
 8004580:	2300      	movne	r3, #0
 8004582:	b2db      	uxtb	r3, r3
 8004584:	e015      	b.n	80045b2 <HAL_TIM_PWM_Start_DMA+0x142>
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2b10      	cmp	r3, #16
 800458a:	d109      	bne.n	80045a0 <HAL_TIM_PWM_Start_DMA+0x130>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004592:	b2db      	uxtb	r3, r3
 8004594:	2b01      	cmp	r3, #1
 8004596:	bf0c      	ite	eq
 8004598:	2301      	moveq	r3, #1
 800459a:	2300      	movne	r3, #0
 800459c:	b2db      	uxtb	r3, r3
 800459e:	e008      	b.n	80045b2 <HAL_TIM_PWM_Start_DMA+0x142>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	bf0c      	ite	eq
 80045ac:	2301      	moveq	r3, #1
 80045ae:	2300      	movne	r3, #0
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d034      	beq.n	8004620 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d002      	beq.n	80045c2 <HAL_TIM_PWM_Start_DMA+0x152>
 80045bc:	887b      	ldrh	r3, [r7, #2]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e152      	b.n	800486c <HAL_TIM_PWM_Start_DMA+0x3fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d104      	bne.n	80045d6 <HAL_TIM_PWM_Start_DMA+0x166>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2202      	movs	r2, #2
 80045d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045d4:	e026      	b.n	8004624 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	2b04      	cmp	r3, #4
 80045da:	d104      	bne.n	80045e6 <HAL_TIM_PWM_Start_DMA+0x176>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2202      	movs	r2, #2
 80045e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045e4:	e01e      	b.n	8004624 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	2b08      	cmp	r3, #8
 80045ea:	d104      	bne.n	80045f6 <HAL_TIM_PWM_Start_DMA+0x186>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2202      	movs	r2, #2
 80045f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045f4:	e016      	b.n	8004624 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	2b0c      	cmp	r3, #12
 80045fa:	d104      	bne.n	8004606 <HAL_TIM_PWM_Start_DMA+0x196>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2202      	movs	r2, #2
 8004600:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004604:	e00e      	b.n	8004624 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	2b10      	cmp	r3, #16
 800460a:	d104      	bne.n	8004616 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2202      	movs	r2, #2
 8004610:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004614:	e006      	b.n	8004624 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2202      	movs	r2, #2
 800461a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800461e:	e001      	b.n	8004624 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e123      	b.n	800486c <HAL_TIM_PWM_Start_DMA+0x3fc>
  }

  switch (Channel)
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	2b0c      	cmp	r3, #12
 8004628:	f200 80ae 	bhi.w	8004788 <HAL_TIM_PWM_Start_DMA+0x318>
 800462c:	a201      	add	r2, pc, #4	@ (adr r2, 8004634 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800462e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004632:	bf00      	nop
 8004634:	08004669 	.word	0x08004669
 8004638:	08004789 	.word	0x08004789
 800463c:	08004789 	.word	0x08004789
 8004640:	08004789 	.word	0x08004789
 8004644:	080046b1 	.word	0x080046b1
 8004648:	08004789 	.word	0x08004789
 800464c:	08004789 	.word	0x08004789
 8004650:	08004789 	.word	0x08004789
 8004654:	080046f9 	.word	0x080046f9
 8004658:	08004789 	.word	0x08004789
 800465c:	08004789 	.word	0x08004789
 8004660:	08004789 	.word	0x08004789
 8004664:	08004741 	.word	0x08004741
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466c:	4a81      	ldr	r2, [pc, #516]	@ (8004874 <HAL_TIM_PWM_Start_DMA+0x404>)
 800466e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004674:	4a80      	ldr	r2, [pc, #512]	@ (8004878 <HAL_TIM_PWM_Start_DMA+0x408>)
 8004676:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800467c:	4a7f      	ldr	r2, [pc, #508]	@ (800487c <HAL_TIM_PWM_Start_DMA+0x40c>)
 800467e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8004684:	6879      	ldr	r1, [r7, #4]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	3334      	adds	r3, #52	@ 0x34
 800468c:	461a      	mov	r2, r3
 800468e:	887b      	ldrh	r3, [r7, #2]
 8004690:	f7fd fd44 	bl	800211c <HAL_DMA_Start_IT>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e0e6      	b.n	800486c <HAL_TIM_PWM_Start_DMA+0x3fc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68da      	ldr	r2, [r3, #12]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046ac:	60da      	str	r2, [r3, #12]
      break;
 80046ae:	e06e      	b.n	800478e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b4:	4a6f      	ldr	r2, [pc, #444]	@ (8004874 <HAL_TIM_PWM_Start_DMA+0x404>)
 80046b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046bc:	4a6e      	ldr	r2, [pc, #440]	@ (8004878 <HAL_TIM_PWM_Start_DMA+0x408>)
 80046be:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c4:	4a6d      	ldr	r2, [pc, #436]	@ (800487c <HAL_TIM_PWM_Start_DMA+0x40c>)
 80046c6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80046cc:	6879      	ldr	r1, [r7, #4]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	3338      	adds	r3, #56	@ 0x38
 80046d4:	461a      	mov	r2, r3
 80046d6:	887b      	ldrh	r3, [r7, #2]
 80046d8:	f7fd fd20 	bl	800211c <HAL_DMA_Start_IT>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e0c2      	b.n	800486c <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68da      	ldr	r2, [r3, #12]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80046f4:	60da      	str	r2, [r3, #12]
      break;
 80046f6:	e04a      	b.n	800478e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046fc:	4a5d      	ldr	r2, [pc, #372]	@ (8004874 <HAL_TIM_PWM_Start_DMA+0x404>)
 80046fe:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004704:	4a5c      	ldr	r2, [pc, #368]	@ (8004878 <HAL_TIM_PWM_Start_DMA+0x408>)
 8004706:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800470c:	4a5b      	ldr	r2, [pc, #364]	@ (800487c <HAL_TIM_PWM_Start_DMA+0x40c>)
 800470e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8004714:	6879      	ldr	r1, [r7, #4]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	333c      	adds	r3, #60	@ 0x3c
 800471c:	461a      	mov	r2, r3
 800471e:	887b      	ldrh	r3, [r7, #2]
 8004720:	f7fd fcfc 	bl	800211c <HAL_DMA_Start_IT>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d001      	beq.n	800472e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e09e      	b.n	800486c <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68da      	ldr	r2, [r3, #12]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800473c:	60da      	str	r2, [r3, #12]
      break;
 800473e:	e026      	b.n	800478e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004744:	4a4b      	ldr	r2, [pc, #300]	@ (8004874 <HAL_TIM_PWM_Start_DMA+0x404>)
 8004746:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800474c:	4a4a      	ldr	r2, [pc, #296]	@ (8004878 <HAL_TIM_PWM_Start_DMA+0x408>)
 800474e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004754:	4a49      	ldr	r2, [pc, #292]	@ (800487c <HAL_TIM_PWM_Start_DMA+0x40c>)
 8004756:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800475c:	6879      	ldr	r1, [r7, #4]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	3340      	adds	r3, #64	@ 0x40
 8004764:	461a      	mov	r2, r3
 8004766:	887b      	ldrh	r3, [r7, #2]
 8004768:	f7fd fcd8 	bl	800211c <HAL_DMA_Start_IT>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e07a      	b.n	800486c <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68da      	ldr	r2, [r3, #12]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004784:	60da      	str	r2, [r3, #12]
      break;
 8004786:	e002      	b.n	800478e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	75fb      	strb	r3, [r7, #23]
      break;
 800478c:	bf00      	nop
  }

  if (status == HAL_OK)
 800478e:	7dfb      	ldrb	r3, [r7, #23]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d16a      	bne.n	800486a <HAL_TIM_PWM_Start_DMA+0x3fa>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2201      	movs	r2, #1
 800479a:	68b9      	ldr	r1, [r7, #8]
 800479c:	4618      	mov	r0, r3
 800479e:	f001 f899 	bl	80058d4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a36      	ldr	r2, [pc, #216]	@ (8004880 <HAL_TIM_PWM_Start_DMA+0x410>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d013      	beq.n	80047d4 <HAL_TIM_PWM_Start_DMA+0x364>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a34      	ldr	r2, [pc, #208]	@ (8004884 <HAL_TIM_PWM_Start_DMA+0x414>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d00e      	beq.n	80047d4 <HAL_TIM_PWM_Start_DMA+0x364>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a33      	ldr	r2, [pc, #204]	@ (8004888 <HAL_TIM_PWM_Start_DMA+0x418>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d009      	beq.n	80047d4 <HAL_TIM_PWM_Start_DMA+0x364>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a31      	ldr	r2, [pc, #196]	@ (800488c <HAL_TIM_PWM_Start_DMA+0x41c>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d004      	beq.n	80047d4 <HAL_TIM_PWM_Start_DMA+0x364>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a30      	ldr	r2, [pc, #192]	@ (8004890 <HAL_TIM_PWM_Start_DMA+0x420>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d101      	bne.n	80047d8 <HAL_TIM_PWM_Start_DMA+0x368>
 80047d4:	2301      	movs	r3, #1
 80047d6:	e000      	b.n	80047da <HAL_TIM_PWM_Start_DMA+0x36a>
 80047d8:	2300      	movs	r3, #0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d007      	beq.n	80047ee <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80047ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a23      	ldr	r2, [pc, #140]	@ (8004880 <HAL_TIM_PWM_Start_DMA+0x410>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d018      	beq.n	800482a <HAL_TIM_PWM_Start_DMA+0x3ba>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004800:	d013      	beq.n	800482a <HAL_TIM_PWM_Start_DMA+0x3ba>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a23      	ldr	r2, [pc, #140]	@ (8004894 <HAL_TIM_PWM_Start_DMA+0x424>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d00e      	beq.n	800482a <HAL_TIM_PWM_Start_DMA+0x3ba>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a21      	ldr	r2, [pc, #132]	@ (8004898 <HAL_TIM_PWM_Start_DMA+0x428>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d009      	beq.n	800482a <HAL_TIM_PWM_Start_DMA+0x3ba>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a1a      	ldr	r2, [pc, #104]	@ (8004884 <HAL_TIM_PWM_Start_DMA+0x414>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d004      	beq.n	800482a <HAL_TIM_PWM_Start_DMA+0x3ba>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a18      	ldr	r2, [pc, #96]	@ (8004888 <HAL_TIM_PWM_Start_DMA+0x418>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d115      	bne.n	8004856 <HAL_TIM_PWM_Start_DMA+0x3e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	4b1a      	ldr	r3, [pc, #104]	@ (800489c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8004832:	4013      	ands	r3, r2
 8004834:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	2b06      	cmp	r3, #6
 800483a:	d015      	beq.n	8004868 <HAL_TIM_PWM_Start_DMA+0x3f8>
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004842:	d011      	beq.n	8004868 <HAL_TIM_PWM_Start_DMA+0x3f8>
      {
        __HAL_TIM_ENABLE(htim);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f042 0201 	orr.w	r2, r2, #1
 8004852:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004854:	e008      	b.n	8004868 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f042 0201 	orr.w	r2, r2, #1
 8004864:	601a      	str	r2, [r3, #0]
 8004866:	e000      	b.n	800486a <HAL_TIM_PWM_Start_DMA+0x3fa>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004868:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800486a:	7dfb      	ldrb	r3, [r7, #23]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3718      	adds	r7, #24
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	08004f67 	.word	0x08004f67
 8004878:	0800500f 	.word	0x0800500f
 800487c:	08004ed5 	.word	0x08004ed5
 8004880:	40012c00 	.word	0x40012c00
 8004884:	40013400 	.word	0x40013400
 8004888:	40014000 	.word	0x40014000
 800488c:	40014400 	.word	0x40014400
 8004890:	40014800 	.word	0x40014800
 8004894:	40000400 	.word	0x40000400
 8004898:	40000800 	.word	0x40000800
 800489c:	00010007 	.word	0x00010007

080048a0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048aa:	2300      	movs	r3, #0
 80048ac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2b0c      	cmp	r3, #12
 80048b2:	d855      	bhi.n	8004960 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80048b4:	a201      	add	r2, pc, #4	@ (adr r2, 80048bc <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80048b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ba:	bf00      	nop
 80048bc:	080048f1 	.word	0x080048f1
 80048c0:	08004961 	.word	0x08004961
 80048c4:	08004961 	.word	0x08004961
 80048c8:	08004961 	.word	0x08004961
 80048cc:	0800490d 	.word	0x0800490d
 80048d0:	08004961 	.word	0x08004961
 80048d4:	08004961 	.word	0x08004961
 80048d8:	08004961 	.word	0x08004961
 80048dc:	08004929 	.word	0x08004929
 80048e0:	08004961 	.word	0x08004961
 80048e4:	08004961 	.word	0x08004961
 80048e8:	08004961 	.word	0x08004961
 80048ec:	08004945 	.word	0x08004945
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68da      	ldr	r2, [r3, #12]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80048fe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004904:	4618      	mov	r0, r3
 8004906:	f7fd fc84 	bl	8002212 <HAL_DMA_Abort_IT>
      break;
 800490a:	e02c      	b.n	8004966 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68da      	ldr	r2, [r3, #12]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800491a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004920:	4618      	mov	r0, r3
 8004922:	f7fd fc76 	bl	8002212 <HAL_DMA_Abort_IT>
      break;
 8004926:	e01e      	b.n	8004966 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68da      	ldr	r2, [r3, #12]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004936:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800493c:	4618      	mov	r0, r3
 800493e:	f7fd fc68 	bl	8002212 <HAL_DMA_Abort_IT>
      break;
 8004942:	e010      	b.n	8004966 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68da      	ldr	r2, [r3, #12]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004952:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004958:	4618      	mov	r0, r3
 800495a:	f7fd fc5a 	bl	8002212 <HAL_DMA_Abort_IT>
      break;
 800495e:	e002      	b.n	8004966 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	73fb      	strb	r3, [r7, #15]
      break;
 8004964:	bf00      	nop
  }

  if (status == HAL_OK)
 8004966:	7bfb      	ldrb	r3, [r7, #15]
 8004968:	2b00      	cmp	r3, #0
 800496a:	f040 8081 	bne.w	8004a70 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2200      	movs	r2, #0
 8004974:	6839      	ldr	r1, [r7, #0]
 8004976:	4618      	mov	r0, r3
 8004978:	f000 ffac 	bl	80058d4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a3e      	ldr	r2, [pc, #248]	@ (8004a7c <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d013      	beq.n	80049ae <HAL_TIM_PWM_Stop_DMA+0x10e>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a3d      	ldr	r2, [pc, #244]	@ (8004a80 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d00e      	beq.n	80049ae <HAL_TIM_PWM_Stop_DMA+0x10e>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a3b      	ldr	r2, [pc, #236]	@ (8004a84 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d009      	beq.n	80049ae <HAL_TIM_PWM_Stop_DMA+0x10e>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a3a      	ldr	r2, [pc, #232]	@ (8004a88 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d004      	beq.n	80049ae <HAL_TIM_PWM_Stop_DMA+0x10e>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a38      	ldr	r2, [pc, #224]	@ (8004a8c <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d101      	bne.n	80049b2 <HAL_TIM_PWM_Stop_DMA+0x112>
 80049ae:	2301      	movs	r3, #1
 80049b0:	e000      	b.n	80049b4 <HAL_TIM_PWM_Stop_DMA+0x114>
 80049b2:	2300      	movs	r3, #0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d017      	beq.n	80049e8 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6a1a      	ldr	r2, [r3, #32]
 80049be:	f241 1311 	movw	r3, #4369	@ 0x1111
 80049c2:	4013      	ands	r3, r2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d10f      	bne.n	80049e8 <HAL_TIM_PWM_Stop_DMA+0x148>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6a1a      	ldr	r2, [r3, #32]
 80049ce:	f244 4344 	movw	r3, #17476	@ 0x4444
 80049d2:	4013      	ands	r3, r2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d107      	bne.n	80049e8 <HAL_TIM_PWM_Stop_DMA+0x148>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80049e6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6a1a      	ldr	r2, [r3, #32]
 80049ee:	f241 1311 	movw	r3, #4369	@ 0x1111
 80049f2:	4013      	ands	r3, r2
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10f      	bne.n	8004a18 <HAL_TIM_PWM_Stop_DMA+0x178>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6a1a      	ldr	r2, [r3, #32]
 80049fe:	f244 4344 	movw	r3, #17476	@ 0x4444
 8004a02:	4013      	ands	r3, r2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d107      	bne.n	8004a18 <HAL_TIM_PWM_Stop_DMA+0x178>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0201 	bic.w	r2, r2, #1
 8004a16:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d104      	bne.n	8004a28 <HAL_TIM_PWM_Stop_DMA+0x188>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a26:	e023      	b.n	8004a70 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	2b04      	cmp	r3, #4
 8004a2c:	d104      	bne.n	8004a38 <HAL_TIM_PWM_Stop_DMA+0x198>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a36:	e01b      	b.n	8004a70 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	2b08      	cmp	r3, #8
 8004a3c:	d104      	bne.n	8004a48 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a46:	e013      	b.n	8004a70 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	2b0c      	cmp	r3, #12
 8004a4c:	d104      	bne.n	8004a58 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a56:	e00b      	b.n	8004a70 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	2b10      	cmp	r3, #16
 8004a5c:	d104      	bne.n	8004a68 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a66:	e003      	b.n	8004a70 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8004a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	40012c00 	.word	0x40012c00
 8004a80:	40013400 	.word	0x40013400
 8004a84:	40014000 	.word	0x40014000
 8004a88:	40014400 	.word	0x40014400
 8004a8c:	40014800 	.word	0x40014800

08004a90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b086      	sub	sp, #24
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d101      	bne.n	8004aae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004aaa:	2302      	movs	r3, #2
 8004aac:	e0ff      	b.n	8004cae <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2b14      	cmp	r3, #20
 8004aba:	f200 80f0 	bhi.w	8004c9e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004abe:	a201      	add	r2, pc, #4	@ (adr r2, 8004ac4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac4:	08004b19 	.word	0x08004b19
 8004ac8:	08004c9f 	.word	0x08004c9f
 8004acc:	08004c9f 	.word	0x08004c9f
 8004ad0:	08004c9f 	.word	0x08004c9f
 8004ad4:	08004b59 	.word	0x08004b59
 8004ad8:	08004c9f 	.word	0x08004c9f
 8004adc:	08004c9f 	.word	0x08004c9f
 8004ae0:	08004c9f 	.word	0x08004c9f
 8004ae4:	08004b9b 	.word	0x08004b9b
 8004ae8:	08004c9f 	.word	0x08004c9f
 8004aec:	08004c9f 	.word	0x08004c9f
 8004af0:	08004c9f 	.word	0x08004c9f
 8004af4:	08004bdb 	.word	0x08004bdb
 8004af8:	08004c9f 	.word	0x08004c9f
 8004afc:	08004c9f 	.word	0x08004c9f
 8004b00:	08004c9f 	.word	0x08004c9f
 8004b04:	08004c1d 	.word	0x08004c1d
 8004b08:	08004c9f 	.word	0x08004c9f
 8004b0c:	08004c9f 	.word	0x08004c9f
 8004b10:	08004c9f 	.word	0x08004c9f
 8004b14:	08004c5d 	.word	0x08004c5d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68b9      	ldr	r1, [r7, #8]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 fb46 	bl	80051b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	699a      	ldr	r2, [r3, #24]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0208 	orr.w	r2, r2, #8
 8004b32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	699a      	ldr	r2, [r3, #24]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f022 0204 	bic.w	r2, r2, #4
 8004b42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6999      	ldr	r1, [r3, #24]
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	691a      	ldr	r2, [r3, #16]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	619a      	str	r2, [r3, #24]
      break;
 8004b56:	e0a5      	b.n	8004ca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68b9      	ldr	r1, [r7, #8]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 fbb6 	bl	80052d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	699a      	ldr	r2, [r3, #24]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	699a      	ldr	r2, [r3, #24]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6999      	ldr	r1, [r3, #24]
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	021a      	lsls	r2, r3, #8
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	619a      	str	r2, [r3, #24]
      break;
 8004b98:	e084      	b.n	8004ca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68b9      	ldr	r1, [r7, #8]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f000 fc1f 	bl	80053e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	69da      	ldr	r2, [r3, #28]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f042 0208 	orr.w	r2, r2, #8
 8004bb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69da      	ldr	r2, [r3, #28]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 0204 	bic.w	r2, r2, #4
 8004bc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	69d9      	ldr	r1, [r3, #28]
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	691a      	ldr	r2, [r3, #16]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	61da      	str	r2, [r3, #28]
      break;
 8004bd8:	e064      	b.n	8004ca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68b9      	ldr	r1, [r7, #8]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f000 fc87 	bl	80054f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	69da      	ldr	r2, [r3, #28]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	69da      	ldr	r2, [r3, #28]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	69d9      	ldr	r1, [r3, #28]
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	021a      	lsls	r2, r3, #8
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	61da      	str	r2, [r3, #28]
      break;
 8004c1a:	e043      	b.n	8004ca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68b9      	ldr	r1, [r7, #8]
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 fcf0 	bl	8005608 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f042 0208 	orr.w	r2, r2, #8
 8004c36:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f022 0204 	bic.w	r2, r2, #4
 8004c46:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	691a      	ldr	r2, [r3, #16]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	430a      	orrs	r2, r1
 8004c58:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004c5a:	e023      	b.n	8004ca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68b9      	ldr	r1, [r7, #8]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 fd34 	bl	80056d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c76:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c86:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	021a      	lsls	r2, r3, #8
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004c9c:	e002      	b.n	8004ca4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	75fb      	strb	r3, [r7, #23]
      break;
 8004ca2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3718      	adds	r7, #24
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop

08004cb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d101      	bne.n	8004cd4 <HAL_TIM_ConfigClockSource+0x1c>
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	e0de      	b.n	8004e92 <HAL_TIM_ConfigClockSource+0x1da>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2202      	movs	r2, #2
 8004ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004cf2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004cf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cfe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a63      	ldr	r2, [pc, #396]	@ (8004e9c <HAL_TIM_ConfigClockSource+0x1e4>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	f000 80a9 	beq.w	8004e66 <HAL_TIM_ConfigClockSource+0x1ae>
 8004d14:	4a61      	ldr	r2, [pc, #388]	@ (8004e9c <HAL_TIM_ConfigClockSource+0x1e4>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	f200 80ae 	bhi.w	8004e78 <HAL_TIM_ConfigClockSource+0x1c0>
 8004d1c:	4a60      	ldr	r2, [pc, #384]	@ (8004ea0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	f000 80a1 	beq.w	8004e66 <HAL_TIM_ConfigClockSource+0x1ae>
 8004d24:	4a5e      	ldr	r2, [pc, #376]	@ (8004ea0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	f200 80a6 	bhi.w	8004e78 <HAL_TIM_ConfigClockSource+0x1c0>
 8004d2c:	4a5d      	ldr	r2, [pc, #372]	@ (8004ea4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	f000 8099 	beq.w	8004e66 <HAL_TIM_ConfigClockSource+0x1ae>
 8004d34:	4a5b      	ldr	r2, [pc, #364]	@ (8004ea4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	f200 809e 	bhi.w	8004e78 <HAL_TIM_ConfigClockSource+0x1c0>
 8004d3c:	4a5a      	ldr	r2, [pc, #360]	@ (8004ea8 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	f000 8091 	beq.w	8004e66 <HAL_TIM_ConfigClockSource+0x1ae>
 8004d44:	4a58      	ldr	r2, [pc, #352]	@ (8004ea8 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	f200 8096 	bhi.w	8004e78 <HAL_TIM_ConfigClockSource+0x1c0>
 8004d4c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004d50:	f000 8089 	beq.w	8004e66 <HAL_TIM_ConfigClockSource+0x1ae>
 8004d54:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004d58:	f200 808e 	bhi.w	8004e78 <HAL_TIM_ConfigClockSource+0x1c0>
 8004d5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d60:	d03e      	beq.n	8004de0 <HAL_TIM_ConfigClockSource+0x128>
 8004d62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d66:	f200 8087 	bhi.w	8004e78 <HAL_TIM_ConfigClockSource+0x1c0>
 8004d6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d6e:	f000 8086 	beq.w	8004e7e <HAL_TIM_ConfigClockSource+0x1c6>
 8004d72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d76:	d87f      	bhi.n	8004e78 <HAL_TIM_ConfigClockSource+0x1c0>
 8004d78:	2b70      	cmp	r3, #112	@ 0x70
 8004d7a:	d01a      	beq.n	8004db2 <HAL_TIM_ConfigClockSource+0xfa>
 8004d7c:	2b70      	cmp	r3, #112	@ 0x70
 8004d7e:	d87b      	bhi.n	8004e78 <HAL_TIM_ConfigClockSource+0x1c0>
 8004d80:	2b60      	cmp	r3, #96	@ 0x60
 8004d82:	d050      	beq.n	8004e26 <HAL_TIM_ConfigClockSource+0x16e>
 8004d84:	2b60      	cmp	r3, #96	@ 0x60
 8004d86:	d877      	bhi.n	8004e78 <HAL_TIM_ConfigClockSource+0x1c0>
 8004d88:	2b50      	cmp	r3, #80	@ 0x50
 8004d8a:	d03c      	beq.n	8004e06 <HAL_TIM_ConfigClockSource+0x14e>
 8004d8c:	2b50      	cmp	r3, #80	@ 0x50
 8004d8e:	d873      	bhi.n	8004e78 <HAL_TIM_ConfigClockSource+0x1c0>
 8004d90:	2b40      	cmp	r3, #64	@ 0x40
 8004d92:	d058      	beq.n	8004e46 <HAL_TIM_ConfigClockSource+0x18e>
 8004d94:	2b40      	cmp	r3, #64	@ 0x40
 8004d96:	d86f      	bhi.n	8004e78 <HAL_TIM_ConfigClockSource+0x1c0>
 8004d98:	2b30      	cmp	r3, #48	@ 0x30
 8004d9a:	d064      	beq.n	8004e66 <HAL_TIM_ConfigClockSource+0x1ae>
 8004d9c:	2b30      	cmp	r3, #48	@ 0x30
 8004d9e:	d86b      	bhi.n	8004e78 <HAL_TIM_ConfigClockSource+0x1c0>
 8004da0:	2b20      	cmp	r3, #32
 8004da2:	d060      	beq.n	8004e66 <HAL_TIM_ConfigClockSource+0x1ae>
 8004da4:	2b20      	cmp	r3, #32
 8004da6:	d867      	bhi.n	8004e78 <HAL_TIM_ConfigClockSource+0x1c0>
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d05c      	beq.n	8004e66 <HAL_TIM_ConfigClockSource+0x1ae>
 8004dac:	2b10      	cmp	r3, #16
 8004dae:	d05a      	beq.n	8004e66 <HAL_TIM_ConfigClockSource+0x1ae>
 8004db0:	e062      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004dc2:	f000 fd67 	bl	8005894 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004dd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	609a      	str	r2, [r3, #8]
      break;
 8004dde:	e04f      	b.n	8004e80 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004df0:	f000 fd50 	bl	8005894 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	689a      	ldr	r2, [r3, #8]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e02:	609a      	str	r2, [r3, #8]
      break;
 8004e04:	e03c      	b.n	8004e80 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e12:	461a      	mov	r2, r3
 8004e14:	f000 fcc2 	bl	800579c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2150      	movs	r1, #80	@ 0x50
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 fd1b 	bl	800585a <TIM_ITRx_SetConfig>
      break;
 8004e24:	e02c      	b.n	8004e80 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e32:	461a      	mov	r2, r3
 8004e34:	f000 fce1 	bl	80057fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2160      	movs	r1, #96	@ 0x60
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 fd0b 	bl	800585a <TIM_ITRx_SetConfig>
      break;
 8004e44:	e01c      	b.n	8004e80 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e52:	461a      	mov	r2, r3
 8004e54:	f000 fca2 	bl	800579c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2140      	movs	r1, #64	@ 0x40
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f000 fcfb 	bl	800585a <TIM_ITRx_SetConfig>
      break;
 8004e64:	e00c      	b.n	8004e80 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4619      	mov	r1, r3
 8004e70:	4610      	mov	r0, r2
 8004e72:	f000 fcf2 	bl	800585a <TIM_ITRx_SetConfig>
      break;
 8004e76:	e003      	b.n	8004e80 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e7c:	e000      	b.n	8004e80 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8004e7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	00100070 	.word	0x00100070
 8004ea0:	00100040 	.word	0x00100040
 8004ea4:	00100030 	.word	0x00100030
 8004ea8:	00100020 	.word	0x00100020

08004eac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d107      	bne.n	8004efc <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004efa:	e02a      	b.n	8004f52 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d107      	bne.n	8004f16 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2202      	movs	r2, #2
 8004f0a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f14:	e01d      	b.n	8004f52 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d107      	bne.n	8004f30 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2204      	movs	r2, #4
 8004f24:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f2e:	e010      	b.n	8004f52 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d107      	bne.n	8004f4a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2208      	movs	r2, #8
 8004f3e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f48:	e003      	b.n	8004f52 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f7ff ffb4 	bl	8004ec0 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	771a      	strb	r2, [r3, #28]
}
 8004f5e:	bf00      	nop
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b084      	sub	sp, #16
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f72:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d10b      	bne.n	8004f96 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2201      	movs	r2, #1
 8004f82:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	69db      	ldr	r3, [r3, #28]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d136      	bne.n	8004ffa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f94:	e031      	b.n	8004ffa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d10b      	bne.n	8004fb8 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d125      	bne.n	8004ffa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fb6:	e020      	b.n	8004ffa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d10b      	bne.n	8004fda <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2204      	movs	r2, #4
 8004fc6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	69db      	ldr	r3, [r3, #28]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d114      	bne.n	8004ffa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fd8:	e00f      	b.n	8004ffa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d10a      	bne.n	8004ffa <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2208      	movs	r2, #8
 8004fe8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	69db      	ldr	r3, [r3, #28]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d103      	bne.n	8004ffa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f7fc f832 	bl	8001064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	771a      	strb	r2, [r3, #28]
}
 8005006:	bf00      	nop
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b084      	sub	sp, #16
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800501a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	429a      	cmp	r2, r3
 8005024:	d103      	bne.n	800502e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2201      	movs	r2, #1
 800502a:	771a      	strb	r2, [r3, #28]
 800502c:	e019      	b.n	8005062 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	429a      	cmp	r2, r3
 8005036:	d103      	bne.n	8005040 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2202      	movs	r2, #2
 800503c:	771a      	strb	r2, [r3, #28]
 800503e:	e010      	b.n	8005062 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	429a      	cmp	r2, r3
 8005048:	d103      	bne.n	8005052 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2204      	movs	r2, #4
 800504e:	771a      	strb	r2, [r3, #28]
 8005050:	e007      	b.n	8005062 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	429a      	cmp	r2, r3
 800505a:	d102      	bne.n	8005062 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2208      	movs	r2, #8
 8005060:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f7ff ff22 	bl	8004eac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	771a      	strb	r2, [r3, #28]
}
 800506e:	bf00      	nop
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
	...

08005078 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a42      	ldr	r2, [pc, #264]	@ (8005194 <TIM_Base_SetConfig+0x11c>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d00f      	beq.n	80050b0 <TIM_Base_SetConfig+0x38>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005096:	d00b      	beq.n	80050b0 <TIM_Base_SetConfig+0x38>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a3f      	ldr	r2, [pc, #252]	@ (8005198 <TIM_Base_SetConfig+0x120>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d007      	beq.n	80050b0 <TIM_Base_SetConfig+0x38>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a3e      	ldr	r2, [pc, #248]	@ (800519c <TIM_Base_SetConfig+0x124>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d003      	beq.n	80050b0 <TIM_Base_SetConfig+0x38>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a3d      	ldr	r2, [pc, #244]	@ (80051a0 <TIM_Base_SetConfig+0x128>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d108      	bne.n	80050c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	4313      	orrs	r3, r2
 80050c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a33      	ldr	r2, [pc, #204]	@ (8005194 <TIM_Base_SetConfig+0x11c>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d01b      	beq.n	8005102 <TIM_Base_SetConfig+0x8a>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050d0:	d017      	beq.n	8005102 <TIM_Base_SetConfig+0x8a>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a30      	ldr	r2, [pc, #192]	@ (8005198 <TIM_Base_SetConfig+0x120>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d013      	beq.n	8005102 <TIM_Base_SetConfig+0x8a>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a2f      	ldr	r2, [pc, #188]	@ (800519c <TIM_Base_SetConfig+0x124>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d00f      	beq.n	8005102 <TIM_Base_SetConfig+0x8a>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a2e      	ldr	r2, [pc, #184]	@ (80051a0 <TIM_Base_SetConfig+0x128>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d00b      	beq.n	8005102 <TIM_Base_SetConfig+0x8a>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a2d      	ldr	r2, [pc, #180]	@ (80051a4 <TIM_Base_SetConfig+0x12c>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d007      	beq.n	8005102 <TIM_Base_SetConfig+0x8a>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a2c      	ldr	r2, [pc, #176]	@ (80051a8 <TIM_Base_SetConfig+0x130>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d003      	beq.n	8005102 <TIM_Base_SetConfig+0x8a>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a2b      	ldr	r2, [pc, #172]	@ (80051ac <TIM_Base_SetConfig+0x134>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d108      	bne.n	8005114 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005108:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	4313      	orrs	r3, r2
 8005112:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	4313      	orrs	r3, r2
 8005120:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	689a      	ldr	r2, [r3, #8]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a16      	ldr	r2, [pc, #88]	@ (8005194 <TIM_Base_SetConfig+0x11c>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d00f      	beq.n	8005160 <TIM_Base_SetConfig+0xe8>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a17      	ldr	r2, [pc, #92]	@ (80051a0 <TIM_Base_SetConfig+0x128>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d00b      	beq.n	8005160 <TIM_Base_SetConfig+0xe8>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a16      	ldr	r2, [pc, #88]	@ (80051a4 <TIM_Base_SetConfig+0x12c>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d007      	beq.n	8005160 <TIM_Base_SetConfig+0xe8>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a15      	ldr	r2, [pc, #84]	@ (80051a8 <TIM_Base_SetConfig+0x130>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d003      	beq.n	8005160 <TIM_Base_SetConfig+0xe8>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a14      	ldr	r2, [pc, #80]	@ (80051ac <TIM_Base_SetConfig+0x134>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d103      	bne.n	8005168 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	691a      	ldr	r2, [r3, #16]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	2b01      	cmp	r3, #1
 8005178:	d105      	bne.n	8005186 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	f023 0201 	bic.w	r2, r3, #1
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	611a      	str	r2, [r3, #16]
  }
}
 8005186:	bf00      	nop
 8005188:	3714      	adds	r7, #20
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	40012c00 	.word	0x40012c00
 8005198:	40000400 	.word	0x40000400
 800519c:	40000800 	.word	0x40000800
 80051a0:	40013400 	.word	0x40013400
 80051a4:	40014000 	.word	0x40014000
 80051a8:	40014400 	.word	0x40014400
 80051ac:	40014800 	.word	0x40014800

080051b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b087      	sub	sp, #28
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a1b      	ldr	r3, [r3, #32]
 80051c4:	f023 0201 	bic.w	r2, r3, #1
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f023 0303 	bic.w	r3, r3, #3
 80051ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f023 0302 	bic.w	r3, r3, #2
 80051fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	4313      	orrs	r3, r2
 8005206:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a2c      	ldr	r2, [pc, #176]	@ (80052bc <TIM_OC1_SetConfig+0x10c>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d00f      	beq.n	8005230 <TIM_OC1_SetConfig+0x80>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a2b      	ldr	r2, [pc, #172]	@ (80052c0 <TIM_OC1_SetConfig+0x110>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d00b      	beq.n	8005230 <TIM_OC1_SetConfig+0x80>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a2a      	ldr	r2, [pc, #168]	@ (80052c4 <TIM_OC1_SetConfig+0x114>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d007      	beq.n	8005230 <TIM_OC1_SetConfig+0x80>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a29      	ldr	r2, [pc, #164]	@ (80052c8 <TIM_OC1_SetConfig+0x118>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d003      	beq.n	8005230 <TIM_OC1_SetConfig+0x80>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a28      	ldr	r2, [pc, #160]	@ (80052cc <TIM_OC1_SetConfig+0x11c>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d10c      	bne.n	800524a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	f023 0308 	bic.w	r3, r3, #8
 8005236:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	4313      	orrs	r3, r2
 8005240:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f023 0304 	bic.w	r3, r3, #4
 8005248:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a1b      	ldr	r2, [pc, #108]	@ (80052bc <TIM_OC1_SetConfig+0x10c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d00f      	beq.n	8005272 <TIM_OC1_SetConfig+0xc2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a1a      	ldr	r2, [pc, #104]	@ (80052c0 <TIM_OC1_SetConfig+0x110>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d00b      	beq.n	8005272 <TIM_OC1_SetConfig+0xc2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a19      	ldr	r2, [pc, #100]	@ (80052c4 <TIM_OC1_SetConfig+0x114>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d007      	beq.n	8005272 <TIM_OC1_SetConfig+0xc2>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a18      	ldr	r2, [pc, #96]	@ (80052c8 <TIM_OC1_SetConfig+0x118>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d003      	beq.n	8005272 <TIM_OC1_SetConfig+0xc2>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a17      	ldr	r2, [pc, #92]	@ (80052cc <TIM_OC1_SetConfig+0x11c>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d111      	bne.n	8005296 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005278:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005280:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	4313      	orrs	r3, r2
 800528a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	4313      	orrs	r3, r2
 8005294:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	621a      	str	r2, [r3, #32]
}
 80052b0:	bf00      	nop
 80052b2:	371c      	adds	r7, #28
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr
 80052bc:	40012c00 	.word	0x40012c00
 80052c0:	40013400 	.word	0x40013400
 80052c4:	40014000 	.word	0x40014000
 80052c8:	40014400 	.word	0x40014400
 80052cc:	40014800 	.word	0x40014800

080052d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b087      	sub	sp, #28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a1b      	ldr	r3, [r3, #32]
 80052e4:	f023 0210 	bic.w	r2, r3, #16
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800530a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	021b      	lsls	r3, r3, #8
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	4313      	orrs	r3, r2
 8005316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f023 0320 	bic.w	r3, r3, #32
 800531e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	011b      	lsls	r3, r3, #4
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	4313      	orrs	r3, r2
 800532a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a28      	ldr	r2, [pc, #160]	@ (80053d0 <TIM_OC2_SetConfig+0x100>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d003      	beq.n	800533c <TIM_OC2_SetConfig+0x6c>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a27      	ldr	r2, [pc, #156]	@ (80053d4 <TIM_OC2_SetConfig+0x104>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d10d      	bne.n	8005358 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005342:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	011b      	lsls	r3, r3, #4
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	4313      	orrs	r3, r2
 800534e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005356:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a1d      	ldr	r2, [pc, #116]	@ (80053d0 <TIM_OC2_SetConfig+0x100>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d00f      	beq.n	8005380 <TIM_OC2_SetConfig+0xb0>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a1c      	ldr	r2, [pc, #112]	@ (80053d4 <TIM_OC2_SetConfig+0x104>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d00b      	beq.n	8005380 <TIM_OC2_SetConfig+0xb0>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a1b      	ldr	r2, [pc, #108]	@ (80053d8 <TIM_OC2_SetConfig+0x108>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d007      	beq.n	8005380 <TIM_OC2_SetConfig+0xb0>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a1a      	ldr	r2, [pc, #104]	@ (80053dc <TIM_OC2_SetConfig+0x10c>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d003      	beq.n	8005380 <TIM_OC2_SetConfig+0xb0>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a19      	ldr	r2, [pc, #100]	@ (80053e0 <TIM_OC2_SetConfig+0x110>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d113      	bne.n	80053a8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005386:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800538e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	695b      	ldr	r3, [r3, #20]
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	4313      	orrs	r3, r2
 800539a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685a      	ldr	r2, [r3, #4]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	621a      	str	r2, [r3, #32]
}
 80053c2:	bf00      	nop
 80053c4:	371c      	adds	r7, #28
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	40012c00 	.word	0x40012c00
 80053d4:	40013400 	.word	0x40013400
 80053d8:	40014000 	.word	0x40014000
 80053dc:	40014400 	.word	0x40014400
 80053e0:	40014800 	.word	0x40014800

080053e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b087      	sub	sp, #28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a1b      	ldr	r3, [r3, #32]
 80053f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005412:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f023 0303 	bic.w	r3, r3, #3
 800541e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	4313      	orrs	r3, r2
 8005428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005430:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	021b      	lsls	r3, r3, #8
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	4313      	orrs	r3, r2
 800543c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a27      	ldr	r2, [pc, #156]	@ (80054e0 <TIM_OC3_SetConfig+0xfc>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d003      	beq.n	800544e <TIM_OC3_SetConfig+0x6a>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a26      	ldr	r2, [pc, #152]	@ (80054e4 <TIM_OC3_SetConfig+0x100>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d10d      	bne.n	800546a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005454:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	021b      	lsls	r3, r3, #8
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	4313      	orrs	r3, r2
 8005460:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005468:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a1c      	ldr	r2, [pc, #112]	@ (80054e0 <TIM_OC3_SetConfig+0xfc>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d00f      	beq.n	8005492 <TIM_OC3_SetConfig+0xae>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a1b      	ldr	r2, [pc, #108]	@ (80054e4 <TIM_OC3_SetConfig+0x100>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d00b      	beq.n	8005492 <TIM_OC3_SetConfig+0xae>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a1a      	ldr	r2, [pc, #104]	@ (80054e8 <TIM_OC3_SetConfig+0x104>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d007      	beq.n	8005492 <TIM_OC3_SetConfig+0xae>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a19      	ldr	r2, [pc, #100]	@ (80054ec <TIM_OC3_SetConfig+0x108>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d003      	beq.n	8005492 <TIM_OC3_SetConfig+0xae>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a18      	ldr	r2, [pc, #96]	@ (80054f0 <TIM_OC3_SetConfig+0x10c>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d113      	bne.n	80054ba <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005498:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80054a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	011b      	lsls	r3, r3, #4
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	011b      	lsls	r3, r3, #4
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	621a      	str	r2, [r3, #32]
}
 80054d4:	bf00      	nop
 80054d6:	371c      	adds	r7, #28
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr
 80054e0:	40012c00 	.word	0x40012c00
 80054e4:	40013400 	.word	0x40013400
 80054e8:	40014000 	.word	0x40014000
 80054ec:	40014400 	.word	0x40014400
 80054f0:	40014800 	.word	0x40014800

080054f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b087      	sub	sp, #28
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a1b      	ldr	r3, [r3, #32]
 8005508:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	69db      	ldr	r3, [r3, #28]
 800551a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005522:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800552e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	021b      	lsls	r3, r3, #8
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	4313      	orrs	r3, r2
 800553a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005542:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	031b      	lsls	r3, r3, #12
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	4313      	orrs	r3, r2
 800554e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a28      	ldr	r2, [pc, #160]	@ (80055f4 <TIM_OC4_SetConfig+0x100>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d003      	beq.n	8005560 <TIM_OC4_SetConfig+0x6c>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a27      	ldr	r2, [pc, #156]	@ (80055f8 <TIM_OC4_SetConfig+0x104>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d10d      	bne.n	800557c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005566:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	031b      	lsls	r3, r3, #12
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	4313      	orrs	r3, r2
 8005572:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800557a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a1d      	ldr	r2, [pc, #116]	@ (80055f4 <TIM_OC4_SetConfig+0x100>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d00f      	beq.n	80055a4 <TIM_OC4_SetConfig+0xb0>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a1c      	ldr	r2, [pc, #112]	@ (80055f8 <TIM_OC4_SetConfig+0x104>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d00b      	beq.n	80055a4 <TIM_OC4_SetConfig+0xb0>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a1b      	ldr	r2, [pc, #108]	@ (80055fc <TIM_OC4_SetConfig+0x108>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d007      	beq.n	80055a4 <TIM_OC4_SetConfig+0xb0>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a1a      	ldr	r2, [pc, #104]	@ (8005600 <TIM_OC4_SetConfig+0x10c>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d003      	beq.n	80055a4 <TIM_OC4_SetConfig+0xb0>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a19      	ldr	r2, [pc, #100]	@ (8005604 <TIM_OC4_SetConfig+0x110>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d113      	bne.n	80055cc <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80055aa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80055b2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	695b      	ldr	r3, [r3, #20]
 80055b8:	019b      	lsls	r3, r3, #6
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	4313      	orrs	r3, r2
 80055be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	019b      	lsls	r3, r3, #6
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685a      	ldr	r2, [r3, #4]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	621a      	str	r2, [r3, #32]
}
 80055e6:	bf00      	nop
 80055e8:	371c      	adds	r7, #28
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	40012c00 	.word	0x40012c00
 80055f8:	40013400 	.word	0x40013400
 80055fc:	40014000 	.word	0x40014000
 8005600:	40014400 	.word	0x40014400
 8005604:	40014800 	.word	0x40014800

08005608 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005608:	b480      	push	{r7}
 800560a:	b087      	sub	sp, #28
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800562e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005636:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800563a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	4313      	orrs	r3, r2
 8005644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800564c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	041b      	lsls	r3, r3, #16
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	4313      	orrs	r3, r2
 8005658:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a17      	ldr	r2, [pc, #92]	@ (80056bc <TIM_OC5_SetConfig+0xb4>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d00f      	beq.n	8005682 <TIM_OC5_SetConfig+0x7a>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a16      	ldr	r2, [pc, #88]	@ (80056c0 <TIM_OC5_SetConfig+0xb8>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d00b      	beq.n	8005682 <TIM_OC5_SetConfig+0x7a>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a15      	ldr	r2, [pc, #84]	@ (80056c4 <TIM_OC5_SetConfig+0xbc>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d007      	beq.n	8005682 <TIM_OC5_SetConfig+0x7a>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a14      	ldr	r2, [pc, #80]	@ (80056c8 <TIM_OC5_SetConfig+0xc0>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d003      	beq.n	8005682 <TIM_OC5_SetConfig+0x7a>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a13      	ldr	r2, [pc, #76]	@ (80056cc <TIM_OC5_SetConfig+0xc4>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d109      	bne.n	8005696 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005688:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	021b      	lsls	r3, r3, #8
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	4313      	orrs	r3, r2
 8005694:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	685a      	ldr	r2, [r3, #4]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	621a      	str	r2, [r3, #32]
}
 80056b0:	bf00      	nop
 80056b2:	371c      	adds	r7, #28
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr
 80056bc:	40012c00 	.word	0x40012c00
 80056c0:	40013400 	.word	0x40013400
 80056c4:	40014000 	.word	0x40014000
 80056c8:	40014400 	.word	0x40014400
 80056cc:	40014800 	.word	0x40014800

080056d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b087      	sub	sp, #28
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a1b      	ldr	r3, [r3, #32]
 80056e4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005702:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	021b      	lsls	r3, r3, #8
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	4313      	orrs	r3, r2
 800570e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005716:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	051b      	lsls	r3, r3, #20
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	4313      	orrs	r3, r2
 8005722:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a18      	ldr	r2, [pc, #96]	@ (8005788 <TIM_OC6_SetConfig+0xb8>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d00f      	beq.n	800574c <TIM_OC6_SetConfig+0x7c>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a17      	ldr	r2, [pc, #92]	@ (800578c <TIM_OC6_SetConfig+0xbc>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d00b      	beq.n	800574c <TIM_OC6_SetConfig+0x7c>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a16      	ldr	r2, [pc, #88]	@ (8005790 <TIM_OC6_SetConfig+0xc0>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d007      	beq.n	800574c <TIM_OC6_SetConfig+0x7c>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a15      	ldr	r2, [pc, #84]	@ (8005794 <TIM_OC6_SetConfig+0xc4>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d003      	beq.n	800574c <TIM_OC6_SetConfig+0x7c>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a14      	ldr	r2, [pc, #80]	@ (8005798 <TIM_OC6_SetConfig+0xc8>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d109      	bne.n	8005760 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005752:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	029b      	lsls	r3, r3, #10
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	4313      	orrs	r3, r2
 800575e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	685a      	ldr	r2, [r3, #4]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	621a      	str	r2, [r3, #32]
}
 800577a:	bf00      	nop
 800577c:	371c      	adds	r7, #28
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	40012c00 	.word	0x40012c00
 800578c:	40013400 	.word	0x40013400
 8005790:	40014000 	.word	0x40014000
 8005794:	40014400 	.word	0x40014400
 8005798:	40014800 	.word	0x40014800

0800579c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800579c:	b480      	push	{r7}
 800579e:	b087      	sub	sp, #28
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6a1b      	ldr	r3, [r3, #32]
 80057ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	f023 0201 	bic.w	r2, r3, #1
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	011b      	lsls	r3, r3, #4
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f023 030a 	bic.w	r3, r3, #10
 80057d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	4313      	orrs	r3, r2
 80057e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	621a      	str	r2, [r3, #32]
}
 80057ee:	bf00      	nop
 80057f0:	371c      	adds	r7, #28
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b087      	sub	sp, #28
 80057fe:	af00      	add	r7, sp, #0
 8005800:	60f8      	str	r0, [r7, #12]
 8005802:	60b9      	str	r1, [r7, #8]
 8005804:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6a1b      	ldr	r3, [r3, #32]
 8005810:	f023 0210 	bic.w	r2, r3, #16
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005824:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	031b      	lsls	r3, r3, #12
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	4313      	orrs	r3, r2
 800582e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005836:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	011b      	lsls	r3, r3, #4
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	4313      	orrs	r3, r2
 8005840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	621a      	str	r2, [r3, #32]
}
 800584e:	bf00      	nop
 8005850:	371c      	adds	r7, #28
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800585a:	b480      	push	{r7}
 800585c:	b085      	sub	sp, #20
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
 8005862:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005870:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005874:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	4313      	orrs	r3, r2
 800587c:	f043 0307 	orr.w	r3, r3, #7
 8005880:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	609a      	str	r2, [r3, #8]
}
 8005888:	bf00      	nop
 800588a:	3714      	adds	r7, #20
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005894:	b480      	push	{r7}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
 80058a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	021a      	lsls	r2, r3, #8
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	431a      	orrs	r2, r3
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	4313      	orrs	r3, r2
 80058c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	609a      	str	r2, [r3, #8]
}
 80058c8:	bf00      	nop
 80058ca:	371c      	adds	r7, #28
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b087      	sub	sp, #28
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	f003 031f 	and.w	r3, r3, #31
 80058e6:	2201      	movs	r2, #1
 80058e8:	fa02 f303 	lsl.w	r3, r2, r3
 80058ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6a1a      	ldr	r2, [r3, #32]
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	43db      	mvns	r3, r3
 80058f6:	401a      	ands	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6a1a      	ldr	r2, [r3, #32]
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	f003 031f 	and.w	r3, r3, #31
 8005906:	6879      	ldr	r1, [r7, #4]
 8005908:	fa01 f303 	lsl.w	r3, r1, r3
 800590c:	431a      	orrs	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	621a      	str	r2, [r3, #32]
}
 8005912:	bf00      	nop
 8005914:	371c      	adds	r7, #28
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
	...

08005920 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005930:	2b01      	cmp	r3, #1
 8005932:	d101      	bne.n	8005938 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005934:	2302      	movs	r3, #2
 8005936:	e065      	b.n	8005a04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2202      	movs	r2, #2
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a2c      	ldr	r2, [pc, #176]	@ (8005a10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d004      	beq.n	800596c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a2b      	ldr	r2, [pc, #172]	@ (8005a14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d108      	bne.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005972:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	4313      	orrs	r3, r2
 800597c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005984:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005988:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	4313      	orrs	r3, r2
 8005992:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a1b      	ldr	r2, [pc, #108]	@ (8005a10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d018      	beq.n	80059d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059ae:	d013      	beq.n	80059d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a18      	ldr	r2, [pc, #96]	@ (8005a18 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d00e      	beq.n	80059d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a17      	ldr	r2, [pc, #92]	@ (8005a1c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d009      	beq.n	80059d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a12      	ldr	r2, [pc, #72]	@ (8005a14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d004      	beq.n	80059d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a13      	ldr	r2, [pc, #76]	@ (8005a20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d10c      	bne.n	80059f2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	68ba      	ldr	r2, [r7, #8]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2201      	movs	r2, #1
 80059f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3714      	adds	r7, #20
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr
 8005a10:	40012c00 	.word	0x40012c00
 8005a14:	40013400 	.word	0x40013400
 8005a18:	40000400 	.word	0x40000400
 8005a1c:	40000800 	.word	0x40000800
 8005a20:	40014000 	.word	0x40014000

08005a24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d101      	bne.n	8005a40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a3c:	2302      	movs	r3, #2
 8005a3e:	e073      	b.n	8005b28 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	695b      	ldr	r3, [r3, #20]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	041b      	lsls	r3, r3, #16
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	69db      	ldr	r3, [r3, #28]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a19      	ldr	r2, [pc, #100]	@ (8005b34 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d004      	beq.n	8005adc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a18      	ldr	r2, [pc, #96]	@ (8005b38 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d11c      	bne.n	8005b16 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae6:	051b      	lsls	r3, r3, #20
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b04:	4313      	orrs	r3, r2
 8005b06:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b12:	4313      	orrs	r3, r2
 8005b14:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3714      	adds	r7, #20
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	40012c00 	.word	0x40012c00
 8005b38:	40013400 	.word	0x40013400

08005b3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d101      	bne.n	8005b4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e042      	b.n	8005bd4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d106      	bne.n	8005b66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f7fb ff31 	bl	80019c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2224      	movs	r2, #36	@ 0x24
 8005b6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f022 0201 	bic.w	r2, r2, #1
 8005b7c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d002      	beq.n	8005b8c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 fb82 	bl	8006290 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 f8b3 	bl	8005cf8 <UART_SetConfig>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d101      	bne.n	8005b9c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e01b      	b.n	8005bd4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	685a      	ldr	r2, [r3, #4]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005baa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	689a      	ldr	r2, [r3, #8]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005bba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f042 0201 	orr.w	r2, r2, #1
 8005bca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 fc01 	bl	80063d4 <UART_CheckIdleState>
 8005bd2:	4603      	mov	r3, r0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3708      	adds	r7, #8
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b08a      	sub	sp, #40	@ 0x28
 8005be0:	af02      	add	r7, sp, #8
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	603b      	str	r3, [r7, #0]
 8005be8:	4613      	mov	r3, r2
 8005bea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bf2:	2b20      	cmp	r3, #32
 8005bf4:	d17b      	bne.n	8005cee <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d002      	beq.n	8005c02 <HAL_UART_Transmit+0x26>
 8005bfc:	88fb      	ldrh	r3, [r7, #6]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d101      	bne.n	8005c06 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e074      	b.n	8005cf0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2221      	movs	r2, #33	@ 0x21
 8005c12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c16:	f7fc f8bd 	bl	8001d94 <HAL_GetTick>
 8005c1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	88fa      	ldrh	r2, [r7, #6]
 8005c20:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	88fa      	ldrh	r2, [r7, #6]
 8005c28:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c34:	d108      	bne.n	8005c48 <HAL_UART_Transmit+0x6c>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d104      	bne.n	8005c48 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	61bb      	str	r3, [r7, #24]
 8005c46:	e003      	b.n	8005c50 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c50:	e030      	b.n	8005cb4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	9300      	str	r3, [sp, #0]
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	2180      	movs	r1, #128	@ 0x80
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f000 fc63 	bl	8006528 <UART_WaitOnFlagUntilTimeout>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d005      	beq.n	8005c74 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2220      	movs	r2, #32
 8005c6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e03d      	b.n	8005cf0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10b      	bne.n	8005c92 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	461a      	mov	r2, r3
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c88:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	3302      	adds	r3, #2
 8005c8e:	61bb      	str	r3, [r7, #24]
 8005c90:	e007      	b.n	8005ca2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	781a      	ldrb	r2, [r3, #0]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	3b01      	subs	r3, #1
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1c8      	bne.n	8005c52 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	9300      	str	r3, [sp, #0]
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	2140      	movs	r1, #64	@ 0x40
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	f000 fc2c 	bl	8006528 <UART_WaitOnFlagUntilTimeout>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d005      	beq.n	8005ce2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2220      	movs	r2, #32
 8005cda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e006      	b.n	8005cf0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2220      	movs	r2, #32
 8005ce6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005cea:	2300      	movs	r3, #0
 8005cec:	e000      	b.n	8005cf0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005cee:	2302      	movs	r3, #2
  }
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3720      	adds	r7, #32
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cfc:	b08c      	sub	sp, #48	@ 0x30
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d02:	2300      	movs	r3, #0
 8005d04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	689a      	ldr	r2, [r3, #8]
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	431a      	orrs	r2, r3
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	431a      	orrs	r2, r3
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	69db      	ldr	r3, [r3, #28]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	4bab      	ldr	r3, [pc, #684]	@ (8005fd4 <UART_SetConfig+0x2dc>)
 8005d28:	4013      	ands	r3, r2
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	6812      	ldr	r2, [r2, #0]
 8005d2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d30:	430b      	orrs	r3, r1
 8005d32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	68da      	ldr	r2, [r3, #12]
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	430a      	orrs	r2, r1
 8005d48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4aa0      	ldr	r2, [pc, #640]	@ (8005fd8 <UART_SetConfig+0x2e0>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d004      	beq.n	8005d64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d60:	4313      	orrs	r3, r2
 8005d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005d6e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	6812      	ldr	r2, [r2, #0]
 8005d76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d78:	430b      	orrs	r3, r1
 8005d7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d82:	f023 010f 	bic.w	r1, r3, #15
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a91      	ldr	r2, [pc, #580]	@ (8005fdc <UART_SetConfig+0x2e4>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d125      	bne.n	8005de8 <UART_SetConfig+0xf0>
 8005d9c:	4b90      	ldr	r3, [pc, #576]	@ (8005fe0 <UART_SetConfig+0x2e8>)
 8005d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005da2:	f003 0303 	and.w	r3, r3, #3
 8005da6:	2b03      	cmp	r3, #3
 8005da8:	d81a      	bhi.n	8005de0 <UART_SetConfig+0xe8>
 8005daa:	a201      	add	r2, pc, #4	@ (adr r2, 8005db0 <UART_SetConfig+0xb8>)
 8005dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db0:	08005dc1 	.word	0x08005dc1
 8005db4:	08005dd1 	.word	0x08005dd1
 8005db8:	08005dc9 	.word	0x08005dc9
 8005dbc:	08005dd9 	.word	0x08005dd9
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dc6:	e0d6      	b.n	8005f76 <UART_SetConfig+0x27e>
 8005dc8:	2302      	movs	r3, #2
 8005dca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dce:	e0d2      	b.n	8005f76 <UART_SetConfig+0x27e>
 8005dd0:	2304      	movs	r3, #4
 8005dd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dd6:	e0ce      	b.n	8005f76 <UART_SetConfig+0x27e>
 8005dd8:	2308      	movs	r3, #8
 8005dda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dde:	e0ca      	b.n	8005f76 <UART_SetConfig+0x27e>
 8005de0:	2310      	movs	r3, #16
 8005de2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005de6:	e0c6      	b.n	8005f76 <UART_SetConfig+0x27e>
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a7d      	ldr	r2, [pc, #500]	@ (8005fe4 <UART_SetConfig+0x2ec>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d138      	bne.n	8005e64 <UART_SetConfig+0x16c>
 8005df2:	4b7b      	ldr	r3, [pc, #492]	@ (8005fe0 <UART_SetConfig+0x2e8>)
 8005df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005df8:	f003 030c 	and.w	r3, r3, #12
 8005dfc:	2b0c      	cmp	r3, #12
 8005dfe:	d82d      	bhi.n	8005e5c <UART_SetConfig+0x164>
 8005e00:	a201      	add	r2, pc, #4	@ (adr r2, 8005e08 <UART_SetConfig+0x110>)
 8005e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e06:	bf00      	nop
 8005e08:	08005e3d 	.word	0x08005e3d
 8005e0c:	08005e5d 	.word	0x08005e5d
 8005e10:	08005e5d 	.word	0x08005e5d
 8005e14:	08005e5d 	.word	0x08005e5d
 8005e18:	08005e4d 	.word	0x08005e4d
 8005e1c:	08005e5d 	.word	0x08005e5d
 8005e20:	08005e5d 	.word	0x08005e5d
 8005e24:	08005e5d 	.word	0x08005e5d
 8005e28:	08005e45 	.word	0x08005e45
 8005e2c:	08005e5d 	.word	0x08005e5d
 8005e30:	08005e5d 	.word	0x08005e5d
 8005e34:	08005e5d 	.word	0x08005e5d
 8005e38:	08005e55 	.word	0x08005e55
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e42:	e098      	b.n	8005f76 <UART_SetConfig+0x27e>
 8005e44:	2302      	movs	r3, #2
 8005e46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e4a:	e094      	b.n	8005f76 <UART_SetConfig+0x27e>
 8005e4c:	2304      	movs	r3, #4
 8005e4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e52:	e090      	b.n	8005f76 <UART_SetConfig+0x27e>
 8005e54:	2308      	movs	r3, #8
 8005e56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e5a:	e08c      	b.n	8005f76 <UART_SetConfig+0x27e>
 8005e5c:	2310      	movs	r3, #16
 8005e5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e62:	e088      	b.n	8005f76 <UART_SetConfig+0x27e>
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a5f      	ldr	r2, [pc, #380]	@ (8005fe8 <UART_SetConfig+0x2f0>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d125      	bne.n	8005eba <UART_SetConfig+0x1c2>
 8005e6e:	4b5c      	ldr	r3, [pc, #368]	@ (8005fe0 <UART_SetConfig+0x2e8>)
 8005e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e74:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005e78:	2b30      	cmp	r3, #48	@ 0x30
 8005e7a:	d016      	beq.n	8005eaa <UART_SetConfig+0x1b2>
 8005e7c:	2b30      	cmp	r3, #48	@ 0x30
 8005e7e:	d818      	bhi.n	8005eb2 <UART_SetConfig+0x1ba>
 8005e80:	2b20      	cmp	r3, #32
 8005e82:	d00a      	beq.n	8005e9a <UART_SetConfig+0x1a2>
 8005e84:	2b20      	cmp	r3, #32
 8005e86:	d814      	bhi.n	8005eb2 <UART_SetConfig+0x1ba>
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d002      	beq.n	8005e92 <UART_SetConfig+0x19a>
 8005e8c:	2b10      	cmp	r3, #16
 8005e8e:	d008      	beq.n	8005ea2 <UART_SetConfig+0x1aa>
 8005e90:	e00f      	b.n	8005eb2 <UART_SetConfig+0x1ba>
 8005e92:	2300      	movs	r3, #0
 8005e94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e98:	e06d      	b.n	8005f76 <UART_SetConfig+0x27e>
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ea0:	e069      	b.n	8005f76 <UART_SetConfig+0x27e>
 8005ea2:	2304      	movs	r3, #4
 8005ea4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ea8:	e065      	b.n	8005f76 <UART_SetConfig+0x27e>
 8005eaa:	2308      	movs	r3, #8
 8005eac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005eb0:	e061      	b.n	8005f76 <UART_SetConfig+0x27e>
 8005eb2:	2310      	movs	r3, #16
 8005eb4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005eb8:	e05d      	b.n	8005f76 <UART_SetConfig+0x27e>
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a4b      	ldr	r2, [pc, #300]	@ (8005fec <UART_SetConfig+0x2f4>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d125      	bne.n	8005f10 <UART_SetConfig+0x218>
 8005ec4:	4b46      	ldr	r3, [pc, #280]	@ (8005fe0 <UART_SetConfig+0x2e8>)
 8005ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005ece:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ed0:	d016      	beq.n	8005f00 <UART_SetConfig+0x208>
 8005ed2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ed4:	d818      	bhi.n	8005f08 <UART_SetConfig+0x210>
 8005ed6:	2b80      	cmp	r3, #128	@ 0x80
 8005ed8:	d00a      	beq.n	8005ef0 <UART_SetConfig+0x1f8>
 8005eda:	2b80      	cmp	r3, #128	@ 0x80
 8005edc:	d814      	bhi.n	8005f08 <UART_SetConfig+0x210>
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d002      	beq.n	8005ee8 <UART_SetConfig+0x1f0>
 8005ee2:	2b40      	cmp	r3, #64	@ 0x40
 8005ee4:	d008      	beq.n	8005ef8 <UART_SetConfig+0x200>
 8005ee6:	e00f      	b.n	8005f08 <UART_SetConfig+0x210>
 8005ee8:	2300      	movs	r3, #0
 8005eea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005eee:	e042      	b.n	8005f76 <UART_SetConfig+0x27e>
 8005ef0:	2302      	movs	r3, #2
 8005ef2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ef6:	e03e      	b.n	8005f76 <UART_SetConfig+0x27e>
 8005ef8:	2304      	movs	r3, #4
 8005efa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005efe:	e03a      	b.n	8005f76 <UART_SetConfig+0x27e>
 8005f00:	2308      	movs	r3, #8
 8005f02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f06:	e036      	b.n	8005f76 <UART_SetConfig+0x27e>
 8005f08:	2310      	movs	r3, #16
 8005f0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f0e:	e032      	b.n	8005f76 <UART_SetConfig+0x27e>
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a30      	ldr	r2, [pc, #192]	@ (8005fd8 <UART_SetConfig+0x2e0>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d12a      	bne.n	8005f70 <UART_SetConfig+0x278>
 8005f1a:	4b31      	ldr	r3, [pc, #196]	@ (8005fe0 <UART_SetConfig+0x2e8>)
 8005f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f20:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005f24:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f28:	d01a      	beq.n	8005f60 <UART_SetConfig+0x268>
 8005f2a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f2e:	d81b      	bhi.n	8005f68 <UART_SetConfig+0x270>
 8005f30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f34:	d00c      	beq.n	8005f50 <UART_SetConfig+0x258>
 8005f36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f3a:	d815      	bhi.n	8005f68 <UART_SetConfig+0x270>
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d003      	beq.n	8005f48 <UART_SetConfig+0x250>
 8005f40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f44:	d008      	beq.n	8005f58 <UART_SetConfig+0x260>
 8005f46:	e00f      	b.n	8005f68 <UART_SetConfig+0x270>
 8005f48:	2300      	movs	r3, #0
 8005f4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f4e:	e012      	b.n	8005f76 <UART_SetConfig+0x27e>
 8005f50:	2302      	movs	r3, #2
 8005f52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f56:	e00e      	b.n	8005f76 <UART_SetConfig+0x27e>
 8005f58:	2304      	movs	r3, #4
 8005f5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f5e:	e00a      	b.n	8005f76 <UART_SetConfig+0x27e>
 8005f60:	2308      	movs	r3, #8
 8005f62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f66:	e006      	b.n	8005f76 <UART_SetConfig+0x27e>
 8005f68:	2310      	movs	r3, #16
 8005f6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f6e:	e002      	b.n	8005f76 <UART_SetConfig+0x27e>
 8005f70:	2310      	movs	r3, #16
 8005f72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a17      	ldr	r2, [pc, #92]	@ (8005fd8 <UART_SetConfig+0x2e0>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	f040 80a8 	bne.w	80060d2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f82:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005f86:	2b08      	cmp	r3, #8
 8005f88:	d834      	bhi.n	8005ff4 <UART_SetConfig+0x2fc>
 8005f8a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f90 <UART_SetConfig+0x298>)
 8005f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f90:	08005fb5 	.word	0x08005fb5
 8005f94:	08005ff5 	.word	0x08005ff5
 8005f98:	08005fbd 	.word	0x08005fbd
 8005f9c:	08005ff5 	.word	0x08005ff5
 8005fa0:	08005fc3 	.word	0x08005fc3
 8005fa4:	08005ff5 	.word	0x08005ff5
 8005fa8:	08005ff5 	.word	0x08005ff5
 8005fac:	08005ff5 	.word	0x08005ff5
 8005fb0:	08005fcb 	.word	0x08005fcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fb4:	f7fd ff42 	bl	8003e3c <HAL_RCC_GetPCLK1Freq>
 8005fb8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005fba:	e021      	b.n	8006000 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8005ff0 <UART_SetConfig+0x2f8>)
 8005fbe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005fc0:	e01e      	b.n	8006000 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fc2:	f7fd fecd 	bl	8003d60 <HAL_RCC_GetSysClockFreq>
 8005fc6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005fc8:	e01a      	b.n	8006000 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005fd0:	e016      	b.n	8006000 <UART_SetConfig+0x308>
 8005fd2:	bf00      	nop
 8005fd4:	cfff69f3 	.word	0xcfff69f3
 8005fd8:	40008000 	.word	0x40008000
 8005fdc:	40013800 	.word	0x40013800
 8005fe0:	40021000 	.word	0x40021000
 8005fe4:	40004400 	.word	0x40004400
 8005fe8:	40004800 	.word	0x40004800
 8005fec:	40004c00 	.word	0x40004c00
 8005ff0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005ffe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006002:	2b00      	cmp	r3, #0
 8006004:	f000 812a 	beq.w	800625c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800600c:	4a9e      	ldr	r2, [pc, #632]	@ (8006288 <UART_SetConfig+0x590>)
 800600e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006012:	461a      	mov	r2, r3
 8006014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006016:	fbb3 f3f2 	udiv	r3, r3, r2
 800601a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	4613      	mov	r3, r2
 8006022:	005b      	lsls	r3, r3, #1
 8006024:	4413      	add	r3, r2
 8006026:	69ba      	ldr	r2, [r7, #24]
 8006028:	429a      	cmp	r2, r3
 800602a:	d305      	bcc.n	8006038 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006032:	69ba      	ldr	r2, [r7, #24]
 8006034:	429a      	cmp	r2, r3
 8006036:	d903      	bls.n	8006040 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800603e:	e10d      	b.n	800625c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006042:	2200      	movs	r2, #0
 8006044:	60bb      	str	r3, [r7, #8]
 8006046:	60fa      	str	r2, [r7, #12]
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800604c:	4a8e      	ldr	r2, [pc, #568]	@ (8006288 <UART_SetConfig+0x590>)
 800604e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006052:	b29b      	uxth	r3, r3
 8006054:	2200      	movs	r2, #0
 8006056:	603b      	str	r3, [r7, #0]
 8006058:	607a      	str	r2, [r7, #4]
 800605a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800605e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006062:	f7fa fd23 	bl	8000aac <__aeabi_uldivmod>
 8006066:	4602      	mov	r2, r0
 8006068:	460b      	mov	r3, r1
 800606a:	4610      	mov	r0, r2
 800606c:	4619      	mov	r1, r3
 800606e:	f04f 0200 	mov.w	r2, #0
 8006072:	f04f 0300 	mov.w	r3, #0
 8006076:	020b      	lsls	r3, r1, #8
 8006078:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800607c:	0202      	lsls	r2, r0, #8
 800607e:	6979      	ldr	r1, [r7, #20]
 8006080:	6849      	ldr	r1, [r1, #4]
 8006082:	0849      	lsrs	r1, r1, #1
 8006084:	2000      	movs	r0, #0
 8006086:	460c      	mov	r4, r1
 8006088:	4605      	mov	r5, r0
 800608a:	eb12 0804 	adds.w	r8, r2, r4
 800608e:	eb43 0905 	adc.w	r9, r3, r5
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	469a      	mov	sl, r3
 800609a:	4693      	mov	fp, r2
 800609c:	4652      	mov	r2, sl
 800609e:	465b      	mov	r3, fp
 80060a0:	4640      	mov	r0, r8
 80060a2:	4649      	mov	r1, r9
 80060a4:	f7fa fd02 	bl	8000aac <__aeabi_uldivmod>
 80060a8:	4602      	mov	r2, r0
 80060aa:	460b      	mov	r3, r1
 80060ac:	4613      	mov	r3, r2
 80060ae:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060b0:	6a3b      	ldr	r3, [r7, #32]
 80060b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060b6:	d308      	bcc.n	80060ca <UART_SetConfig+0x3d2>
 80060b8:	6a3b      	ldr	r3, [r7, #32]
 80060ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060be:	d204      	bcs.n	80060ca <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6a3a      	ldr	r2, [r7, #32]
 80060c6:	60da      	str	r2, [r3, #12]
 80060c8:	e0c8      	b.n	800625c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80060d0:	e0c4      	b.n	800625c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	69db      	ldr	r3, [r3, #28]
 80060d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060da:	d167      	bne.n	80061ac <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80060dc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80060e0:	2b08      	cmp	r3, #8
 80060e2:	d828      	bhi.n	8006136 <UART_SetConfig+0x43e>
 80060e4:	a201      	add	r2, pc, #4	@ (adr r2, 80060ec <UART_SetConfig+0x3f4>)
 80060e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ea:	bf00      	nop
 80060ec:	08006111 	.word	0x08006111
 80060f0:	08006119 	.word	0x08006119
 80060f4:	08006121 	.word	0x08006121
 80060f8:	08006137 	.word	0x08006137
 80060fc:	08006127 	.word	0x08006127
 8006100:	08006137 	.word	0x08006137
 8006104:	08006137 	.word	0x08006137
 8006108:	08006137 	.word	0x08006137
 800610c:	0800612f 	.word	0x0800612f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006110:	f7fd fe94 	bl	8003e3c <HAL_RCC_GetPCLK1Freq>
 8006114:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006116:	e014      	b.n	8006142 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006118:	f7fd fea6 	bl	8003e68 <HAL_RCC_GetPCLK2Freq>
 800611c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800611e:	e010      	b.n	8006142 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006120:	4b5a      	ldr	r3, [pc, #360]	@ (800628c <UART_SetConfig+0x594>)
 8006122:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006124:	e00d      	b.n	8006142 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006126:	f7fd fe1b 	bl	8003d60 <HAL_RCC_GetSysClockFreq>
 800612a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800612c:	e009      	b.n	8006142 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800612e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006132:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006134:	e005      	b.n	8006142 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006136:	2300      	movs	r3, #0
 8006138:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006140:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006144:	2b00      	cmp	r3, #0
 8006146:	f000 8089 	beq.w	800625c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800614e:	4a4e      	ldr	r2, [pc, #312]	@ (8006288 <UART_SetConfig+0x590>)
 8006150:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006154:	461a      	mov	r2, r3
 8006156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006158:	fbb3 f3f2 	udiv	r3, r3, r2
 800615c:	005a      	lsls	r2, r3, #1
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	085b      	lsrs	r3, r3, #1
 8006164:	441a      	add	r2, r3
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	fbb2 f3f3 	udiv	r3, r2, r3
 800616e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006170:	6a3b      	ldr	r3, [r7, #32]
 8006172:	2b0f      	cmp	r3, #15
 8006174:	d916      	bls.n	80061a4 <UART_SetConfig+0x4ac>
 8006176:	6a3b      	ldr	r3, [r7, #32]
 8006178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800617c:	d212      	bcs.n	80061a4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800617e:	6a3b      	ldr	r3, [r7, #32]
 8006180:	b29b      	uxth	r3, r3
 8006182:	f023 030f 	bic.w	r3, r3, #15
 8006186:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006188:	6a3b      	ldr	r3, [r7, #32]
 800618a:	085b      	lsrs	r3, r3, #1
 800618c:	b29b      	uxth	r3, r3
 800618e:	f003 0307 	and.w	r3, r3, #7
 8006192:	b29a      	uxth	r2, r3
 8006194:	8bfb      	ldrh	r3, [r7, #30]
 8006196:	4313      	orrs	r3, r2
 8006198:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	8bfa      	ldrh	r2, [r7, #30]
 80061a0:	60da      	str	r2, [r3, #12]
 80061a2:	e05b      	b.n	800625c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80061aa:	e057      	b.n	800625c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061ac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80061b0:	2b08      	cmp	r3, #8
 80061b2:	d828      	bhi.n	8006206 <UART_SetConfig+0x50e>
 80061b4:	a201      	add	r2, pc, #4	@ (adr r2, 80061bc <UART_SetConfig+0x4c4>)
 80061b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ba:	bf00      	nop
 80061bc:	080061e1 	.word	0x080061e1
 80061c0:	080061e9 	.word	0x080061e9
 80061c4:	080061f1 	.word	0x080061f1
 80061c8:	08006207 	.word	0x08006207
 80061cc:	080061f7 	.word	0x080061f7
 80061d0:	08006207 	.word	0x08006207
 80061d4:	08006207 	.word	0x08006207
 80061d8:	08006207 	.word	0x08006207
 80061dc:	080061ff 	.word	0x080061ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061e0:	f7fd fe2c 	bl	8003e3c <HAL_RCC_GetPCLK1Freq>
 80061e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80061e6:	e014      	b.n	8006212 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061e8:	f7fd fe3e 	bl	8003e68 <HAL_RCC_GetPCLK2Freq>
 80061ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80061ee:	e010      	b.n	8006212 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061f0:	4b26      	ldr	r3, [pc, #152]	@ (800628c <UART_SetConfig+0x594>)
 80061f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80061f4:	e00d      	b.n	8006212 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061f6:	f7fd fdb3 	bl	8003d60 <HAL_RCC_GetSysClockFreq>
 80061fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80061fc:	e009      	b.n	8006212 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006202:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006204:	e005      	b.n	8006212 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8006206:	2300      	movs	r3, #0
 8006208:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006210:	bf00      	nop
    }

    if (pclk != 0U)
 8006212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006214:	2b00      	cmp	r3, #0
 8006216:	d021      	beq.n	800625c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800621c:	4a1a      	ldr	r2, [pc, #104]	@ (8006288 <UART_SetConfig+0x590>)
 800621e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006222:	461a      	mov	r2, r3
 8006224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006226:	fbb3 f2f2 	udiv	r2, r3, r2
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	085b      	lsrs	r3, r3, #1
 8006230:	441a      	add	r2, r3
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	fbb2 f3f3 	udiv	r3, r2, r3
 800623a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800623c:	6a3b      	ldr	r3, [r7, #32]
 800623e:	2b0f      	cmp	r3, #15
 8006240:	d909      	bls.n	8006256 <UART_SetConfig+0x55e>
 8006242:	6a3b      	ldr	r3, [r7, #32]
 8006244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006248:	d205      	bcs.n	8006256 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800624a:	6a3b      	ldr	r3, [r7, #32]
 800624c:	b29a      	uxth	r2, r3
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	60da      	str	r2, [r3, #12]
 8006254:	e002      	b.n	800625c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	2201      	movs	r2, #1
 8006260:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	2201      	movs	r2, #1
 8006268:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	2200      	movs	r2, #0
 8006270:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	2200      	movs	r2, #0
 8006276:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006278:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800627c:	4618      	mov	r0, r3
 800627e:	3730      	adds	r7, #48	@ 0x30
 8006280:	46bd      	mov	sp, r7
 8006282:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006286:	bf00      	nop
 8006288:	0800a448 	.word	0x0800a448
 800628c:	00f42400 	.word	0x00f42400

08006290 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800629c:	f003 0308 	and.w	r3, r3, #8
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00a      	beq.n	80062ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	430a      	orrs	r2, r1
 80062b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062be:	f003 0301 	and.w	r3, r3, #1
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00a      	beq.n	80062dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	430a      	orrs	r2, r1
 80062da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062e0:	f003 0302 	and.w	r3, r3, #2
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00a      	beq.n	80062fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	430a      	orrs	r2, r1
 80062fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006302:	f003 0304 	and.w	r3, r3, #4
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00a      	beq.n	8006320 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	430a      	orrs	r2, r1
 800631e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006324:	f003 0310 	and.w	r3, r3, #16
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00a      	beq.n	8006342 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	430a      	orrs	r2, r1
 8006340:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006346:	f003 0320 	and.w	r3, r3, #32
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00a      	beq.n	8006364 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	430a      	orrs	r2, r1
 8006362:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800636c:	2b00      	cmp	r3, #0
 800636e:	d01a      	beq.n	80063a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	430a      	orrs	r2, r1
 8006384:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800638a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800638e:	d10a      	bne.n	80063a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	430a      	orrs	r2, r1
 80063a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00a      	beq.n	80063c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	430a      	orrs	r2, r1
 80063c6:	605a      	str	r2, [r3, #4]
  }
}
 80063c8:	bf00      	nop
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b098      	sub	sp, #96	@ 0x60
 80063d8:	af02      	add	r7, sp, #8
 80063da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063e4:	f7fb fcd6 	bl	8001d94 <HAL_GetTick>
 80063e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0308 	and.w	r3, r3, #8
 80063f4:	2b08      	cmp	r3, #8
 80063f6:	d12f      	bne.n	8006458 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80063fc:	9300      	str	r3, [sp, #0]
 80063fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006400:	2200      	movs	r2, #0
 8006402:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 f88e 	bl	8006528 <UART_WaitOnFlagUntilTimeout>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d022      	beq.n	8006458 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800641a:	e853 3f00 	ldrex	r3, [r3]
 800641e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006422:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006426:	653b      	str	r3, [r7, #80]	@ 0x50
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	461a      	mov	r2, r3
 800642e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006430:	647b      	str	r3, [r7, #68]	@ 0x44
 8006432:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006434:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006436:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006438:	e841 2300 	strex	r3, r2, [r1]
 800643c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800643e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1e6      	bne.n	8006412 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2220      	movs	r2, #32
 8006448:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006454:	2303      	movs	r3, #3
 8006456:	e063      	b.n	8006520 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0304 	and.w	r3, r3, #4
 8006462:	2b04      	cmp	r3, #4
 8006464:	d149      	bne.n	80064fa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006466:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800646a:	9300      	str	r3, [sp, #0]
 800646c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800646e:	2200      	movs	r2, #0
 8006470:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 f857 	bl	8006528 <UART_WaitOnFlagUntilTimeout>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d03c      	beq.n	80064fa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006488:	e853 3f00 	ldrex	r3, [r3]
 800648c:	623b      	str	r3, [r7, #32]
   return(result);
 800648e:	6a3b      	ldr	r3, [r7, #32]
 8006490:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006494:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	461a      	mov	r2, r3
 800649c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800649e:	633b      	str	r3, [r7, #48]	@ 0x30
 80064a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064a6:	e841 2300 	strex	r3, r2, [r1]
 80064aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80064ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1e6      	bne.n	8006480 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	3308      	adds	r3, #8
 80064b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	e853 3f00 	ldrex	r3, [r3]
 80064c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f023 0301 	bic.w	r3, r3, #1
 80064c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	3308      	adds	r3, #8
 80064d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064d2:	61fa      	str	r2, [r7, #28]
 80064d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d6:	69b9      	ldr	r1, [r7, #24]
 80064d8:	69fa      	ldr	r2, [r7, #28]
 80064da:	e841 2300 	strex	r3, r2, [r1]
 80064de:	617b      	str	r3, [r7, #20]
   return(result);
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1e5      	bne.n	80064b2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2220      	movs	r2, #32
 80064ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e012      	b.n	8006520 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2220      	movs	r2, #32
 80064fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2220      	movs	r2, #32
 8006506:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	3758      	adds	r7, #88	@ 0x58
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	603b      	str	r3, [r7, #0]
 8006534:	4613      	mov	r3, r2
 8006536:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006538:	e04f      	b.n	80065da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006540:	d04b      	beq.n	80065da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006542:	f7fb fc27 	bl	8001d94 <HAL_GetTick>
 8006546:	4602      	mov	r2, r0
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	69ba      	ldr	r2, [r7, #24]
 800654e:	429a      	cmp	r2, r3
 8006550:	d302      	bcc.n	8006558 <UART_WaitOnFlagUntilTimeout+0x30>
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d101      	bne.n	800655c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	e04e      	b.n	80065fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0304 	and.w	r3, r3, #4
 8006566:	2b00      	cmp	r3, #0
 8006568:	d037      	beq.n	80065da <UART_WaitOnFlagUntilTimeout+0xb2>
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	2b80      	cmp	r3, #128	@ 0x80
 800656e:	d034      	beq.n	80065da <UART_WaitOnFlagUntilTimeout+0xb2>
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	2b40      	cmp	r3, #64	@ 0x40
 8006574:	d031      	beq.n	80065da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	69db      	ldr	r3, [r3, #28]
 800657c:	f003 0308 	and.w	r3, r3, #8
 8006580:	2b08      	cmp	r3, #8
 8006582:	d110      	bne.n	80065a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2208      	movs	r2, #8
 800658a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f000 f838 	bl	8006602 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2208      	movs	r2, #8
 8006596:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e029      	b.n	80065fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	69db      	ldr	r3, [r3, #28]
 80065ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065b4:	d111      	bne.n	80065da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80065be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f000 f81e 	bl	8006602 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2220      	movs	r2, #32
 80065ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e00f      	b.n	80065fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	69da      	ldr	r2, [r3, #28]
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	4013      	ands	r3, r2
 80065e4:	68ba      	ldr	r2, [r7, #8]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	bf0c      	ite	eq
 80065ea:	2301      	moveq	r3, #1
 80065ec:	2300      	movne	r3, #0
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	461a      	mov	r2, r3
 80065f2:	79fb      	ldrb	r3, [r7, #7]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d0a0      	beq.n	800653a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006602:	b480      	push	{r7}
 8006604:	b095      	sub	sp, #84	@ 0x54
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006612:	e853 3f00 	ldrex	r3, [r3]
 8006616:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800661a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800661e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	461a      	mov	r2, r3
 8006626:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006628:	643b      	str	r3, [r7, #64]	@ 0x40
 800662a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800662e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006630:	e841 2300 	strex	r3, r2, [r1]
 8006634:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1e6      	bne.n	800660a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	3308      	adds	r3, #8
 8006642:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006644:	6a3b      	ldr	r3, [r7, #32]
 8006646:	e853 3f00 	ldrex	r3, [r3]
 800664a:	61fb      	str	r3, [r7, #28]
   return(result);
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006652:	f023 0301 	bic.w	r3, r3, #1
 8006656:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	3308      	adds	r3, #8
 800665e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006660:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006662:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006664:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006666:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006668:	e841 2300 	strex	r3, r2, [r1]
 800666c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800666e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1e3      	bne.n	800663c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006678:	2b01      	cmp	r3, #1
 800667a:	d118      	bne.n	80066ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	e853 3f00 	ldrex	r3, [r3]
 8006688:	60bb      	str	r3, [r7, #8]
   return(result);
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	f023 0310 	bic.w	r3, r3, #16
 8006690:	647b      	str	r3, [r7, #68]	@ 0x44
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	461a      	mov	r2, r3
 8006698:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800669a:	61bb      	str	r3, [r7, #24]
 800669c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669e:	6979      	ldr	r1, [r7, #20]
 80066a0:	69ba      	ldr	r2, [r7, #24]
 80066a2:	e841 2300 	strex	r3, r2, [r1]
 80066a6:	613b      	str	r3, [r7, #16]
   return(result);
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1e6      	bne.n	800667c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2220      	movs	r2, #32
 80066b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80066c2:	bf00      	nop
 80066c4:	3754      	adds	r7, #84	@ 0x54
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80066ce:	b480      	push	{r7}
 80066d0:	b085      	sub	sp, #20
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d101      	bne.n	80066e4 <HAL_UARTEx_DisableFifoMode+0x16>
 80066e0:	2302      	movs	r3, #2
 80066e2:	e027      	b.n	8006734 <HAL_UARTEx_DisableFifoMode+0x66>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2224      	movs	r2, #36	@ 0x24
 80066f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f022 0201 	bic.w	r2, r2, #1
 800670a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006712:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2220      	movs	r2, #32
 8006726:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006732:	2300      	movs	r3, #0
}
 8006734:	4618      	mov	r0, r3
 8006736:	3714      	adds	r7, #20
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006750:	2b01      	cmp	r3, #1
 8006752:	d101      	bne.n	8006758 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006754:	2302      	movs	r3, #2
 8006756:	e02d      	b.n	80067b4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2224      	movs	r2, #36	@ 0x24
 8006764:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f022 0201 	bic.w	r2, r2, #1
 800677e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	683a      	ldr	r2, [r7, #0]
 8006790:	430a      	orrs	r2, r1
 8006792:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 f84f 	bl	8006838 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2220      	movs	r2, #32
 80067a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3710      	adds	r7, #16
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d101      	bne.n	80067d4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80067d0:	2302      	movs	r3, #2
 80067d2:	e02d      	b.n	8006830 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2224      	movs	r2, #36	@ 0x24
 80067e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f022 0201 	bic.w	r2, r2, #1
 80067fa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	683a      	ldr	r2, [r7, #0]
 800680c:	430a      	orrs	r2, r1
 800680e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 f811 	bl	8006838 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2220      	movs	r2, #32
 8006822:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3710      	adds	r7, #16
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006844:	2b00      	cmp	r3, #0
 8006846:	d108      	bne.n	800685a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006858:	e031      	b.n	80068be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800685a:	2308      	movs	r3, #8
 800685c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800685e:	2308      	movs	r3, #8
 8006860:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	0e5b      	lsrs	r3, r3, #25
 800686a:	b2db      	uxtb	r3, r3
 800686c:	f003 0307 	and.w	r3, r3, #7
 8006870:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	0f5b      	lsrs	r3, r3, #29
 800687a:	b2db      	uxtb	r3, r3
 800687c:	f003 0307 	and.w	r3, r3, #7
 8006880:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006882:	7bbb      	ldrb	r3, [r7, #14]
 8006884:	7b3a      	ldrb	r2, [r7, #12]
 8006886:	4911      	ldr	r1, [pc, #68]	@ (80068cc <UARTEx_SetNbDataToProcess+0x94>)
 8006888:	5c8a      	ldrb	r2, [r1, r2]
 800688a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800688e:	7b3a      	ldrb	r2, [r7, #12]
 8006890:	490f      	ldr	r1, [pc, #60]	@ (80068d0 <UARTEx_SetNbDataToProcess+0x98>)
 8006892:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006894:	fb93 f3f2 	sdiv	r3, r3, r2
 8006898:	b29a      	uxth	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80068a0:	7bfb      	ldrb	r3, [r7, #15]
 80068a2:	7b7a      	ldrb	r2, [r7, #13]
 80068a4:	4909      	ldr	r1, [pc, #36]	@ (80068cc <UARTEx_SetNbDataToProcess+0x94>)
 80068a6:	5c8a      	ldrb	r2, [r1, r2]
 80068a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80068ac:	7b7a      	ldrb	r2, [r7, #13]
 80068ae:	4908      	ldr	r1, [pc, #32]	@ (80068d0 <UARTEx_SetNbDataToProcess+0x98>)
 80068b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80068b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80068be:	bf00      	nop
 80068c0:	3714      	adds	r7, #20
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	0800a460 	.word	0x0800a460
 80068d0:	0800a468 	.word	0x0800a468

080068d4 <_ZN9ChampiCanC1EP19FDCAN_HandleTypeDef>:

#include <string.h>
#include <ChampiCan.h>


ChampiCan::ChampiCan(FDCAN_HandleTypeDef *handle_fdcan) {
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
 80068de:	4a15      	ldr	r2, [pc, #84]	@ (8006934 <_ZN9ChampiCanC1EP19FDCAN_HandleTypeDef+0x60>)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	601a      	str	r2, [r3, #0]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	605a      	str	r2, [r3, #4]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	3308      	adds	r3, #8
 80068ee:	2224      	movs	r2, #36	@ 0x24
 80068f0:	2100      	movs	r1, #0
 80068f2:	4618      	mov	r0, r3
 80068f4:	f002 ff42 	bl	800977c <memset>

	handle_fdcan_ = handle_fdcan;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	683a      	ldr	r2, [r7, #0]
 80068fc:	605a      	str	r2, [r3, #4]

	tx_header_.IdType = FDCAN_STANDARD_ID;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	60da      	str	r2, [r3, #12]
	tx_header_.TxFrameType = FDCAN_DATA_FRAME;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	611a      	str	r2, [r3, #16]
	tx_header_.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	619a      	str	r2, [r3, #24]
	tx_header_.BitRateSwitch = FDCAN_BRS_OFF;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	61da      	str	r2, [r3, #28]
	tx_header_.FDFormat = FDCAN_CLASSIC_CAN;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	621a      	str	r2, [r3, #32]
	tx_header_.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	625a      	str	r2, [r3, #36]	@ 0x24
	tx_header_.MessageMarker = 0;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	629a      	str	r2, [r3, #40]	@ 0x28

}
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4618      	mov	r0, r3
 800692c:	3708      	adds	r7, #8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	0800a478 	.word	0x0800a478

08006938 <_ZN9ChampiCanC1Ev>:

ChampiCan::ChampiCan() = default;
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	4a08      	ldr	r2, [pc, #32]	@ (8006964 <_ZN9ChampiCanC1Ev+0x2c>)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	601a      	str	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	605a      	str	r2, [r3, #4]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	3308      	adds	r3, #8
 8006950:	2224      	movs	r2, #36	@ 0x24
 8006952:	2100      	movs	r1, #0
 8006954:	4618      	mov	r0, r3
 8006956:	f002 ff11 	bl	800977c <memset>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4618      	mov	r0, r3
 800695e:	3708      	adds	r7, #8
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	0800a478 	.word	0x0800a478

08006968 <_ZN9ChampiCan5startEv>:

int ChampiCan::start() {
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
	/* Start the FDCAN module */
	if (HAL_FDCAN_Start(handle_fdcan_) != HAL_OK)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	4618      	mov	r0, r3
 8006976:	f7fb ff5d 	bl	8002834 <HAL_FDCAN_Start>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	bf14      	ite	ne
 8006980:	2301      	movne	r3, #1
 8006982:	2300      	moveq	r3, #0
 8006984:	b2db      	uxtb	r3, r3
 8006986:	2b00      	cmp	r3, #0
 8006988:	d001      	beq.n	800698e <_ZN9ChampiCan5startEv+0x26>
	{
		return 1;
 800698a:	2301      	movs	r3, #1
 800698c:	e011      	b.n	80069b2 <_ZN9ChampiCan5startEv+0x4a>
	}
	if (HAL_FDCAN_ActivateNotification(handle_fdcan_, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	2101      	movs	r1, #1
 8006996:	4618      	mov	r0, r3
 8006998:	f7fc f87c 	bl	8002a94 <HAL_FDCAN_ActivateNotification>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	bf14      	ite	ne
 80069a2:	2301      	movne	r3, #1
 80069a4:	2300      	moveq	r3, #0
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d001      	beq.n	80069b0 <_ZN9ChampiCan5startEv+0x48>
	{
		return 1;
 80069ac:	2301      	movs	r3, #1
 80069ae:	e000      	b.n	80069b2 <_ZN9ChampiCan5startEv+0x4a>
	}
	return 0;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3708      	adds	r7, #8
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
	...

080069bc <_ZN9ChampiCanD1Ev>:
    msg_number = (msg_number + 1) % 4;
    return 0;
}


ChampiCan::~ChampiCan() = default;
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	4a04      	ldr	r2, [pc, #16]	@ (80069d8 <_ZN9ChampiCanD1Ev+0x1c>)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	601a      	str	r2, [r3, #0]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4618      	mov	r0, r3
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr
 80069d8:	0800a478 	.word	0x0800a478

080069dc <_ZN9ChampiCanD0Ev>:
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f7ff ffe9 	bl	80069bc <_ZN9ChampiCanD1Ev>
 80069ea:	212c      	movs	r1, #44	@ 0x2c
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f002 fa2b 	bl	8008e48 <_ZdlPvj>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4618      	mov	r0, r3
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <_ZN11ChampiStateC1Ev>:
 *      Author: arusso
 */

#include <ChampiState.h>

ChampiState::ChampiState() = default;
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	4a07      	ldr	r2, [pc, #28]	@ (8006a24 <_ZN11ChampiStateC1Ev+0x28>)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	601a      	str	r2, [r3, #0]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	3330      	adds	r3, #48	@ 0x30
 8006a0e:	2278      	movs	r2, #120	@ 0x78
 8006a10:	2100      	movs	r1, #0
 8006a12:	4618      	mov	r0, r3
 8006a14:	f002 feb2 	bl	800977c <memset>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3708      	adds	r7, #8
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	0800a488 	.word	0x0800a488

08006a28 <_ZN11ChampiStateD1Ev>:
    champi_can_interface_ = champi_can_interface;
    tx_period_ms_ = tx_period_ms;
    last_tx_time_ms_ = 0;
}

ChampiState::~ChampiState() = default;
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	4a04      	ldr	r2, [pc, #16]	@ (8006a44 <_ZN11ChampiStateD1Ev+0x1c>)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	601a      	str	r2, [r3, #0]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4618      	mov	r0, r3
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr
 8006a44:	0800a488 	.word	0x0800a488

08006a48 <_ZN11ChampiStateD0Ev>:
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f7ff ffe9 	bl	8006a28 <_ZN11ChampiStateD1Ev>
 8006a56:	21a8      	movs	r1, #168	@ 0xa8
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f002 f9f5 	bl	8008e48 <_ZdlPvj>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4618      	mov	r0, r3
 8006a62:	3708      	adds	r7, #8
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <_ZN17MessageRecomposerC1Ev>:
#include "MessageRecomposer.h"

#include "stdio.h"


MessageRecomposer::MessageRecomposer() {
 8006a68:	b5b0      	push	{r4, r5, r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	4a0c      	ldr	r2, [pc, #48]	@ (8006aa4 <_ZN17MessageRecomposerC1Ev+0x3c>)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	601a      	str	r2, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	332c      	adds	r3, #44	@ 0x2c
 8006a7a:	241d      	movs	r4, #29
 8006a7c:	461d      	mov	r5, r3
 8006a7e:	e004      	b.n	8006a8a <_ZN17MessageRecomposerC1Ev+0x22>
 8006a80:	4628      	mov	r0, r5
 8006a82:	f002 fa3e 	bl	8008f02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8006a86:	3c01      	subs	r4, #1
 8006a88:	3518      	adds	r5, #24
 8006a8a:	2c00      	cmp	r4, #0
 8006a8c:	daf8      	bge.n	8006a80 <_ZN17MessageRecomposerC1Ev+0x18>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 8006a94:	4618      	mov	r0, r3
 8006a96:	f002 fa34 	bl	8008f02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	// TODO Auto-generated constructor stub

}
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3708      	adds	r7, #8
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bdb0      	pop	{r4, r5, r7, pc}
 8006aa4:	0800a498 	.word	0x0800a498

08006aa8 <_ZN17MessageRecomposer9add_frameEPhh>:

void MessageRecomposer::add_frame(uint8_t *frame_data, uint8_t length) {
 8006aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006aaa:	b09b      	sub	sp, #108	@ 0x6c
 8006aac:	af02      	add	r7, sp, #8
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	71fb      	strb	r3, [r7, #7]

	int msg_number;
    int msg_size;
    int frame_index;

    decode_descriptor(frame_data, msg_number, msg_size, frame_index);
 8006ab6:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8006aba:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8006abe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006ac2:	9300      	str	r3, [sp, #0]
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	68b9      	ldr	r1, [r7, #8]
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f000 f8fe 	bl	8006cca <_ZN17MessageRecomposer17decode_descriptorEPhRiS1_S1_>

    // TODO check if the number follows the expected order (0 -> 1 -> 2 -> 3 -> 0 -> ...)
    // But it's not that easy bc what if we miss an entire message ? we would loose the 3 messages that follow it
    if(msg_number_ != msg_number) {
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	685a      	ldr	r2, [r3, #4]
 8006ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d016      	beq.n	8006b06 <_ZN17MessageRecomposer9add_frameEPhh+0x5e>
        // new message
        // printf("New message\n");
        msg_number_ = msg_number;
 8006ad8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	605a      	str	r2, [r3, #4]
        n_frames_ = msg_size;
 8006ade:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	609a      	str	r2, [r3, #8]
        for(int i=0; i<n_frames_; i++) {
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ae8:	e008      	b.n	8006afc <_ZN17MessageRecomposer9add_frameEPhh+0x54>
            frames_received_[i] = false;
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006aee:	4413      	add	r3, r2
 8006af0:	330d      	adds	r3, #13
 8006af2:	2200      	movs	r2, #0
 8006af4:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<n_frames_; i++) {
 8006af6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006af8:	3301      	adds	r3, #1
 8006afa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006b02:	429a      	cmp	r2, r3
 8006b04:	dbf1      	blt.n	8006aea <_ZN17MessageRecomposer9add_frameEPhh+0x42>
        }
    }

    frames_received_[frame_index] = true;
 8006b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	735a      	strb	r2, [r3, #13]
    msg_parts[frame_index] = std::string((char*)frame_data+2, length-2);
 8006b10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b12:	4613      	mov	r3, r2
 8006b14:	005b      	lsls	r3, r3, #1
 8006b16:	4413      	add	r3, r2
 8006b18:	00db      	lsls	r3, r3, #3
 8006b1a:	3328      	adds	r3, #40	@ 0x28
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	4413      	add	r3, r2
 8006b20:	1d1c      	adds	r4, r3, #4
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	1c9d      	adds	r5, r3, #2
 8006b26:	79fb      	ldrb	r3, [r7, #7]
 8006b28:	3b02      	subs	r3, #2
 8006b2a:	461e      	mov	r6, r3
 8006b2c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8006b30:	4618      	mov	r0, r3
 8006b32:	f002 f98b 	bl	8008e4c <_ZNSaIcEC1Ev>
 8006b36:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8006b3a:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8006b3e:	4632      	mov	r2, r6
 8006b40:	4629      	mov	r1, r5
 8006b42:	f002 fb0b 	bl	800915c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcjRKS3_>
 8006b46:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	f002 f9e5 	bl	8008f1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8006b52:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006b56:	4618      	mov	r0, r3
 8006b58:	f002 f9da 	bl	8008f10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006b5c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8006b60:	4618      	mov	r0, r3
 8006b62:	f002 f974 	bl	8008e4e <_ZNSaIcED1Ev>

    for(int i=0; i<n_frames_; i++) {
 8006b66:	2300      	movs	r3, #0
 8006b68:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b6a:	e002      	b.n	8006b72 <_ZN17MessageRecomposer9add_frameEPhh+0xca>
 8006b6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006b6e:	3301      	adds	r3, #1
 8006b70:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	dbf7      	blt.n	8006b6c <_ZN17MessageRecomposer9add_frameEPhh+0xc4>
    	// printf("Frame %d received : %d\n", i, frames_received_[i]);
    }

    if(all_frames_received()) {
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f000 f8ce 	bl	8006d1e <_ZN17MessageRecomposer19all_frames_receivedEv>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d043      	beq.n	8006c10 <_ZN17MessageRecomposer9add_frameEPhh+0x168>
        printf("All frames received\n");
 8006b88:	4823      	ldr	r0, [pc, #140]	@ (8006c18 <_ZN17MessageRecomposer9add_frameEPhh+0x170>)
 8006b8a:	f002 fd17 	bl	80095bc <puts>
        std::string full_msg;
 8006b8e:	f107 0310 	add.w	r3, r7, #16
 8006b92:	4618      	mov	r0, r3
 8006b94:	f002 f9b5 	bl	8008f02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
        for(int i=0; i<n_frames_; i++) {
 8006b98:	2300      	movs	r3, #0
 8006b9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b9c:	e011      	b.n	8006bc2 <_ZN17MessageRecomposer9add_frameEPhh+0x11a>
            full_msg += msg_parts[i];
 8006b9e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	005b      	lsls	r3, r3, #1
 8006ba4:	4413      	add	r3, r2
 8006ba6:	00db      	lsls	r3, r3, #3
 8006ba8:	3328      	adds	r3, #40	@ 0x28
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	4413      	add	r3, r2
 8006bae:	1d1a      	adds	r2, r3, #4
 8006bb0:	f107 0310 	add.w	r3, r7, #16
 8006bb4:	4611      	mov	r1, r2
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f002 fa86 	bl	80090c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
        for(int i=0; i<n_frames_; i++) {
 8006bbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	657b      	str	r3, [r7, #84]	@ 0x54
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	dbe8      	blt.n	8006b9e <_ZN17MessageRecomposer9add_frameEPhh+0xf6>
        }
        full_msg_ = full_msg;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 8006bd2:	f107 0210 	add.w	r2, r7, #16
 8006bd6:	4611      	mov	r1, r2
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f002 f9fd 	bl	8008fd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
        full_msg_received_ = true;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2201      	movs	r2, #1
 8006be2:	731a      	strb	r2, [r3, #12]
        for(int i=0; i<n_frames_; i++) {
 8006be4:	2300      	movs	r3, #0
 8006be6:	653b      	str	r3, [r7, #80]	@ 0x50
 8006be8:	e008      	b.n	8006bfc <_ZN17MessageRecomposer9add_frameEPhh+0x154>
            frames_received_[i] = false;
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bee:	4413      	add	r3, r2
 8006bf0:	330d      	adds	r3, #13
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<n_frames_; i++) {
 8006bf6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	653b      	str	r3, [r7, #80]	@ 0x50
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006c02:	429a      	cmp	r2, r3
 8006c04:	dbf1      	blt.n	8006bea <_ZN17MessageRecomposer9add_frameEPhh+0x142>
        }
    }
 8006c06:	f107 0310 	add.w	r3, r7, #16
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f002 f980 	bl	8008f10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8006c10:	bf00      	nop
 8006c12:	3764      	adds	r7, #100	@ 0x64
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c18:	0800a250 	.word	0x0800a250

08006c1c <_ZN17MessageRecomposer21check_if_new_full_msgEv>:

bool MessageRecomposer::check_if_new_full_msg() {
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
    return full_msg_received_;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	7b1b      	ldrb	r3, [r3, #12]
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <_ZN17MessageRecomposer12get_full_msgB5cxx11Ev>:

std::string MessageRecomposer::get_full_msg() {
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
    full_msg_received_ = false;
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	2200      	movs	r2, #0
 8006c42:	731a      	strb	r2, [r3, #12]
    return full_msg_;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f002 fa5c 	bl	800910a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
}
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	3708      	adds	r7, #8
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
	...

08006c5c <_ZN17MessageRecomposerD1Ev>:

MessageRecomposer::~MessageRecomposer() {
 8006c5c:	b590      	push	{r4, r7, lr}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	4a0f      	ldr	r2, [pc, #60]	@ (8006ca4 <_ZN17MessageRecomposerD1Ev+0x48>)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 8006c70:	4618      	mov	r0, r3
 8006c72:	f002 f94d 	bl	8008f10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
MessageRecomposer::~MessageRecomposer() {
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	332c      	adds	r3, #44	@ 0x2c
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00c      	beq.n	8006c98 <_ZN17MessageRecomposerD1Ev+0x3c>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	332c      	adds	r3, #44	@ 0x2c
 8006c82:	f503 7434 	add.w	r4, r3, #720	@ 0x2d0
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	332c      	adds	r3, #44	@ 0x2c
}
 8006c8a:	429c      	cmp	r4, r3
 8006c8c:	d004      	beq.n	8006c98 <_ZN17MessageRecomposerD1Ev+0x3c>
MessageRecomposer::~MessageRecomposer() {
 8006c8e:	3c18      	subs	r4, #24
 8006c90:	4620      	mov	r0, r4
 8006c92:	f002 f93d 	bl	8008f10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8006c96:	e7f6      	b.n	8006c86 <_ZN17MessageRecomposerD1Ev+0x2a>
MessageRecomposer::~MessageRecomposer() {
 8006c98:	bf00      	nop
}
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd90      	pop	{r4, r7, pc}
 8006ca4:	0800a498 	.word	0x0800a498

08006ca8 <_ZN17MessageRecomposerD0Ev>:
MessageRecomposer::~MessageRecomposer() {
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
}
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f7ff ffd3 	bl	8006c5c <_ZN17MessageRecomposerD1Ev>
 8006cb6:	f44f 7145 	mov.w	r1, #788	@ 0x314
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f002 f8c4 	bl	8008e48 <_ZdlPvj>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3708      	adds	r7, #8
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}

08006cca <_ZN17MessageRecomposer17decode_descriptorEPhRiS1_S1_>:

void MessageRecomposer::decode_descriptor(uint8_t *frame_data, int &msg_number,
		int &msg_size, int &frame_index) {
 8006cca:	b480      	push	{r7}
 8006ccc:	b087      	sub	sp, #28
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	60f8      	str	r0, [r7, #12]
 8006cd2:	60b9      	str	r1, [r7, #8]
 8006cd4:	607a      	str	r2, [r7, #4]
 8006cd6:	603b      	str	r3, [r7, #0]

    uint16_t msg_descriptor = frame_data[1] << 8 | frame_data[0];
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	021b      	lsls	r3, r3, #8
 8006ce0:	b21a      	sxth	r2, r3
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	b21b      	sxth	r3, r3
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	b21b      	sxth	r3, r3
 8006cec:	82fb      	strh	r3, [r7, #22]

    // todo mask the unused bits for safety (eg if error of transmission)

    msg_number = (msg_descriptor >> 12);
 8006cee:	8afb      	ldrh	r3, [r7, #22]
 8006cf0:	0b1b      	lsrs	r3, r3, #12
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	601a      	str	r2, [r3, #0]
    msg_size = (msg_descriptor >> 6) & 0x3F;
 8006cfa:	8afb      	ldrh	r3, [r7, #22]
 8006cfc:	099b      	lsrs	r3, r3, #6
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	601a      	str	r2, [r3, #0]
    frame_index = msg_descriptor & 0x3F;
 8006d08:	8afb      	ldrh	r3, [r7, #22]
 8006d0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006d0e:	6a3b      	ldr	r3, [r7, #32]
 8006d10:	601a      	str	r2, [r3, #0]
}
 8006d12:	bf00      	nop
 8006d14:	371c      	adds	r7, #28
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr

08006d1e <_ZN17MessageRecomposer19all_frames_receivedEv>:

bool MessageRecomposer::all_frames_received() {
 8006d1e:	b480      	push	{r7}
 8006d20:	b085      	sub	sp, #20
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
    for(int i=0; i<n_frames_; i++) {
 8006d26:	2300      	movs	r3, #0
 8006d28:	60fb      	str	r3, [r7, #12]
 8006d2a:	e00e      	b.n	8006d4a <_ZN17MessageRecomposer19all_frames_receivedEv+0x2c>
        if(!frames_received_[i]) {
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	4413      	add	r3, r2
 8006d32:	330d      	adds	r3, #13
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	f083 0301 	eor.w	r3, r3, #1
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d001      	beq.n	8006d44 <_ZN17MessageRecomposer19all_frames_receivedEv+0x26>
            return false;
 8006d40:	2300      	movs	r3, #0
 8006d42:	e008      	b.n	8006d56 <_ZN17MessageRecomposer19all_frames_receivedEv+0x38>
    for(int i=0; i<n_frames_; i++) {
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	3301      	adds	r3, #1
 8006d48:	60fb      	str	r3, [r7, #12]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	dbeb      	blt.n	8006d2c <_ZN17MessageRecomposer19all_frames_receivedEv+0xe>
        }
    }
    return true;
 8006d54:	2301      	movs	r3, #1
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3714      	adds	r7, #20
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr

08006d62 <load_descriptor_values>:
 */

#include "pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
 8006d62:	b480      	push	{r7}
 8006d64:	b08f      	sub	sp, #60	@ 0x3c
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	891a      	ldrh	r2, [r3, #8]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	8a1b      	ldrh	r3, [r3, #16]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d301      	bcc.n	8006d7c <load_descriptor_values+0x1a>
        return false;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	e156      	b.n	800702a <load_descriptor_values+0x2c8>

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	895b      	ldrh	r3, [r3, #10]
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4413      	add	r3, r2
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
 8006d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d90:	0a1b      	lsrs	r3, r3, #8
 8006d92:	b2da      	uxtb	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	759a      	strb	r2, [r3, #22]

    switch(word0 & 3)
 8006d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d9a:	f003 0303 	and.w	r3, r3, #3
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	d05a      	beq.n	8006e58 <load_descriptor_values+0xf6>
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	f200 8094 	bhi.w	8006ed0 <load_descriptor_values+0x16e>
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d002      	beq.n	8006db2 <load_descriptor_values+0x50>
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d01f      	beq.n	8006df0 <load_descriptor_values+0x8e>
 8006db0:	e08e      	b.n	8006ed0 <load_descriptor_values+0x16e>
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2201      	movs	r2, #1
 8006db6:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
 8006db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dba:	089b      	lsrs	r3, r3, #2
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006dc2:	b29a      	uxth	r2, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
 8006dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dca:	0e1b      	lsrs	r3, r3, #24
 8006dcc:	b25b      	sxtb	r3, r3
 8006dce:	f003 030f 	and.w	r3, r3, #15
 8006dd2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = (word0 >> 16) & 0xFF;
 8006dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dd8:	0c1b      	lsrs	r3, r3, #16
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
 8006dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006de0:	0f1b      	lsrs	r3, r3, #28
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	f003 030f 	and.w	r3, r3, #15
 8006de8:	b29a      	uxth	r2, r3
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	825a      	strh	r2, [r3, #18]
            break;
 8006dee:	e0b4      	b.n	8006f5a <load_descriptor_values+0x1f8>
        }

        case 1: {
            /* 2-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	895b      	ldrh	r3, [r3, #10]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	4413      	add	r3, r2
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	61fb      	str	r3, [r7, #28]

            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
 8006e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e06:	0c1b      	lsrs	r3, r3, #16
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
 8006e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e16:	089b      	lsrs	r3, r3, #2
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	0f1b      	lsrs	r3, r3, #28
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	019b      	lsls	r3, r3, #6
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
 8006e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e34:	0f1b      	lsrs	r3, r3, #28
 8006e36:	b25b      	sxtb	r3, r3
 8006e38:	f003 030f 	and.w	r3, r3, #15
 8006e3c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word1 & 0xFFFF;
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	0c1b      	lsrs	r3, r3, #16
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	825a      	strh	r2, [r3, #18]
            break;
 8006e56:	e080      	b.n	8006f5a <load_descriptor_values+0x1f8>
        }

        case 2: {
            /* 4-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	895b      	ldrh	r3, [r3, #10]
 8006e62:	3301      	adds	r3, #1
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	4413      	add	r3, r2
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	895b      	ldrh	r3, [r3, #10]
 8006e76:	3302      	adds	r3, #2
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	4413      	add	r3, r2
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	627b      	str	r3, [r7, #36]	@ 0x24
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	895b      	ldrh	r3, [r3, #10]
 8006e8a:	3303      	adds	r3, #3
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	4413      	add	r3, r2
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	623b      	str	r3, [r7, #32]

            iter->array_size = (pb_size_t)(word0 >> 16);
 8006e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e96:	0c1b      	lsrs	r3, r3, #16
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 8006e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ea0:	089b      	lsrs	r3, r3, #2
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ea8:	b29a      	uxth	r2, r3
 8006eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eac:	0a1b      	lsrs	r3, r3, #8
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	019b      	lsls	r3, r3, #6
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	b29a      	uxth	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 8006ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ebe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word2;
 8006ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec4:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)word3;
 8006ec6:	6a3b      	ldr	r3, [r7, #32]
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	825a      	strh	r2, [r3, #18]
            break;
 8006ece:	e044      	b.n	8006f5a <load_descriptor_values+0x1f8>
        }

        default: {
            /* 8-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	895b      	ldrh	r3, [r3, #10]
 8006eda:	3301      	adds	r3, #1
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	4413      	add	r3, r2
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	61bb      	str	r3, [r7, #24]
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	895b      	ldrh	r3, [r3, #10]
 8006eee:	3302      	adds	r3, #2
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4413      	add	r3, r2
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	617b      	str	r3, [r7, #20]
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	895b      	ldrh	r3, [r3, #10]
 8006f02:	3303      	adds	r3, #3
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4413      	add	r3, r2
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	613b      	str	r3, [r7, #16]
            uint32_t word4 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 4]);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	895b      	ldrh	r3, [r3, #10]
 8006f16:	3304      	adds	r3, #4
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	4413      	add	r3, r2
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	60fb      	str	r3, [r7, #12]

            iter->array_size = (pb_size_t)word4;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 8006f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f2a:	089b      	lsrs	r3, r3, #2
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	0a1b      	lsrs	r3, r3, #8
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	019b      	lsls	r3, r3, #6
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	b29a      	uxth	r2, r3
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            data_offset = word2;
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	637b      	str	r3, [r7, #52]	@ 0x34
            iter->data_size = (pb_size_t)word3;
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	825a      	strh	r2, [r3, #18]
            break;
 8006f58:	bf00      	nop
        }
    }

    if (!iter->message)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d106      	bne.n	8006f70 <load_descriptor_values+0x20e>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	619a      	str	r2, [r3, #24]
        iter->pSize = NULL;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	621a      	str	r2, [r3, #32]
 8006f6e:	e041      	b.n	8006ff4 <load_descriptor_values+0x292>
    }
    else
    {
        iter->pField = (char*)iter->message + data_offset;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	685a      	ldr	r2, [r3, #4]
 8006f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f76:	441a      	add	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	619a      	str	r2, [r3, #24]

        if (size_offset)
 8006f7c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d008      	beq.n	8006f96 <load_descriptor_values+0x234>
        {
            iter->pSize = (char*)iter->pField - size_offset;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	699a      	ldr	r2, [r3, #24]
 8006f88:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006f8c:	425b      	negs	r3, r3
 8006f8e:	441a      	add	r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	621a      	str	r2, [r3, #32]
 8006f94:	e01a      	b.n	8006fcc <load_descriptor_values+0x26a>
        }
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	7d9b      	ldrb	r3, [r3, #22]
 8006f9a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006f9e:	2b20      	cmp	r3, #32
 8006fa0:	d111      	bne.n	8006fc6 <load_descriptor_values+0x264>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	7d9b      	ldrb	r3, [r3, #22]
 8006fa6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d005      	beq.n	8006fba <load_descriptor_values+0x258>
                  PB_ATYPE(iter->type) == PB_ATYPE_POINTER))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	7d9b      	ldrb	r3, [r3, #22]
 8006fb2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 8006fb6:	2b80      	cmp	r3, #128	@ 0x80
 8006fb8:	d105      	bne.n	8006fc6 <load_descriptor_values+0x264>
        {
            /* Fixed count array */
            iter->pSize = &iter->array_size;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f103 0214 	add.w	r2, r3, #20
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	621a      	str	r2, [r3, #32]
 8006fc4:	e002      	b.n	8006fcc <load_descriptor_values+0x26a>
        }
        else
        {
            iter->pSize = NULL;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	621a      	str	r2, [r3, #32]
        }

        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	7d9b      	ldrb	r3, [r3, #22]
 8006fd0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006fd4:	2b80      	cmp	r3, #128	@ 0x80
 8006fd6:	d109      	bne.n	8006fec <load_descriptor_values+0x28a>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	699b      	ldr	r3, [r3, #24]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d005      	beq.n	8006fec <load_descriptor_values+0x28a>
        {
            iter->pData = *(void**)iter->pField;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	699b      	ldr	r3, [r3, #24]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	61da      	str	r2, [r3, #28]
 8006fea:	e003      	b.n	8006ff4 <load_descriptor_values+0x292>
        }
        else
        {
            iter->pData = iter->pField;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	699a      	ldr	r2, [r3, #24]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	61da      	str	r2, [r3, #28]
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	7d9b      	ldrb	r3, [r3, #22]
 8006ff8:	f003 030f 	and.w	r3, r3, #15
 8006ffc:	2b08      	cmp	r3, #8
 8006ffe:	d005      	beq.n	800700c <load_descriptor_values+0x2aa>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	7d9b      	ldrb	r3, [r3, #22]
 8007004:	f003 030f 	and.w	r3, r3, #15
 8007008:	2b09      	cmp	r3, #9
 800700a:	d10a      	bne.n	8007022 <load_descriptor_values+0x2c0>
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	685a      	ldr	r2, [r3, #4]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	89db      	ldrh	r3, [r3, #14]
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	4413      	add	r3, r2
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	625a      	str	r2, [r3, #36]	@ 0x24
 8007020:	e002      	b.n	8007028 <load_descriptor_values+0x2c6>
    }
    else
    {
        iter->submsg_desc = NULL;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    return true;
 8007028:	2301      	movs	r3, #1
}
 800702a:	4618      	mov	r0, r3
 800702c:	373c      	adds	r7, #60	@ 0x3c
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr

08007036 <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
 8007036:	b480      	push	{r7}
 8007038:	b085      	sub	sp, #20
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
    iter->index++;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	891b      	ldrh	r3, [r3, #8]
 8007042:	3301      	adds	r3, #1
 8007044:	b29a      	uxth	r2, r3
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	811a      	strh	r2, [r3, #8]

    if (iter->index >= iter->descriptor->field_count)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	891a      	ldrh	r2, [r3, #8]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	8a1b      	ldrh	r3, [r3, #16]
 8007054:	429a      	cmp	r2, r3
 8007056:	d30c      	bcc.n	8007072 <advance_iterator+0x3c>
    {
        /* Restart */
        iter->index = 0;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	811a      	strh	r2, [r3, #8]
        iter->field_info_index = 0;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	815a      	strh	r2, [r3, #10]
        iter->submessage_index = 0;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	81da      	strh	r2, [r3, #14]
        iter->required_field_index = 0;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	819a      	strh	r2, [r3, #12]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
 8007070:	e03b      	b.n	80070ea <advance_iterator+0xb4>
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	895b      	ldrh	r3, [r3, #10]
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4413      	add	r3, r2
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	60fb      	str	r3, [r7, #12]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	0a1b      	lsrs	r3, r3, #8
 8007088:	72fb      	strb	r3, [r7, #11]
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f003 0303 	and.w	r3, r3, #3
 8007090:	2201      	movs	r2, #1
 8007092:	fa02 f303 	lsl.w	r3, r2, r3
 8007096:	813b      	strh	r3, [r7, #8]
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	895a      	ldrh	r2, [r3, #10]
 800709c:	893b      	ldrh	r3, [r7, #8]
 800709e:	4413      	add	r3, r2
 80070a0:	b29a      	uxth	r2, r3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	815a      	strh	r2, [r3, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	899b      	ldrh	r3, [r3, #12]
 80070aa:	7afa      	ldrb	r2, [r7, #11]
 80070ac:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 80070b0:	2a00      	cmp	r2, #0
 80070b2:	bf0c      	ite	eq
 80070b4:	2201      	moveq	r2, #1
 80070b6:	2200      	movne	r2, #0
 80070b8:	b2d2      	uxtb	r2, r2
 80070ba:	4413      	add	r3, r2
 80070bc:	b29a      	uxth	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	819a      	strh	r2, [r3, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	89da      	ldrh	r2, [r3, #14]
 80070c6:	7afb      	ldrb	r3, [r7, #11]
 80070c8:	f003 030f 	and.w	r3, r3, #15
 80070cc:	2b08      	cmp	r3, #8
 80070ce:	d004      	beq.n	80070da <advance_iterator+0xa4>
 80070d0:	7afb      	ldrb	r3, [r7, #11]
 80070d2:	f003 030f 	and.w	r3, r3, #15
 80070d6:	2b09      	cmp	r3, #9
 80070d8:	d101      	bne.n	80070de <advance_iterator+0xa8>
 80070da:	2301      	movs	r3, #1
 80070dc:	e000      	b.n	80070e0 <advance_iterator+0xaa>
 80070de:	2300      	movs	r3, #0
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	4413      	add	r3, r2
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	81da      	strh	r2, [r3, #14]
}
 80070ea:	bf00      	nop
 80070ec:	3714      	adds	r7, #20
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr

080070f6 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b084      	sub	sp, #16
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	60f8      	str	r0, [r7, #12]
 80070fe:	60b9      	str	r1, [r7, #8]
 8007100:	607a      	str	r2, [r7, #4]
    memset(iter, 0, sizeof(*iter));
 8007102:	2228      	movs	r2, #40	@ 0x28
 8007104:	2100      	movs	r1, #0
 8007106:	68f8      	ldr	r0, [r7, #12]
 8007108:	f002 fb38 	bl	800977c <memset>

    iter->descriptor = desc;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	68ba      	ldr	r2, [r7, #8]
 8007110:	601a      	str	r2, [r3, #0]
    iter->message = message;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	605a      	str	r2, [r3, #4]

    return load_descriptor_values(iter);
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	f7ff fe22 	bl	8006d62 <load_descriptor_values>
 800711e:	4603      	mov	r3, r0
}
 8007120:	4618      	mov	r0, r3
 8007122:	3710      	adds	r7, #16
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b086      	sub	sp, #24
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	613b      	str	r3, [r7, #16]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	60fb      	str	r3, [r7, #12]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	0a1b      	lsrs	r3, r3, #8
 8007146:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800714a:	2b80      	cmp	r3, #128	@ 0x80
 800714c:	d109      	bne.n	8007162 <pb_field_iter_begin_extension+0x3a>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	3304      	adds	r3, #4
 8007152:	461a      	mov	r2, r3
 8007154:	6939      	ldr	r1, [r7, #16]
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f7ff ffcd 	bl	80070f6 <pb_field_iter_begin>
 800715c:	4603      	mov	r3, r0
 800715e:	75fb      	strb	r3, [r7, #23]
 8007160:	e008      	b.n	8007174 <pb_field_iter_begin_extension+0x4c>
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	461a      	mov	r2, r3
 8007168:	6939      	ldr	r1, [r7, #16]
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f7ff ffc3 	bl	80070f6 <pb_field_iter_begin>
 8007170:	4603      	mov	r3, r0
 8007172:	75fb      	strb	r3, [r7, #23]
    }

    iter->pSize = &extension->found;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	f103 020c 	add.w	r2, r3, #12
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	621a      	str	r2, [r3, #32]
    return status;
 800717e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007180:	4618      	mov	r0, r3
 8007182:	3718      	adds	r7, #24
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
    advance_iterator(iter);
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f7ff ff50 	bl	8007036 <advance_iterator>
    (void)load_descriptor_values(iter);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f7ff fde3 	bl	8006d62 <load_descriptor_values>
    return iter->index != 0;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	891b      	ldrh	r3, [r3, #8]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	bf14      	ite	ne
 80071a4:	2301      	movne	r3, #1
 80071a6:	2300      	moveq	r3, #0
 80071a8:	b2db      	uxtb	r3, r3
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3708      	adds	r7, #8
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b084      	sub	sp, #16
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
 80071ba:	6039      	str	r1, [r7, #0]
    if (iter->tag == tag)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	8a1b      	ldrh	r3, [r3, #16]
 80071c0:	461a      	mov	r2, r3
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d101      	bne.n	80071cc <pb_field_iter_find+0x1a>
    {
        return true; /* Nothing to do, correct field already. */
 80071c8:	2301      	movs	r3, #1
 80071ca:	e044      	b.n	8007256 <pb_field_iter_find+0xa4>
    }
    else if (tag > iter->descriptor->largest_tag)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	8a9b      	ldrh	r3, [r3, #20]
 80071d2:	461a      	mov	r2, r3
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d901      	bls.n	80071de <pb_field_iter_find+0x2c>
    {
        return false;
 80071da:	2300      	movs	r3, #0
 80071dc:	e03b      	b.n	8007256 <pb_field_iter_find+0xa4>
    }
    else
    {
        pb_size_t start = iter->index;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	891b      	ldrh	r3, [r3, #8]
 80071e2:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        if (tag < iter->tag)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	8a1b      	ldrh	r3, [r3, #16]
 80071e8:	461a      	mov	r2, r3
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d204      	bcs.n	80071fa <pb_field_iter_find+0x48>
        {
            /* Fields are in tag number order, so we know that tag is between
             * 0 and our start position. Setting index to end forces
             * advance_iterator() call below to restart from beginning. */
            iter->index = iter->descriptor->field_count;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	8a1a      	ldrh	r2, [r3, #16]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	811a      	strh	r2, [r3, #8]
        }

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f7ff ff1b 	bl	8007036 <advance_iterator>

            /* Do fast check for tag number match */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	895b      	ldrh	r3, [r3, #10]
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	4413      	add	r3, r2
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	60bb      	str	r3, [r7, #8]

            if (((fieldinfo >> 2) & 0x3F) == (tag & 0x3F))
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	089a      	lsrs	r2, r3, #2
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	4053      	eors	r3, r2
 800721a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800721e:	2b00      	cmp	r3, #0
 8007220:	d110      	bne.n	8007244 <pb_field_iter_find+0x92>
            {
                /* Good candidate, check further */
                (void)load_descriptor_values(iter);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f7ff fd9d 	bl	8006d62 <load_descriptor_values>

                if (iter->tag == tag &&
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	8a1b      	ldrh	r3, [r3, #16]
 800722c:	461a      	mov	r2, r3
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	4293      	cmp	r3, r2
 8007232:	d107      	bne.n	8007244 <pb_field_iter_find+0x92>
                    PB_LTYPE(iter->type) != PB_LTYPE_EXTENSION)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	7d9b      	ldrb	r3, [r3, #22]
 8007238:	f003 030f 	and.w	r3, r3, #15
                if (iter->tag == tag &&
 800723c:	2b0a      	cmp	r3, #10
 800723e:	d001      	beq.n	8007244 <pb_field_iter_find+0x92>
                {
                    /* Found it */
                    return true;
 8007240:	2301      	movs	r3, #1
 8007242:	e008      	b.n	8007256 <pb_field_iter_find+0xa4>
                }
            }
        } while (iter->index != start);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	891b      	ldrh	r3, [r3, #8]
 8007248:	89fa      	ldrh	r2, [r7, #14]
 800724a:	429a      	cmp	r2, r3
 800724c:	d1d5      	bne.n	80071fa <pb_field_iter_find+0x48>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f7ff fd87 	bl	8006d62 <load_descriptor_values>
        return false;
 8007254:	2300      	movs	r3, #0
    }
}
 8007256:	4618      	mov	r0, r3
 8007258:	3710      	adds	r7, #16
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <pb_field_iter_find_extension>:

bool pb_field_iter_find_extension(pb_field_iter_t *iter)
{
 800725e:	b580      	push	{r7, lr}
 8007260:	b084      	sub	sp, #16
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
    if (PB_LTYPE(iter->type) == PB_LTYPE_EXTENSION)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	7d9b      	ldrb	r3, [r3, #22]
 800726a:	f003 030f 	and.w	r3, r3, #15
 800726e:	2b0a      	cmp	r3, #10
 8007270:	d101      	bne.n	8007276 <pb_field_iter_find_extension+0x18>
    {
        return true;
 8007272:	2301      	movs	r3, #1
 8007274:	e022      	b.n	80072bc <pb_field_iter_find_extension+0x5e>
    }
    else
    {
        pb_size_t start = iter->index;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	891b      	ldrh	r3, [r3, #8]
 800727a:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f7ff feda 	bl	8007036 <advance_iterator>

            /* Do fast check for field type */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	895b      	ldrh	r3, [r3, #10]
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	4413      	add	r3, r2
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	60bb      	str	r3, [r7, #8]

            if (PB_LTYPE((fieldinfo >> 8) & 0xFF) == PB_LTYPE_EXTENSION)
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	0a1b      	lsrs	r3, r3, #8
 8007298:	f003 030f 	and.w	r3, r3, #15
 800729c:	2b0a      	cmp	r3, #10
 800729e:	d104      	bne.n	80072aa <pb_field_iter_find_extension+0x4c>
            {
                return load_descriptor_values(iter);
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f7ff fd5e 	bl	8006d62 <load_descriptor_values>
 80072a6:	4603      	mov	r3, r0
 80072a8:	e008      	b.n	80072bc <pb_field_iter_find_extension+0x5e>
            }
        } while (iter->index != start);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	891b      	ldrh	r3, [r3, #8]
 80072ae:	89fa      	ldrh	r2, [r7, #14]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d1e3      	bne.n	800727c <pb_field_iter_find_extension+0x1e>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f7ff fd54 	bl	8006d62 <load_descriptor_values>
        return false;
 80072ba:	2300      	movs	r3, #0
    }
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3710      	adds	r7, #16
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b086      	sub	sp, #24
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	617b      	str	r3, [r7, #20]
    stream->state = (pb_byte_t*)stream->state + count;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	685a      	ldr	r2, [r3, #4]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	441a      	add	r2, r3
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	605a      	str	r2, [r3, #4]
    
    if (buf != NULL)
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d004      	beq.n	80072f2 <buf_read+0x2e>
    {
        memcpy(buf, source, count * sizeof(pb_byte_t));
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	6979      	ldr	r1, [r7, #20]
 80072ec:	68b8      	ldr	r0, [r7, #8]
 80072ee:	f002 fb14 	bl	800991a <memcpy>
    }
    
    return true;
 80072f2:	2301      	movs	r3, #1
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3718      	adds	r7, #24
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <pb_read>:

bool checkreturn pb_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b088      	sub	sp, #32
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	607a      	str	r2, [r7, #4]
    if (count == 0)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d101      	bne.n	8007312 <pb_read+0x16>
        return true;
 800730e:	2301      	movs	r3, #1
 8007310:	e05f      	b.n	80073d2 <pb_read+0xd6>

#ifndef PB_BUFFER_ONLY
	if (buf == NULL && stream->callback != buf_read)
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d123      	bne.n	8007360 <pb_read+0x64>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a2f      	ldr	r2, [pc, #188]	@ (80073dc <pb_read+0xe0>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d01e      	beq.n	8007360 <pb_read+0x64>
	{
		/* Skip input bytes */
		pb_byte_t tmp[16];
		while (count > 16)
 8007322:	e011      	b.n	8007348 <pb_read+0x4c>
		{
			if (!pb_read(stream, tmp, 16))
 8007324:	f107 0310 	add.w	r3, r7, #16
 8007328:	2210      	movs	r2, #16
 800732a:	4619      	mov	r1, r3
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f7ff ffe5 	bl	80072fc <pb_read>
 8007332:	4603      	mov	r3, r0
 8007334:	f083 0301 	eor.w	r3, r3, #1
 8007338:	b2db      	uxtb	r3, r3
 800733a:	2b00      	cmp	r3, #0
 800733c:	d001      	beq.n	8007342 <pb_read+0x46>
				return false;
 800733e:	2300      	movs	r3, #0
 8007340:	e047      	b.n	80073d2 <pb_read+0xd6>
			
			count -= 16;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	3b10      	subs	r3, #16
 8007346:	607b      	str	r3, [r7, #4]
		while (count > 16)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2b10      	cmp	r3, #16
 800734c:	d8ea      	bhi.n	8007324 <pb_read+0x28>
		}
		
		return pb_read(stream, tmp, count);
 800734e:	f107 0310 	add.w	r3, r7, #16
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	4619      	mov	r1, r3
 8007356:	68f8      	ldr	r0, [r7, #12]
 8007358:	f7ff ffd0 	bl	80072fc <pb_read>
 800735c:	4603      	mov	r3, r0
 800735e:	e038      	b.n	80073d2 <pb_read+0xd6>
	}
#endif

    if (stream->bytes_left < count)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	429a      	cmp	r2, r3
 8007368:	d90b      	bls.n	8007382 <pb_read+0x86>
        PB_RETURN_ERROR(stream, "end-of-stream");
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d002      	beq.n	8007378 <pb_read+0x7c>
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	e000      	b.n	800737a <pb_read+0x7e>
 8007378:	4b19      	ldr	r3, [pc, #100]	@ (80073e0 <pb_read+0xe4>)
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	60d3      	str	r3, [r2, #12]
 800737e:	2300      	movs	r3, #0
 8007380:	e027      	b.n	80073d2 <pb_read+0xd6>
    
#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, count))
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	68b9      	ldr	r1, [r7, #8]
 800738a:	68f8      	ldr	r0, [r7, #12]
 800738c:	4798      	blx	r3
 800738e:	4603      	mov	r3, r0
 8007390:	f083 0301 	eor.w	r3, r3, #1
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00b      	beq.n	80073b2 <pb_read+0xb6>
        PB_RETURN_ERROR(stream, "io error");
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d002      	beq.n	80073a8 <pb_read+0xac>
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	e000      	b.n	80073aa <pb_read+0xae>
 80073a8:	4b0e      	ldr	r3, [pc, #56]	@ (80073e4 <pb_read+0xe8>)
 80073aa:	68fa      	ldr	r2, [r7, #12]
 80073ac:	60d3      	str	r3, [r2, #12]
 80073ae:	2300      	movs	r3, #0
 80073b0:	e00f      	b.n	80073d2 <pb_read+0xd6>
#else
    if (!buf_read(stream, buf, count))
        return false;
#endif
    
    if (stream->bytes_left < count)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d903      	bls.n	80073c4 <pb_read+0xc8>
        stream->bytes_left = 0;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2200      	movs	r2, #0
 80073c0:	609a      	str	r2, [r3, #8]
 80073c2:	e005      	b.n	80073d0 <pb_read+0xd4>
    else
        stream->bytes_left -= count;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	689a      	ldr	r2, [r3, #8]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	1ad2      	subs	r2, r2, r3
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	609a      	str	r2, [r3, #8]

    return true;
 80073d0:	2301      	movs	r3, #1
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3720      	adds	r7, #32
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	080072c5 	.word	0x080072c5
 80073e0:	0800a264 	.word	0x0800a264
 80073e4:	0800a274 	.word	0x0800a274

080073e8 <pb_readbyte>:

/* Read a single byte from input stream. buf may not be NULL.
 * This is an optimization for the varint decoding. */
static bool checkreturn pb_readbyte(pb_istream_t *stream, pb_byte_t *buf)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
    if (stream->bytes_left == 0)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d10b      	bne.n	8007412 <pb_readbyte+0x2a>
        PB_RETURN_ERROR(stream, "end-of-stream");
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d002      	beq.n	8007408 <pb_readbyte+0x20>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	e000      	b.n	800740a <pb_readbyte+0x22>
 8007408:	4b13      	ldr	r3, [pc, #76]	@ (8007458 <pb_readbyte+0x70>)
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	60d3      	str	r3, [r2, #12]
 800740e:	2300      	movs	r3, #0
 8007410:	e01d      	b.n	800744e <pb_readbyte+0x66>

#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, 1))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2201      	movs	r2, #1
 8007418:	6839      	ldr	r1, [r7, #0]
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	4798      	blx	r3
 800741e:	4603      	mov	r3, r0
 8007420:	f083 0301 	eor.w	r3, r3, #1
 8007424:	b2db      	uxtb	r3, r3
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00b      	beq.n	8007442 <pb_readbyte+0x5a>
        PB_RETURN_ERROR(stream, "io error");
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d002      	beq.n	8007438 <pb_readbyte+0x50>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	e000      	b.n	800743a <pb_readbyte+0x52>
 8007438:	4b08      	ldr	r3, [pc, #32]	@ (800745c <pb_readbyte+0x74>)
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	60d3      	str	r3, [r2, #12]
 800743e:	2300      	movs	r3, #0
 8007440:	e005      	b.n	800744e <pb_readbyte+0x66>
#else
    *buf = *(const pb_byte_t*)stream->state;
    stream->state = (pb_byte_t*)stream->state + 1;
#endif

    stream->bytes_left--;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	1e5a      	subs	r2, r3, #1
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	609a      	str	r2, [r3, #8]
    
    return true;    
 800744c:	2301      	movs	r3, #1
}
 800744e:	4618      	mov	r0, r3
 8007450:	3708      	adds	r7, #8
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	0800a264 	.word	0x0800a264
 800745c:	0800a274 	.word	0x0800a274

08007460 <pb_istream_from_buffer>:

pb_istream_t pb_istream_from_buffer(const pb_byte_t *buf, size_t msglen)
{
 8007460:	b490      	push	{r4, r7}
 8007462:	b08a      	sub	sp, #40	@ 0x28
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]
        const void *c_state;
    } state;
#ifdef PB_BUFFER_ONLY
    stream.callback = NULL;
#else
    stream.callback = &buf_read;
 800746c:	4b0a      	ldr	r3, [pc, #40]	@ (8007498 <pb_istream_from_buffer+0x38>)
 800746e:	61bb      	str	r3, [r7, #24]
#endif
    state.c_state = buf;
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	617b      	str	r3, [r7, #20]
    stream.state = state.state;
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	61fb      	str	r3, [r7, #28]
    stream.bytes_left = msglen;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 800747c:	2300      	movs	r3, #0
 800747e:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
    return stream;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	461c      	mov	r4, r3
 8007484:	f107 0318 	add.w	r3, r7, #24
 8007488:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800748a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	3728      	adds	r7, #40	@ 0x28
 8007492:	46bd      	mov	sp, r7
 8007494:	bc90      	pop	{r4, r7}
 8007496:	4770      	bx	lr
 8007498:	080072c5 	.word	0x080072c5

0800749c <pb_decode_varint32_eof>:
/********************
 * Helper functions *
 ********************/

static bool checkreturn pb_decode_varint32_eof(pb_istream_t *stream, uint32_t *dest, bool *eof)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b088      	sub	sp, #32
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	607a      	str	r2, [r7, #4]
    pb_byte_t byte;
    uint32_t result;
    
    if (!pb_readbyte(stream, &byte))
 80074a8:	f107 0315 	add.w	r3, r7, #21
 80074ac:	4619      	mov	r1, r3
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	f7ff ff9a 	bl	80073e8 <pb_readbyte>
 80074b4:	4603      	mov	r3, r0
 80074b6:	f083 0301 	eor.w	r3, r3, #1
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d00b      	beq.n	80074d8 <pb_decode_varint32_eof+0x3c>
    {
        if (stream->bytes_left == 0)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d105      	bne.n	80074d4 <pb_decode_varint32_eof+0x38>
        {
            if (eof)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d002      	beq.n	80074d4 <pb_decode_varint32_eof+0x38>
            {
                *eof = true;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2201      	movs	r2, #1
 80074d2:	701a      	strb	r2, [r3, #0]
            }
        }

        return false;
 80074d4:	2300      	movs	r3, #0
 80074d6:	e084      	b.n	80075e2 <pb_decode_varint32_eof+0x146>
    }
    
    if ((byte & 0x80) == 0)
 80074d8:	7d7b      	ldrb	r3, [r7, #21]
 80074da:	b25b      	sxtb	r3, r3
 80074dc:	2b00      	cmp	r3, #0
 80074de:	db02      	blt.n	80074e6 <pb_decode_varint32_eof+0x4a>
    {
        /* Quick case, 1 byte value */
        result = byte;
 80074e0:	7d7b      	ldrb	r3, [r7, #21]
 80074e2:	61fb      	str	r3, [r7, #28]
 80074e4:	e079      	b.n	80075da <pb_decode_varint32_eof+0x13e>
    }
    else
    {
        /* Multibyte case */
        uint_fast8_t bitpos = 7;
 80074e6:	2307      	movs	r3, #7
 80074e8:	61bb      	str	r3, [r7, #24]
        result = byte & 0x7F;
 80074ea:	7d7b      	ldrb	r3, [r7, #21]
 80074ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074f0:	61fb      	str	r3, [r7, #28]
        
        do
        {
            if (!pb_readbyte(stream, &byte))
 80074f2:	f107 0315 	add.w	r3, r7, #21
 80074f6:	4619      	mov	r1, r3
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f7ff ff75 	bl	80073e8 <pb_readbyte>
 80074fe:	4603      	mov	r3, r0
 8007500:	f083 0301 	eor.w	r3, r3, #1
 8007504:	b2db      	uxtb	r3, r3
 8007506:	2b00      	cmp	r3, #0
 8007508:	d001      	beq.n	800750e <pb_decode_varint32_eof+0x72>
                return false;
 800750a:	2300      	movs	r3, #0
 800750c:	e069      	b.n	80075e2 <pb_decode_varint32_eof+0x146>
            
            if (bitpos >= 32)
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	2b1f      	cmp	r3, #31
 8007512:	d92f      	bls.n	8007574 <pb_decode_varint32_eof+0xd8>
            {
                /* Note: The varint could have trailing 0x80 bytes, or 0xFF for negative. */
                pb_byte_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 8007514:	69bb      	ldr	r3, [r7, #24]
 8007516:	2b3e      	cmp	r3, #62	@ 0x3e
 8007518:	d801      	bhi.n	800751e <pb_decode_varint32_eof+0x82>
 800751a:	23ff      	movs	r3, #255	@ 0xff
 800751c:	e000      	b.n	8007520 <pb_decode_varint32_eof+0x84>
 800751e:	2301      	movs	r3, #1
 8007520:	75fb      	strb	r3, [r7, #23]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8007522:	7d7b      	ldrb	r3, [r7, #21]
 8007524:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007528:	2b00      	cmp	r3, #0
 800752a:	d006      	beq.n	800753a <pb_decode_varint32_eof+0x9e>
                         ((result >> 31) != 0 && byte == sign_extension));
 800752c:	69fb      	ldr	r3, [r7, #28]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 800752e:	2b00      	cmp	r3, #0
 8007530:	da05      	bge.n	800753e <pb_decode_varint32_eof+0xa2>
                         ((result >> 31) != 0 && byte == sign_extension));
 8007532:	7d7b      	ldrb	r3, [r7, #21]
 8007534:	7dfa      	ldrb	r2, [r7, #23]
 8007536:	429a      	cmp	r2, r3
 8007538:	d101      	bne.n	800753e <pb_decode_varint32_eof+0xa2>
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 800753a:	2301      	movs	r3, #1
 800753c:	e000      	b.n	8007540 <pb_decode_varint32_eof+0xa4>
 800753e:	2300      	movs	r3, #0
 8007540:	75bb      	strb	r3, [r7, #22]
 8007542:	7dbb      	ldrb	r3, [r7, #22]
 8007544:	f003 0301 	and.w	r3, r3, #1
 8007548:	75bb      	strb	r3, [r7, #22]

                if (bitpos >= 64 || !valid_extension)
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	2b3f      	cmp	r3, #63	@ 0x3f
 800754e:	d805      	bhi.n	800755c <pb_decode_varint32_eof+0xc0>
 8007550:	7dbb      	ldrb	r3, [r7, #22]
 8007552:	f083 0301 	eor.w	r3, r3, #1
 8007556:	b2db      	uxtb	r3, r3
 8007558:	2b00      	cmp	r3, #0
 800755a:	d037      	beq.n	80075cc <pb_decode_varint32_eof+0x130>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d002      	beq.n	800756a <pb_decode_varint32_eof+0xce>
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	e000      	b.n	800756c <pb_decode_varint32_eof+0xd0>
 800756a:	4b20      	ldr	r3, [pc, #128]	@ (80075ec <pb_decode_varint32_eof+0x150>)
 800756c:	68fa      	ldr	r2, [r7, #12]
 800756e:	60d3      	str	r3, [r2, #12]
 8007570:	2300      	movs	r3, #0
 8007572:	e036      	b.n	80075e2 <pb_decode_varint32_eof+0x146>
                }
            }
            else if (bitpos == 28)
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	2b1c      	cmp	r3, #28
 8007578:	d11f      	bne.n	80075ba <pb_decode_varint32_eof+0x11e>
            {
                if ((byte & 0x70) != 0 && (byte & 0x78) != 0x78)
 800757a:	7d7b      	ldrb	r3, [r7, #21]
 800757c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007580:	2b00      	cmp	r3, #0
 8007582:	d010      	beq.n	80075a6 <pb_decode_varint32_eof+0x10a>
 8007584:	7d7b      	ldrb	r3, [r7, #21]
 8007586:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 800758a:	2b78      	cmp	r3, #120	@ 0x78
 800758c:	d00b      	beq.n	80075a6 <pb_decode_varint32_eof+0x10a>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d002      	beq.n	800759c <pb_decode_varint32_eof+0x100>
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	68db      	ldr	r3, [r3, #12]
 800759a:	e000      	b.n	800759e <pb_decode_varint32_eof+0x102>
 800759c:	4b13      	ldr	r3, [pc, #76]	@ (80075ec <pb_decode_varint32_eof+0x150>)
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	60d3      	str	r3, [r2, #12]
 80075a2:	2300      	movs	r3, #0
 80075a4:	e01d      	b.n	80075e2 <pb_decode_varint32_eof+0x146>
                }
                result |= (uint32_t)(byte & 0x0F) << bitpos;
 80075a6:	7d7b      	ldrb	r3, [r7, #21]
 80075a8:	f003 020f 	and.w	r2, r3, #15
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	fa02 f303 	lsl.w	r3, r2, r3
 80075b2:	69fa      	ldr	r2, [r7, #28]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	61fb      	str	r3, [r7, #28]
 80075b8:	e008      	b.n	80075cc <pb_decode_varint32_eof+0x130>
            }
            else
            {
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 80075ba:	7d7b      	ldrb	r3, [r7, #21]
 80075bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	fa02 f303 	lsl.w	r3, r2, r3
 80075c6:	69fa      	ldr	r2, [r7, #28]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	61fb      	str	r3, [r7, #28]
            }
            bitpos = (uint_fast8_t)(bitpos + 7);
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	3307      	adds	r3, #7
 80075d0:	61bb      	str	r3, [r7, #24]
        } while (byte & 0x80);
 80075d2:	7d7b      	ldrb	r3, [r7, #21]
 80075d4:	b25b      	sxtb	r3, r3
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	db8b      	blt.n	80074f2 <pb_decode_varint32_eof+0x56>
   }
   
   *dest = result;
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	69fa      	ldr	r2, [r7, #28]
 80075de:	601a      	str	r2, [r3, #0]
   return true;
 80075e0:	2301      	movs	r3, #1
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3720      	adds	r7, #32
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	0800a280 	.word	0x0800a280

080075f0 <pb_decode_varint32>:

bool checkreturn pb_decode_varint32(pb_istream_t *stream, uint32_t *dest)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
    return pb_decode_varint32_eof(stream, dest, NULL);
 80075fa:	2200      	movs	r2, #0
 80075fc:	6839      	ldr	r1, [r7, #0]
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f7ff ff4c 	bl	800749c <pb_decode_varint32_eof>
 8007604:	4603      	mov	r3, r0
}
 8007606:	4618      	mov	r0, r3
 8007608:	3708      	adds	r7, #8
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
	...

08007610 <pb_decode_varint>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_decode_varint(pb_istream_t *stream, uint64_t *dest)
{
 8007610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007614:	b08a      	sub	sp, #40	@ 0x28
 8007616:	af00      	add	r7, sp, #0
 8007618:	60f8      	str	r0, [r7, #12]
 800761a:	60b9      	str	r1, [r7, #8]
    pb_byte_t byte;
    uint_fast8_t bitpos = 0;
 800761c:	2300      	movs	r3, #0
 800761e:	627b      	str	r3, [r7, #36]	@ 0x24
    uint64_t result = 0;
 8007620:	f04f 0200 	mov.w	r2, #0
 8007624:	f04f 0300 	mov.w	r3, #0
 8007628:	e9c7 2306 	strd	r2, r3, [r7, #24]
    
    do
    {
        if (!pb_readbyte(stream, &byte))
 800762c:	f107 0317 	add.w	r3, r7, #23
 8007630:	4619      	mov	r1, r3
 8007632:	68f8      	ldr	r0, [r7, #12]
 8007634:	f7ff fed8 	bl	80073e8 <pb_readbyte>
 8007638:	4603      	mov	r3, r0
 800763a:	f083 0301 	eor.w	r3, r3, #1
 800763e:	b2db      	uxtb	r3, r3
 8007640:	2b00      	cmp	r3, #0
 8007642:	d001      	beq.n	8007648 <pb_decode_varint+0x38>
            return false;
 8007644:	2300      	movs	r3, #0
 8007646:	e041      	b.n	80076cc <pb_decode_varint+0xbc>

        if (bitpos >= 63 && (byte & 0xFE) != 0)
 8007648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800764a:	2b3e      	cmp	r3, #62	@ 0x3e
 800764c:	d910      	bls.n	8007670 <pb_decode_varint+0x60>
 800764e:	7dfb      	ldrb	r3, [r7, #23]
 8007650:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007654:	2b00      	cmp	r3, #0
 8007656:	d00b      	beq.n	8007670 <pb_decode_varint+0x60>
            PB_RETURN_ERROR(stream, "varint overflow");
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d002      	beq.n	8007666 <pb_decode_varint+0x56>
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	e000      	b.n	8007668 <pb_decode_varint+0x58>
 8007666:	4b1c      	ldr	r3, [pc, #112]	@ (80076d8 <pb_decode_varint+0xc8>)
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	60d3      	str	r3, [r2, #12]
 800766c:	2300      	movs	r3, #0
 800766e:	e02d      	b.n	80076cc <pb_decode_varint+0xbc>

        result |= (uint64_t)(byte & 0x7F) << bitpos;
 8007670:	7dfb      	ldrb	r3, [r7, #23]
 8007672:	b2db      	uxtb	r3, r3
 8007674:	2200      	movs	r2, #0
 8007676:	603b      	str	r3, [r7, #0]
 8007678:	607a      	str	r2, [r7, #4]
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	f003 087f 	and.w	r8, r3, #127	@ 0x7f
 8007680:	f04f 0900 	mov.w	r9, #0
 8007684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007686:	f1a3 0120 	sub.w	r1, r3, #32
 800768a:	f1c3 0220 	rsb	r2, r3, #32
 800768e:	fa09 f503 	lsl.w	r5, r9, r3
 8007692:	fa08 f101 	lsl.w	r1, r8, r1
 8007696:	430d      	orrs	r5, r1
 8007698:	fa28 f202 	lsr.w	r2, r8, r2
 800769c:	4315      	orrs	r5, r2
 800769e:	fa08 f403 	lsl.w	r4, r8, r3
 80076a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80076a6:	ea42 0a04 	orr.w	sl, r2, r4
 80076aa:	ea43 0b05 	orr.w	fp, r3, r5
 80076ae:	e9c7 ab06 	strd	sl, fp, [r7, #24]
        bitpos = (uint_fast8_t)(bitpos + 7);
 80076b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b4:	3307      	adds	r3, #7
 80076b6:	627b      	str	r3, [r7, #36]	@ 0x24
    } while (byte & 0x80);
 80076b8:	7dfb      	ldrb	r3, [r7, #23]
 80076ba:	b25b      	sxtb	r3, r3
 80076bc:	2b00      	cmp	r3, #0
 80076be:	dbb5      	blt.n	800762c <pb_decode_varint+0x1c>
    
    *dest = result;
 80076c0:	68b9      	ldr	r1, [r7, #8]
 80076c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80076c6:	e9c1 2300 	strd	r2, r3, [r1]
    return true;
 80076ca:	2301      	movs	r3, #1
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3728      	adds	r7, #40	@ 0x28
 80076d0:	46bd      	mov	sp, r7
 80076d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076d6:	bf00      	nop
 80076d8:	0800a280 	.word	0x0800a280

080076dc <pb_skip_varint>:
#endif

bool checkreturn pb_skip_varint(pb_istream_t *stream)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
    pb_byte_t byte;
    do
    {
        if (!pb_read(stream, &byte, 1))
 80076e4:	f107 030f 	add.w	r3, r7, #15
 80076e8:	2201      	movs	r2, #1
 80076ea:	4619      	mov	r1, r3
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f7ff fe05 	bl	80072fc <pb_read>
 80076f2:	4603      	mov	r3, r0
 80076f4:	f083 0301 	eor.w	r3, r3, #1
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d001      	beq.n	8007702 <pb_skip_varint+0x26>
            return false;
 80076fe:	2300      	movs	r3, #0
 8007700:	e004      	b.n	800770c <pb_skip_varint+0x30>
    } while (byte & 0x80);
 8007702:	7bfb      	ldrb	r3, [r7, #15]
 8007704:	b25b      	sxtb	r3, r3
 8007706:	2b00      	cmp	r3, #0
 8007708:	dbec      	blt.n	80076e4 <pb_skip_varint+0x8>
    return true;
 800770a:	2301      	movs	r3, #1
}
 800770c:	4618      	mov	r0, r3
 800770e:	3710      	adds	r7, #16
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <pb_skip_string>:

bool checkreturn pb_skip_string(pb_istream_t *stream)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
    uint32_t length;
    if (!pb_decode_varint32(stream, &length))
 800771c:	f107 030c 	add.w	r3, r7, #12
 8007720:	4619      	mov	r1, r3
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f7ff ff64 	bl	80075f0 <pb_decode_varint32>
 8007728:	4603      	mov	r3, r0
 800772a:	f083 0301 	eor.w	r3, r3, #1
 800772e:	b2db      	uxtb	r3, r3
 8007730:	2b00      	cmp	r3, #0
 8007732:	d001      	beq.n	8007738 <pb_skip_string+0x24>
        return false;
 8007734:	2300      	movs	r3, #0
 8007736:	e006      	b.n	8007746 <pb_skip_string+0x32>
    if ((size_t)length != length)
    {
        PB_RETURN_ERROR(stream, "size too large");
    }

    return pb_read(stream, NULL, (size_t)length);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	461a      	mov	r2, r3
 800773c:	2100      	movs	r1, #0
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f7ff fddc 	bl	80072fc <pb_read>
 8007744:	4603      	mov	r3, r0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <pb_decode_tag>:

bool checkreturn pb_decode_tag(pb_istream_t *stream, pb_wire_type_t *wire_type, uint32_t *tag, bool *eof)
{
 800774e:	b580      	push	{r7, lr}
 8007750:	b086      	sub	sp, #24
 8007752:	af00      	add	r7, sp, #0
 8007754:	60f8      	str	r0, [r7, #12]
 8007756:	60b9      	str	r1, [r7, #8]
 8007758:	607a      	str	r2, [r7, #4]
 800775a:	603b      	str	r3, [r7, #0]
    uint32_t temp;
    *eof = false;
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	2200      	movs	r2, #0
 8007760:	701a      	strb	r2, [r3, #0]
    *wire_type = (pb_wire_type_t) 0;
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	2200      	movs	r2, #0
 8007766:	701a      	strb	r2, [r3, #0]
    *tag = 0;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	601a      	str	r2, [r3, #0]
    
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 800776e:	f107 0314 	add.w	r3, r7, #20
 8007772:	683a      	ldr	r2, [r7, #0]
 8007774:	4619      	mov	r1, r3
 8007776:	68f8      	ldr	r0, [r7, #12]
 8007778:	f7ff fe90 	bl	800749c <pb_decode_varint32_eof>
 800777c:	4603      	mov	r3, r0
 800777e:	f083 0301 	eor.w	r3, r3, #1
 8007782:	b2db      	uxtb	r3, r3
 8007784:	2b00      	cmp	r3, #0
 8007786:	d001      	beq.n	800778c <pb_decode_tag+0x3e>
    {
        return false;
 8007788:	2300      	movs	r3, #0
 800778a:	e00b      	b.n	80077a4 <pb_decode_tag+0x56>
    }
    
    *tag = temp >> 3;
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	08da      	lsrs	r2, r3, #3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	601a      	str	r2, [r3, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	b2db      	uxtb	r3, r3
 8007798:	f003 0307 	and.w	r3, r3, #7
 800779c:	b2da      	uxtb	r2, r3
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	701a      	strb	r2, [r3, #0]
    return true;
 80077a2:	2301      	movs	r3, #1
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3718      	adds	r7, #24
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <pb_skip_field>:

bool checkreturn pb_skip_field(pb_istream_t *stream, pb_wire_type_t wire_type)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	460b      	mov	r3, r1
 80077b6:	70fb      	strb	r3, [r7, #3]
    switch (wire_type)
 80077b8:	78fb      	ldrb	r3, [r7, #3]
 80077ba:	2b05      	cmp	r3, #5
 80077bc:	d826      	bhi.n	800780c <pb_skip_field+0x60>
 80077be:	a201      	add	r2, pc, #4	@ (adr r2, 80077c4 <pb_skip_field+0x18>)
 80077c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c4:	080077dd 	.word	0x080077dd
 80077c8:	080077e7 	.word	0x080077e7
 80077cc:	080077f5 	.word	0x080077f5
 80077d0:	0800780d 	.word	0x0800780d
 80077d4:	0800780d 	.word	0x0800780d
 80077d8:	080077ff 	.word	0x080077ff
    {
        case PB_WT_VARINT: return pb_skip_varint(stream);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f7ff ff7d 	bl	80076dc <pb_skip_varint>
 80077e2:	4603      	mov	r3, r0
 80077e4:	e01d      	b.n	8007822 <pb_skip_field+0x76>
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 80077e6:	2208      	movs	r2, #8
 80077e8:	2100      	movs	r1, #0
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f7ff fd86 	bl	80072fc <pb_read>
 80077f0:	4603      	mov	r3, r0
 80077f2:	e016      	b.n	8007822 <pb_skip_field+0x76>
        case PB_WT_STRING: return pb_skip_string(stream);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f7ff ff8d 	bl	8007714 <pb_skip_string>
 80077fa:	4603      	mov	r3, r0
 80077fc:	e011      	b.n	8007822 <pb_skip_field+0x76>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 80077fe:	2204      	movs	r2, #4
 8007800:	2100      	movs	r1, #0
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f7ff fd7a 	bl	80072fc <pb_read>
 8007808:	4603      	mov	r3, r0
 800780a:	e00a      	b.n	8007822 <pb_skip_field+0x76>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d002      	beq.n	800781a <pb_skip_field+0x6e>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	e000      	b.n	800781c <pb_skip_field+0x70>
 800781a:	4b04      	ldr	r3, [pc, #16]	@ (800782c <pb_skip_field+0x80>)
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	60d3      	str	r3, [r2, #12]
 8007820:	2300      	movs	r3, #0
    }
}
 8007822:	4618      	mov	r0, r3
 8007824:	3708      	adds	r7, #8
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	0800a290 	.word	0x0800a290

08007830 <read_raw_value>:

/* Read a raw value to buffer, for the purpose of passing it to callback as
 * a substream. Size is maximum size on call, and actual size on return.
 */
static bool checkreturn read_raw_value(pb_istream_t *stream, pb_wire_type_t wire_type, pb_byte_t *buf, size_t *size)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b086      	sub	sp, #24
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	607a      	str	r2, [r7, #4]
 800783a:	603b      	str	r3, [r7, #0]
 800783c:	460b      	mov	r3, r1
 800783e:	72fb      	strb	r3, [r7, #11]
    size_t max_size = *size;
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	617b      	str	r3, [r7, #20]
    switch (wire_type)
 8007846:	7afb      	ldrb	r3, [r7, #11]
 8007848:	2b05      	cmp	r3, #5
 800784a:	d03f      	beq.n	80078cc <read_raw_value+0x9c>
 800784c:	2b05      	cmp	r3, #5
 800784e:	dc47      	bgt.n	80078e0 <read_raw_value+0xb0>
 8007850:	2b00      	cmp	r3, #0
 8007852:	d002      	beq.n	800785a <read_raw_value+0x2a>
 8007854:	2b01      	cmp	r3, #1
 8007856:	d02f      	beq.n	80078b8 <read_raw_value+0x88>
 8007858:	e042      	b.n	80078e0 <read_raw_value+0xb0>
    {
        case PB_WT_VARINT:
            *size = 0;
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	2200      	movs	r2, #0
 800785e:	601a      	str	r2, [r3, #0]
            do
            {
                (*size)++;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	1c5a      	adds	r2, r3, #1
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	601a      	str	r2, [r3, #0]
                if (*size > max_size)
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	697a      	ldr	r2, [r7, #20]
 8007870:	429a      	cmp	r2, r3
 8007872:	d20b      	bcs.n	800788c <read_raw_value+0x5c>
                    PB_RETURN_ERROR(stream, "varint overflow");
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d002      	beq.n	8007882 <read_raw_value+0x52>
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	e000      	b.n	8007884 <read_raw_value+0x54>
 8007882:	4b1f      	ldr	r3, [pc, #124]	@ (8007900 <read_raw_value+0xd0>)
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	60d3      	str	r3, [r2, #12]
 8007888:	2300      	movs	r3, #0
 800788a:	e034      	b.n	80078f6 <read_raw_value+0xc6>

                if (!pb_read(stream, buf, 1))
 800788c:	2201      	movs	r2, #1
 800788e:	6879      	ldr	r1, [r7, #4]
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f7ff fd33 	bl	80072fc <pb_read>
 8007896:	4603      	mov	r3, r0
 8007898:	f083 0301 	eor.w	r3, r3, #1
 800789c:	b2db      	uxtb	r3, r3
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d001      	beq.n	80078a6 <read_raw_value+0x76>
                    return false;
 80078a2:	2300      	movs	r3, #0
 80078a4:	e027      	b.n	80078f6 <read_raw_value+0xc6>
            } while (*buf++ & 0x80);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	1c5a      	adds	r2, r3, #1
 80078aa:	607a      	str	r2, [r7, #4]
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	b25b      	sxtb	r3, r3
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	dbd5      	blt.n	8007860 <read_raw_value+0x30>
            return true;
 80078b4:	2301      	movs	r3, #1
 80078b6:	e01e      	b.n	80078f6 <read_raw_value+0xc6>
            
        case PB_WT_64BIT:
            *size = 8;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	2208      	movs	r2, #8
 80078bc:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 8);
 80078be:	2208      	movs	r2, #8
 80078c0:	6879      	ldr	r1, [r7, #4]
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f7ff fd1a 	bl	80072fc <pb_read>
 80078c8:	4603      	mov	r3, r0
 80078ca:	e014      	b.n	80078f6 <read_raw_value+0xc6>
        
        case PB_WT_32BIT:
            *size = 4;
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	2204      	movs	r2, #4
 80078d0:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 4);
 80078d2:	2204      	movs	r2, #4
 80078d4:	6879      	ldr	r1, [r7, #4]
 80078d6:	68f8      	ldr	r0, [r7, #12]
 80078d8:	f7ff fd10 	bl	80072fc <pb_read>
 80078dc:	4603      	mov	r3, r0
 80078de:	e00a      	b.n	80078f6 <read_raw_value+0xc6>
            /* Calling read_raw_value with a PB_WT_STRING is an error.
             * Explicitly handle this case and fallthrough to default to avoid
             * compiler warnings.
             */

        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d002      	beq.n	80078ee <read_raw_value+0xbe>
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	e000      	b.n	80078f0 <read_raw_value+0xc0>
 80078ee:	4b05      	ldr	r3, [pc, #20]	@ (8007904 <read_raw_value+0xd4>)
 80078f0:	68fa      	ldr	r2, [r7, #12]
 80078f2:	60d3      	str	r3, [r2, #12]
 80078f4:	2300      	movs	r3, #0
    }
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3718      	adds	r7, #24
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	0800a280 	.word	0x0800a280
 8007904:	0800a290 	.word	0x0800a290

08007908 <pb_make_string_substream>:

/* Decode string length from stream and return a substream with limited length.
 * Remember to close the substream using pb_close_string_substream().
 */
bool checkreturn pb_make_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 8007908:	b590      	push	{r4, r7, lr}
 800790a:	b085      	sub	sp, #20
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
    uint32_t size;
    if (!pb_decode_varint32(stream, &size))
 8007912:	f107 030c 	add.w	r3, r7, #12
 8007916:	4619      	mov	r1, r3
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f7ff fe69 	bl	80075f0 <pb_decode_varint32>
 800791e:	4603      	mov	r3, r0
 8007920:	f083 0301 	eor.w	r3, r3, #1
 8007924:	b2db      	uxtb	r3, r3
 8007926:	2b00      	cmp	r3, #0
 8007928:	d001      	beq.n	800792e <pb_make_string_substream+0x26>
        return false;
 800792a:	2300      	movs	r3, #0
 800792c:	e020      	b.n	8007970 <pb_make_string_substream+0x68>
    
    *substream = *stream;
 800792e:	683a      	ldr	r2, [r7, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	4614      	mov	r4, r2
 8007934:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007936:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	689a      	ldr	r2, [r3, #8]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	429a      	cmp	r2, r3
 8007942:	d20b      	bcs.n	800795c <pb_make_string_substream+0x54>
        PB_RETURN_ERROR(stream, "parent stream too short");
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d002      	beq.n	8007952 <pb_make_string_substream+0x4a>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	e000      	b.n	8007954 <pb_make_string_substream+0x4c>
 8007952:	4b09      	ldr	r3, [pc, #36]	@ (8007978 <pb_make_string_substream+0x70>)
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	60d3      	str	r3, [r2, #12]
 8007958:	2300      	movs	r3, #0
 800795a:	e009      	b.n	8007970 <pb_make_string_substream+0x68>
    
    substream->bytes_left = (size_t)size;
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	609a      	str	r2, [r3, #8]
    stream->bytes_left -= (size_t)size;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	689a      	ldr	r2, [r3, #8]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	1ad2      	subs	r2, r2, r3
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	609a      	str	r2, [r3, #8]
    return true;
 800796e:	2301      	movs	r3, #1
}
 8007970:	4618      	mov	r0, r3
 8007972:	3714      	adds	r7, #20
 8007974:	46bd      	mov	sp, r7
 8007976:	bd90      	pop	{r4, r7, pc}
 8007978:	0800a2a4 	.word	0x0800a2a4

0800797c <pb_close_string_substream>:

bool checkreturn pb_close_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
    if (substream->bytes_left) {
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00e      	beq.n	80079ac <pb_close_string_substream+0x30>
        if (!pb_read(substream, NULL, substream->bytes_left))
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	461a      	mov	r2, r3
 8007994:	2100      	movs	r1, #0
 8007996:	6838      	ldr	r0, [r7, #0]
 8007998:	f7ff fcb0 	bl	80072fc <pb_read>
 800799c:	4603      	mov	r3, r0
 800799e:	f083 0301 	eor.w	r3, r3, #1
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d001      	beq.n	80079ac <pb_close_string_substream+0x30>
            return false;
 80079a8:	2300      	movs	r3, #0
 80079aa:	e008      	b.n	80079be <pb_close_string_substream+0x42>
    }

    stream->state = substream->state;
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	685a      	ldr	r2, [r3, #4]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	605a      	str	r2, [r3, #4]

#ifndef PB_NO_ERRMSG
    stream->errmsg = substream->errmsg;
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	68da      	ldr	r2, [r3, #12]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	60da      	str	r2, [r3, #12]
#endif
    return true;
 80079bc:	2301      	movs	r3, #1
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3708      	adds	r7, #8
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
	...

080079c8 <decode_basic_field>:
/*************************
 * Decode a single field *
 *************************/

static bool checkreturn decode_basic_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	460b      	mov	r3, r1
 80079d2:	607a      	str	r2, [r7, #4]
 80079d4:	72fb      	strb	r3, [r7, #11]
    switch (PB_LTYPE(field->type))
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	7d9b      	ldrb	r3, [r3, #22]
 80079da:	f003 030f 	and.w	r3, r3, #15
 80079de:	2b0b      	cmp	r3, #11
 80079e0:	f200 80d4 	bhi.w	8007b8c <decode_basic_field+0x1c4>
 80079e4:	a201      	add	r2, pc, #4	@ (adr r2, 80079ec <decode_basic_field+0x24>)
 80079e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ea:	bf00      	nop
 80079ec:	08007a1d 	.word	0x08007a1d
 80079f0:	08007a4d 	.word	0x08007a4d
 80079f4:	08007a4d 	.word	0x08007a4d
 80079f8:	08007a4d 	.word	0x08007a4d
 80079fc:	08007a7d 	.word	0x08007a7d
 8007a00:	08007ab1 	.word	0x08007ab1
 8007a04:	08007ae5 	.word	0x08007ae5
 8007a08:	08007b0f 	.word	0x08007b0f
 8007a0c:	08007b39 	.word	0x08007b39
 8007a10:	08007b39 	.word	0x08007b39
 8007a14:	08007b8d 	.word	0x08007b8d
 8007a18:	08007b63 	.word	0x08007b63
    {
        case PB_LTYPE_BOOL:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 8007a1c:	7afb      	ldrb	r3, [r7, #11]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00e      	beq.n	8007a40 <decode_basic_field+0x78>
 8007a22:	7afb      	ldrb	r3, [r7, #11]
 8007a24:	2bff      	cmp	r3, #255	@ 0xff
 8007a26:	d00b      	beq.n	8007a40 <decode_basic_field+0x78>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d002      	beq.n	8007a36 <decode_basic_field+0x6e>
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	e000      	b.n	8007a38 <decode_basic_field+0x70>
 8007a36:	4b5d      	ldr	r3, [pc, #372]	@ (8007bac <decode_basic_field+0x1e4>)
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	60d3      	str	r3, [r2, #12]
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	e0b0      	b.n	8007ba2 <decode_basic_field+0x1da>

            return pb_dec_bool(stream, field);
 8007a40:	6879      	ldr	r1, [r7, #4]
 8007a42:	68f8      	ldr	r0, [r7, #12]
 8007a44:	f000 fef6 	bl	8008834 <pb_dec_bool>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	e0aa      	b.n	8007ba2 <decode_basic_field+0x1da>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 8007a4c:	7afb      	ldrb	r3, [r7, #11]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00e      	beq.n	8007a70 <decode_basic_field+0xa8>
 8007a52:	7afb      	ldrb	r3, [r7, #11]
 8007a54:	2bff      	cmp	r3, #255	@ 0xff
 8007a56:	d00b      	beq.n	8007a70 <decode_basic_field+0xa8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	68db      	ldr	r3, [r3, #12]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d002      	beq.n	8007a66 <decode_basic_field+0x9e>
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	e000      	b.n	8007a68 <decode_basic_field+0xa0>
 8007a66:	4b51      	ldr	r3, [pc, #324]	@ (8007bac <decode_basic_field+0x1e4>)
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	60d3      	str	r3, [r2, #12]
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	e098      	b.n	8007ba2 <decode_basic_field+0x1da>

            return pb_dec_varint(stream, field);
 8007a70:	6879      	ldr	r1, [r7, #4]
 8007a72:	68f8      	ldr	r0, [r7, #12]
 8007a74:	f000 feee 	bl	8008854 <pb_dec_varint>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	e092      	b.n	8007ba2 <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED32:
            if (wire_type != PB_WT_32BIT && wire_type != PB_WT_PACKED)
 8007a7c:	7afb      	ldrb	r3, [r7, #11]
 8007a7e:	2b05      	cmp	r3, #5
 8007a80:	d00e      	beq.n	8007aa0 <decode_basic_field+0xd8>
 8007a82:	7afb      	ldrb	r3, [r7, #11]
 8007a84:	2bff      	cmp	r3, #255	@ 0xff
 8007a86:	d00b      	beq.n	8007aa0 <decode_basic_field+0xd8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	68db      	ldr	r3, [r3, #12]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d002      	beq.n	8007a96 <decode_basic_field+0xce>
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	e000      	b.n	8007a98 <decode_basic_field+0xd0>
 8007a96:	4b45      	ldr	r3, [pc, #276]	@ (8007bac <decode_basic_field+0x1e4>)
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	60d3      	str	r3, [r2, #12]
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	e080      	b.n	8007ba2 <decode_basic_field+0x1da>

            return pb_decode_fixed32(stream, field->pData);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	69db      	ldr	r3, [r3, #28]
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	68f8      	ldr	r0, [r7, #12]
 8007aa8:	f000 fe8a 	bl	80087c0 <pb_decode_fixed32>
 8007aac:	4603      	mov	r3, r0
 8007aae:	e078      	b.n	8007ba2 <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED64:
            if (wire_type != PB_WT_64BIT && wire_type != PB_WT_PACKED)
 8007ab0:	7afb      	ldrb	r3, [r7, #11]
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d00e      	beq.n	8007ad4 <decode_basic_field+0x10c>
 8007ab6:	7afb      	ldrb	r3, [r7, #11]
 8007ab8:	2bff      	cmp	r3, #255	@ 0xff
 8007aba:	d00b      	beq.n	8007ad4 <decode_basic_field+0x10c>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d002      	beq.n	8007aca <decode_basic_field+0x102>
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	e000      	b.n	8007acc <decode_basic_field+0x104>
 8007aca:	4b38      	ldr	r3, [pc, #224]	@ (8007bac <decode_basic_field+0x1e4>)
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	60d3      	str	r3, [r2, #12]
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	e066      	b.n	8007ba2 <decode_basic_field+0x1da>
#endif

#ifdef PB_WITHOUT_64BIT
            PB_RETURN_ERROR(stream, "invalid data_size");
#else
            return pb_decode_fixed64(stream, field->pData);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	69db      	ldr	r3, [r3, #28]
 8007ad8:	4619      	mov	r1, r3
 8007ada:	68f8      	ldr	r0, [r7, #12]
 8007adc:	f000 fe8c 	bl	80087f8 <pb_decode_fixed64>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	e05e      	b.n	8007ba2 <decode_basic_field+0x1da>
#endif

        case PB_LTYPE_BYTES:
            if (wire_type != PB_WT_STRING)
 8007ae4:	7afb      	ldrb	r3, [r7, #11]
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d00b      	beq.n	8007b02 <decode_basic_field+0x13a>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d002      	beq.n	8007af8 <decode_basic_field+0x130>
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	e000      	b.n	8007afa <decode_basic_field+0x132>
 8007af8:	4b2c      	ldr	r3, [pc, #176]	@ (8007bac <decode_basic_field+0x1e4>)
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	60d3      	str	r3, [r2, #12]
 8007afe:	2300      	movs	r3, #0
 8007b00:	e04f      	b.n	8007ba2 <decode_basic_field+0x1da>

            return pb_dec_bytes(stream, field);
 8007b02:	6879      	ldr	r1, [r7, #4]
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f000 ffd1 	bl	8008aac <pb_dec_bytes>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	e049      	b.n	8007ba2 <decode_basic_field+0x1da>

        case PB_LTYPE_STRING:
            if (wire_type != PB_WT_STRING)
 8007b0e:	7afb      	ldrb	r3, [r7, #11]
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	d00b      	beq.n	8007b2c <decode_basic_field+0x164>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d002      	beq.n	8007b22 <decode_basic_field+0x15a>
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	e000      	b.n	8007b24 <decode_basic_field+0x15c>
 8007b22:	4b22      	ldr	r3, [pc, #136]	@ (8007bac <decode_basic_field+0x1e4>)
 8007b24:	68fa      	ldr	r2, [r7, #12]
 8007b26:	60d3      	str	r3, [r2, #12]
 8007b28:	2300      	movs	r3, #0
 8007b2a:	e03a      	b.n	8007ba2 <decode_basic_field+0x1da>

            return pb_dec_string(stream, field);
 8007b2c:	6879      	ldr	r1, [r7, #4]
 8007b2e:	68f8      	ldr	r0, [r7, #12]
 8007b30:	f001 f830 	bl	8008b94 <pb_dec_string>
 8007b34:	4603      	mov	r3, r0
 8007b36:	e034      	b.n	8007ba2 <decode_basic_field+0x1da>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            if (wire_type != PB_WT_STRING)
 8007b38:	7afb      	ldrb	r3, [r7, #11]
 8007b3a:	2b02      	cmp	r3, #2
 8007b3c:	d00b      	beq.n	8007b56 <decode_basic_field+0x18e>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d002      	beq.n	8007b4c <decode_basic_field+0x184>
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	e000      	b.n	8007b4e <decode_basic_field+0x186>
 8007b4c:	4b17      	ldr	r3, [pc, #92]	@ (8007bac <decode_basic_field+0x1e4>)
 8007b4e:	68fa      	ldr	r2, [r7, #12]
 8007b50:	60d3      	str	r3, [r2, #12]
 8007b52:	2300      	movs	r3, #0
 8007b54:	e025      	b.n	8007ba2 <decode_basic_field+0x1da>

            return pb_dec_submessage(stream, field);
 8007b56:	6879      	ldr	r1, [r7, #4]
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f001 f897 	bl	8008c8c <pb_dec_submessage>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	e01f      	b.n	8007ba2 <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            if (wire_type != PB_WT_STRING)
 8007b62:	7afb      	ldrb	r3, [r7, #11]
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	d00b      	beq.n	8007b80 <decode_basic_field+0x1b8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d002      	beq.n	8007b76 <decode_basic_field+0x1ae>
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	e000      	b.n	8007b78 <decode_basic_field+0x1b0>
 8007b76:	4b0d      	ldr	r3, [pc, #52]	@ (8007bac <decode_basic_field+0x1e4>)
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	60d3      	str	r3, [r2, #12]
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	e010      	b.n	8007ba2 <decode_basic_field+0x1da>

            return pb_dec_fixed_length_bytes(stream, field);
 8007b80:	6879      	ldr	r1, [r7, #4]
 8007b82:	68f8      	ldr	r0, [r7, #12]
 8007b84:	f001 f90c 	bl	8008da0 <pb_dec_fixed_length_bytes>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	e00a      	b.n	8007ba2 <decode_basic_field+0x1da>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d002      	beq.n	8007b9a <decode_basic_field+0x1d2>
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	e000      	b.n	8007b9c <decode_basic_field+0x1d4>
 8007b9a:	4b05      	ldr	r3, [pc, #20]	@ (8007bb0 <decode_basic_field+0x1e8>)
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	60d3      	str	r3, [r2, #12]
 8007ba0:	2300      	movs	r3, #0
    }
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3710      	adds	r7, #16
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	0800a2bc 	.word	0x0800a2bc
 8007bb0:	0800a2cc 	.word	0x0800a2cc

08007bb4 <decode_static_field>:

static bool checkreturn decode_static_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b096      	sub	sp, #88	@ 0x58
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	607a      	str	r2, [r7, #4]
 8007bc0:	72fb      	strb	r3, [r7, #11]
    switch (PB_HTYPE(field->type))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	7d9b      	ldrb	r3, [r3, #22]
 8007bc6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007bca:	2b30      	cmp	r3, #48	@ 0x30
 8007bcc:	f000 80c2 	beq.w	8007d54 <decode_static_field+0x1a0>
 8007bd0:	2b30      	cmp	r3, #48	@ 0x30
 8007bd2:	f200 811a 	bhi.w	8007e0a <decode_static_field+0x256>
 8007bd6:	2b20      	cmp	r3, #32
 8007bd8:	d01f      	beq.n	8007c1a <decode_static_field+0x66>
 8007bda:	2b20      	cmp	r3, #32
 8007bdc:	f200 8115 	bhi.w	8007e0a <decode_static_field+0x256>
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d002      	beq.n	8007bea <decode_static_field+0x36>
 8007be4:	2b10      	cmp	r3, #16
 8007be6:	d008      	beq.n	8007bfa <decode_static_field+0x46>
 8007be8:	e10f      	b.n	8007e0a <decode_static_field+0x256>
    {
        case PB_HTYPE_REQUIRED:
            return decode_basic_field(stream, wire_type, field);
 8007bea:	7afb      	ldrb	r3, [r7, #11]
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	4619      	mov	r1, r3
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	f7ff fee9 	bl	80079c8 <decode_basic_field>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	e112      	b.n	8007e20 <decode_static_field+0x26c>
            
        case PB_HTYPE_OPTIONAL:
            if (field->pSize != NULL)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a1b      	ldr	r3, [r3, #32]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d003      	beq.n	8007c0a <decode_static_field+0x56>
                *(bool*)field->pSize = true;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a1b      	ldr	r3, [r3, #32]
 8007c06:	2201      	movs	r2, #1
 8007c08:	701a      	strb	r2, [r3, #0]
            return decode_basic_field(stream, wire_type, field);
 8007c0a:	7afb      	ldrb	r3, [r7, #11]
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	4619      	mov	r1, r3
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	f7ff fed9 	bl	80079c8 <decode_basic_field>
 8007c16:	4603      	mov	r3, r0
 8007c18:	e102      	b.n	8007e20 <decode_static_field+0x26c>
    
        case PB_HTYPE_REPEATED:
            if (wire_type == PB_WT_STRING
 8007c1a:	7afb      	ldrb	r3, [r7, #11]
 8007c1c:	2b02      	cmp	r3, #2
 8007c1e:	d16c      	bne.n	8007cfa <decode_static_field+0x146>
                && PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	7d9b      	ldrb	r3, [r3, #22]
 8007c24:	f003 030f 	and.w	r3, r3, #15
 8007c28:	2b05      	cmp	r3, #5
 8007c2a:	d866      	bhi.n	8007cfa <decode_static_field+0x146>
            {
                /* Packed array */
                bool status = true;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                pb_istream_t substream;
                pb_size_t *size = (pb_size_t*)field->pSize;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a1b      	ldr	r3, [r3, #32]
 8007c36:	653b      	str	r3, [r7, #80]	@ 0x50
                field->pData = (char*)field->pField + field->data_size * (*size);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	699b      	ldr	r3, [r3, #24]
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	8a52      	ldrh	r2, [r2, #18]
 8007c40:	4611      	mov	r1, r2
 8007c42:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007c44:	8812      	ldrh	r2, [r2, #0]
 8007c46:	fb01 f202 	mul.w	r2, r1, r2
 8007c4a:	441a      	add	r2, r3
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	61da      	str	r2, [r3, #28]

                if (!pb_make_string_substream(stream, &substream))
 8007c50:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8007c54:	4619      	mov	r1, r3
 8007c56:	68f8      	ldr	r0, [r7, #12]
 8007c58:	f7ff fe56 	bl	8007908 <pb_make_string_substream>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	f083 0301 	eor.w	r3, r3, #1
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d01f      	beq.n	8007ca8 <decode_static_field+0xf4>
                    return false;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	e0d9      	b.n	8007e20 <decode_static_field+0x26c>

                while (substream.bytes_left > 0 && *size < field->array_size)
                {
                    if (!decode_basic_field(&substream, PB_WT_PACKED, field))
 8007c6c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	21ff      	movs	r1, #255	@ 0xff
 8007c74:	4618      	mov	r0, r3
 8007c76:	f7ff fea7 	bl	80079c8 <decode_basic_field>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	f083 0301 	eor.w	r3, r3, #1
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d003      	beq.n	8007c8e <decode_static_field+0xda>
                    {
                        status = false;
 8007c86:	2300      	movs	r3, #0
 8007c88:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                        break;
 8007c8c:	e015      	b.n	8007cba <decode_static_field+0x106>
                    }
                    (*size)++;
 8007c8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c90:	881b      	ldrh	r3, [r3, #0]
 8007c92:	3301      	adds	r3, #1
 8007c94:	b29a      	uxth	r2, r3
 8007c96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c98:	801a      	strh	r2, [r3, #0]
                    field->pData = (char*)field->pData + field->data_size;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	69db      	ldr	r3, [r3, #28]
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	8a52      	ldrh	r2, [r2, #18]
 8007ca2:	441a      	add	r2, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	61da      	str	r2, [r3, #28]
                while (substream.bytes_left > 0 && *size < field->array_size)
 8007ca8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d005      	beq.n	8007cba <decode_static_field+0x106>
 8007cae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cb0:	881a      	ldrh	r2, [r3, #0]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	8a9b      	ldrh	r3, [r3, #20]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d3d8      	bcc.n	8007c6c <decode_static_field+0xb8>
                }

                if (substream.bytes_left != 0)
 8007cba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00b      	beq.n	8007cd8 <decode_static_field+0x124>
                    PB_RETURN_ERROR(stream, "array overflow");
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d002      	beq.n	8007cce <decode_static_field+0x11a>
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	e000      	b.n	8007cd0 <decode_static_field+0x11c>
 8007cce:	4b56      	ldr	r3, [pc, #344]	@ (8007e28 <decode_static_field+0x274>)
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	60d3      	str	r3, [r2, #12]
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	e0a3      	b.n	8007e20 <decode_static_field+0x26c>
                if (!pb_close_string_substream(stream, &substream))
 8007cd8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8007cdc:	4619      	mov	r1, r3
 8007cde:	68f8      	ldr	r0, [r7, #12]
 8007ce0:	f7ff fe4c 	bl	800797c <pb_close_string_substream>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	f083 0301 	eor.w	r3, r3, #1
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d001      	beq.n	8007cf4 <decode_static_field+0x140>
                    return false;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	e095      	b.n	8007e20 <decode_static_field+0x26c>

                return status;
 8007cf4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007cf8:	e092      	b.n	8007e20 <decode_static_field+0x26c>
            }
            else
            {
                /* Repeated field */
                pb_size_t *size = (pb_size_t*)field->pSize;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a1b      	ldr	r3, [r3, #32]
 8007cfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
                field->pData = (char*)field->pField + field->data_size * (*size);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	699b      	ldr	r3, [r3, #24]
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	8a52      	ldrh	r2, [r2, #18]
 8007d08:	4611      	mov	r1, r2
 8007d0a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007d0c:	8812      	ldrh	r2, [r2, #0]
 8007d0e:	fb01 f202 	mul.w	r2, r1, r2
 8007d12:	441a      	add	r2, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	61da      	str	r2, [r3, #28]

                if ((*size)++ >= field->array_size)
 8007d18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d1a:	881b      	ldrh	r3, [r3, #0]
 8007d1c:	1c5a      	adds	r2, r3, #1
 8007d1e:	b291      	uxth	r1, r2
 8007d20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007d22:	8011      	strh	r1, [r2, #0]
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	8a92      	ldrh	r2, [r2, #20]
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d30b      	bcc.n	8007d44 <decode_static_field+0x190>
                    PB_RETURN_ERROR(stream, "array overflow");
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d002      	beq.n	8007d3a <decode_static_field+0x186>
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	e000      	b.n	8007d3c <decode_static_field+0x188>
 8007d3a:	4b3b      	ldr	r3, [pc, #236]	@ (8007e28 <decode_static_field+0x274>)
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	60d3      	str	r3, [r2, #12]
 8007d40:	2300      	movs	r3, #0
 8007d42:	e06d      	b.n	8007e20 <decode_static_field+0x26c>

                return decode_basic_field(stream, wire_type, field);
 8007d44:	7afb      	ldrb	r3, [r7, #11]
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	4619      	mov	r1, r3
 8007d4a:	68f8      	ldr	r0, [r7, #12]
 8007d4c:	f7ff fe3c 	bl	80079c8 <decode_basic_field>
 8007d50:	4603      	mov	r3, r0
 8007d52:	e065      	b.n	8007e20 <decode_static_field+0x26c>
            }

        case PB_HTYPE_ONEOF:
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	7d9b      	ldrb	r3, [r3, #22]
 8007d58:	f003 030f 	and.w	r3, r3, #15
 8007d5c:	2b08      	cmp	r3, #8
 8007d5e:	d005      	beq.n	8007d6c <decode_static_field+0x1b8>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	7d9b      	ldrb	r3, [r3, #22]
 8007d64:	f003 030f 	and.w	r3, r3, #15
 8007d68:	2b09      	cmp	r3, #9
 8007d6a:	d141      	bne.n	8007df0 <decode_static_field+0x23c>
                *(pb_size_t*)field->pSize != field->tag)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a1b      	ldr	r3, [r3, #32]
 8007d70:	881a      	ldrh	r2, [r3, #0]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	8a1b      	ldrh	r3, [r3, #16]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d03a      	beq.n	8007df0 <decode_static_field+0x23c>
                 * from some other union field.
                 * If callbacks are needed inside oneof field, use .proto
                 * option submsg_callback to have a separate callback function
                 * that can set the fields before submessage is decoded.
                 * pb_dec_submessage() will set any default values. */
                memset(field->pData, 0, (size_t)field->data_size);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	69d8      	ldr	r0, [r3, #28]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	8a5b      	ldrh	r3, [r3, #18]
 8007d82:	461a      	mov	r2, r3
 8007d84:	2100      	movs	r1, #0
 8007d86:	f001 fcf9 	bl	800977c <memset>

                /* Set default values for the submessage fields. */
                if (field->submsg_desc->default_value != NULL ||
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d10a      	bne.n	8007daa <decode_static_field+0x1f6>
                    field->submsg_desc->field_callback != NULL ||
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d98:	68db      	ldr	r3, [r3, #12]
                if (field->submsg_desc->default_value != NULL ||
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d105      	bne.n	8007daa <decode_static_field+0x1f6>
                    field->submsg_desc->submsg_info[0] != NULL)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
                    field->submsg_desc->field_callback != NULL ||
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d022      	beq.n	8007df0 <decode_static_field+0x23c>
                {
                    pb_field_iter_t submsg_iter;
                    if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	69da      	ldr	r2, [r3, #28]
 8007db2:	f107 0314 	add.w	r3, r7, #20
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7ff f99d 	bl	80070f6 <pb_field_iter_begin>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d016      	beq.n	8007df0 <decode_static_field+0x23c>
                    {
                        if (!pb_message_set_to_defaults(&submsg_iter))
 8007dc2:	f107 0314 	add.w	r3, r7, #20
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f000 fa4d 	bl	8008266 <pb_message_set_to_defaults>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	f083 0301 	eor.w	r3, r3, #1
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00b      	beq.n	8007df0 <decode_static_field+0x23c>
                            PB_RETURN_ERROR(stream, "failed to set defaults");
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d002      	beq.n	8007de6 <decode_static_field+0x232>
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	e000      	b.n	8007de8 <decode_static_field+0x234>
 8007de6:	4b11      	ldr	r3, [pc, #68]	@ (8007e2c <decode_static_field+0x278>)
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	60d3      	str	r3, [r2, #12]
 8007dec:	2300      	movs	r3, #0
 8007dee:	e017      	b.n	8007e20 <decode_static_field+0x26c>
                    }
                }
            }
            *(pb_size_t*)field->pSize = field->tag;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6a1b      	ldr	r3, [r3, #32]
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	8a12      	ldrh	r2, [r2, #16]
 8007df8:	801a      	strh	r2, [r3, #0]

            return decode_basic_field(stream, wire_type, field);
 8007dfa:	7afb      	ldrb	r3, [r7, #11]
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	4619      	mov	r1, r3
 8007e00:	68f8      	ldr	r0, [r7, #12]
 8007e02:	f7ff fde1 	bl	80079c8 <decode_basic_field>
 8007e06:	4603      	mov	r3, r0
 8007e08:	e00a      	b.n	8007e20 <decode_static_field+0x26c>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d002      	beq.n	8007e18 <decode_static_field+0x264>
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	e000      	b.n	8007e1a <decode_static_field+0x266>
 8007e18:	4b05      	ldr	r3, [pc, #20]	@ (8007e30 <decode_static_field+0x27c>)
 8007e1a:	68fa      	ldr	r2, [r7, #12]
 8007e1c:	60d3      	str	r3, [r2, #12]
 8007e1e:	2300      	movs	r3, #0
    }
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3758      	adds	r7, #88	@ 0x58
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	0800a2e0 	.word	0x0800a2e0
 8007e2c:	0800a2f0 	.word	0x0800a2f0
 8007e30:	0800a2cc 	.word	0x0800a2cc

08007e34 <decode_pointer_field>:
    }
}
#endif

static bool checkreturn decode_pointer_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b085      	sub	sp, #20
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	607a      	str	r2, [r7, #4]
 8007e40:	72fb      	strb	r3, [r7, #11]
#ifndef PB_ENABLE_MALLOC
    PB_UNUSED(wire_type);
    PB_UNUSED(field);
    PB_RETURN_ERROR(stream, "no malloc support");
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d002      	beq.n	8007e50 <decode_pointer_field+0x1c>
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	e000      	b.n	8007e52 <decode_pointer_field+0x1e>
 8007e50:	4b04      	ldr	r3, [pc, #16]	@ (8007e64 <decode_pointer_field+0x30>)
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	60d3      	str	r3, [r2, #12]
 8007e56:	2300      	movs	r3, #0

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
    }
#endif
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3714      	adds	r7, #20
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr
 8007e64:	0800a308 	.word	0x0800a308

08007e68 <decode_callback_field>:

static bool checkreturn decode_callback_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8007e68:	b590      	push	{r4, r7, lr}
 8007e6a:	b097      	sub	sp, #92	@ 0x5c
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	61f8      	str	r0, [r7, #28]
 8007e70:	460b      	mov	r3, r1
 8007e72:	617a      	str	r2, [r7, #20]
 8007e74:	76fb      	strb	r3, [r7, #27]
    if (!field->descriptor->field_callback)
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d106      	bne.n	8007e8e <decode_callback_field+0x26>
        return pb_skip_field(stream, wire_type);
 8007e80:	7efb      	ldrb	r3, [r7, #27]
 8007e82:	4619      	mov	r1, r3
 8007e84:	69f8      	ldr	r0, [r7, #28]
 8007e86:	f7ff fc91 	bl	80077ac <pb_skip_field>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	e070      	b.n	8007f70 <decode_callback_field+0x108>

    if (wire_type == PB_WT_STRING)
 8007e8e:	7efb      	ldrb	r3, [r7, #27]
 8007e90:	2b02      	cmp	r3, #2
 8007e92:	d145      	bne.n	8007f20 <decode_callback_field+0xb8>
    {
        pb_istream_t substream;
        size_t prev_bytes_left;
        
        if (!pb_make_string_substream(stream, &substream))
 8007e94:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8007e98:	4619      	mov	r1, r3
 8007e9a:	69f8      	ldr	r0, [r7, #28]
 8007e9c:	f7ff fd34 	bl	8007908 <pb_make_string_substream>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	f083 0301 	eor.w	r3, r3, #1
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d001      	beq.n	8007eb0 <decode_callback_field+0x48>
            return false;
 8007eac:	2300      	movs	r3, #0
 8007eae:	e05f      	b.n	8007f70 <decode_callback_field+0x108>
        
        do
        {
            prev_bytes_left = substream.bytes_left;
 8007eb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007eb2:	657b      	str	r3, [r7, #84]	@ 0x54
            if (!field->descriptor->field_callback(&substream, NULL, field))
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8007ebe:	697a      	ldr	r2, [r7, #20]
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	4798      	blx	r3
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	f083 0301 	eor.w	r3, r3, #1
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d010      	beq.n	8007ef2 <decode_callback_field+0x8a>
            {
                PB_SET_ERROR(stream, substream.errmsg ? substream.errmsg : "callback failed");
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d002      	beq.n	8007ede <decode_callback_field+0x76>
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	e005      	b.n	8007eea <decode_callback_field+0x82>
 8007ede:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d001      	beq.n	8007ee8 <decode_callback_field+0x80>
 8007ee4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ee6:	e000      	b.n	8007eea <decode_callback_field+0x82>
 8007ee8:	4b23      	ldr	r3, [pc, #140]	@ (8007f78 <decode_callback_field+0x110>)
 8007eea:	69fa      	ldr	r2, [r7, #28]
 8007eec:	60d3      	str	r3, [r2, #12]
                return false;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	e03e      	b.n	8007f70 <decode_callback_field+0x108>
            }
        } while (substream.bytes_left > 0 && substream.bytes_left < prev_bytes_left);
 8007ef2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d003      	beq.n	8007f00 <decode_callback_field+0x98>
 8007ef8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007efa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d8d7      	bhi.n	8007eb0 <decode_callback_field+0x48>
        
        if (!pb_close_string_substream(stream, &substream))
 8007f00:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8007f04:	4619      	mov	r1, r3
 8007f06:	69f8      	ldr	r0, [r7, #28]
 8007f08:	f7ff fd38 	bl	800797c <pb_close_string_substream>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	f083 0301 	eor.w	r3, r3, #1
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d001      	beq.n	8007f1c <decode_callback_field+0xb4>
            return false;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	e029      	b.n	8007f70 <decode_callback_field+0x108>

        return true;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e027      	b.n	8007f70 <decode_callback_field+0x108>
         * This is required so that we can limit the stream length,
         * which in turn allows to use same callback for packed and
         * not-packed fields. */
        pb_istream_t substream;
        pb_byte_t buffer[10];
        size_t size = sizeof(buffer);
 8007f20:	230a      	movs	r3, #10
 8007f22:	627b      	str	r3, [r7, #36]	@ 0x24
        
        if (!read_raw_value(stream, wire_type, buffer, &size))
 8007f24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f28:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8007f2c:	7ef9      	ldrb	r1, [r7, #27]
 8007f2e:	69f8      	ldr	r0, [r7, #28]
 8007f30:	f7ff fc7e 	bl	8007830 <read_raw_value>
 8007f34:	4603      	mov	r3, r0
 8007f36:	f083 0301 	eor.w	r3, r3, #1
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d001      	beq.n	8007f44 <decode_callback_field+0xdc>
            return false;
 8007f40:	2300      	movs	r3, #0
 8007f42:	e015      	b.n	8007f70 <decode_callback_field+0x108>
        substream = pb_istream_from_buffer(buffer, size);
 8007f44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f46:	463b      	mov	r3, r7
 8007f48:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f7ff fa87 	bl	8007460 <pb_istream_from_buffer>
 8007f52:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8007f56:	463b      	mov	r3, r7
 8007f58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007f5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        
        return field->descriptor->field_callback(&substream, NULL, field);
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8007f68:	697a      	ldr	r2, [r7, #20]
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	4798      	blx	r3
 8007f6e:	4603      	mov	r3, r0
    }
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	375c      	adds	r7, #92	@ 0x5c
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd90      	pop	{r4, r7, pc}
 8007f78:	0800a31c 	.word	0x0800a31c

08007f7c <decode_field>:

static bool checkreturn decode_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	460b      	mov	r3, r1
 8007f86:	607a      	str	r2, [r7, #4]
 8007f88:	72fb      	strb	r3, [r7, #11]
        if (!pb_release_union_field(stream, field))
            return false;
    }
#endif

    switch (PB_ATYPE(field->type))
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	7d9b      	ldrb	r3, [r3, #22]
 8007f8e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007f92:	2b80      	cmp	r3, #128	@ 0x80
 8007f94:	d00e      	beq.n	8007fb4 <decode_field+0x38>
 8007f96:	2b80      	cmp	r3, #128	@ 0x80
 8007f98:	d81c      	bhi.n	8007fd4 <decode_field+0x58>
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d002      	beq.n	8007fa4 <decode_field+0x28>
 8007f9e:	2b40      	cmp	r3, #64	@ 0x40
 8007fa0:	d010      	beq.n	8007fc4 <decode_field+0x48>
 8007fa2:	e017      	b.n	8007fd4 <decode_field+0x58>
    {
        case PB_ATYPE_STATIC:
            return decode_static_field(stream, wire_type, field);
 8007fa4:	7afb      	ldrb	r3, [r7, #11]
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	4619      	mov	r1, r3
 8007faa:	68f8      	ldr	r0, [r7, #12]
 8007fac:	f7ff fe02 	bl	8007bb4 <decode_static_field>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	e01a      	b.n	8007fea <decode_field+0x6e>
        
        case PB_ATYPE_POINTER:
            return decode_pointer_field(stream, wire_type, field);
 8007fb4:	7afb      	ldrb	r3, [r7, #11]
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	4619      	mov	r1, r3
 8007fba:	68f8      	ldr	r0, [r7, #12]
 8007fbc:	f7ff ff3a 	bl	8007e34 <decode_pointer_field>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	e012      	b.n	8007fea <decode_field+0x6e>
        
        case PB_ATYPE_CALLBACK:
            return decode_callback_field(stream, wire_type, field);
 8007fc4:	7afb      	ldrb	r3, [r7, #11]
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	4619      	mov	r1, r3
 8007fca:	68f8      	ldr	r0, [r7, #12]
 8007fcc:	f7ff ff4c 	bl	8007e68 <decode_callback_field>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	e00a      	b.n	8007fea <decode_field+0x6e>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d002      	beq.n	8007fe2 <decode_field+0x66>
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	e000      	b.n	8007fe4 <decode_field+0x68>
 8007fe2:	4b04      	ldr	r3, [pc, #16]	@ (8007ff4 <decode_field+0x78>)
 8007fe4:	68fa      	ldr	r2, [r7, #12]
 8007fe6:	60d3      	str	r3, [r2, #12]
 8007fe8:	2300      	movs	r3, #0
    }
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3710      	adds	r7, #16
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	0800a2cc 	.word	0x0800a2cc

08007ff8 <default_extension_decoder>:
/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_decoder(pb_istream_t *stream,
    pb_extension_t *extension, uint32_t tag, pb_wire_type_t wire_type)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b08e      	sub	sp, #56	@ 0x38
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	607a      	str	r2, [r7, #4]
 8008004:	70fb      	strb	r3, [r7, #3]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension(&iter, extension))
 8008006:	f107 0310 	add.w	r3, r7, #16
 800800a:	68b9      	ldr	r1, [r7, #8]
 800800c:	4618      	mov	r0, r3
 800800e:	f7ff f88b 	bl	8007128 <pb_field_iter_begin_extension>
 8008012:	4603      	mov	r3, r0
 8008014:	f083 0301 	eor.w	r3, r3, #1
 8008018:	b2db      	uxtb	r3, r3
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00b      	beq.n	8008036 <default_extension_decoder+0x3e>
        PB_RETURN_ERROR(stream, "invalid extension");
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	68db      	ldr	r3, [r3, #12]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d002      	beq.n	800802c <default_extension_decoder+0x34>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	e000      	b.n	800802e <default_extension_decoder+0x36>
 800802c:	4b0e      	ldr	r3, [pc, #56]	@ (8008068 <default_extension_decoder+0x70>)
 800802e:	68fa      	ldr	r2, [r7, #12]
 8008030:	60d3      	str	r3, [r2, #12]
 8008032:	2300      	movs	r3, #0
 8008034:	e014      	b.n	8008060 <default_extension_decoder+0x68>

    if (iter.tag != tag || !iter.message)
 8008036:	8c3b      	ldrh	r3, [r7, #32]
 8008038:	461a      	mov	r2, r3
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	4293      	cmp	r3, r2
 800803e:	d102      	bne.n	8008046 <default_extension_decoder+0x4e>
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d101      	bne.n	800804a <default_extension_decoder+0x52>
        return true;
 8008046:	2301      	movs	r3, #1
 8008048:	e00a      	b.n	8008060 <default_extension_decoder+0x68>

    extension->found = true;
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	2201      	movs	r2, #1
 800804e:	731a      	strb	r2, [r3, #12]
    return decode_field(stream, wire_type, &iter);
 8008050:	f107 0210 	add.w	r2, r7, #16
 8008054:	78fb      	ldrb	r3, [r7, #3]
 8008056:	4619      	mov	r1, r3
 8008058:	68f8      	ldr	r0, [r7, #12]
 800805a:	f7ff ff8f 	bl	8007f7c <decode_field>
 800805e:	4603      	mov	r3, r0
}
 8008060:	4618      	mov	r0, r3
 8008062:	3738      	adds	r7, #56	@ 0x38
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}
 8008068:	0800a32c 	.word	0x0800a32c

0800806c <decode_extension>:

/* Try to decode an unknown field as an extension field. Tries each extension
 * decoder in turn, until one of them handles the field or loop ends. */
static bool checkreturn decode_extension(pb_istream_t *stream,
    uint32_t tag, pb_wire_type_t wire_type, pb_extension_t *extension)
{
 800806c:	b590      	push	{r4, r7, lr}
 800806e:	b087      	sub	sp, #28
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	603b      	str	r3, [r7, #0]
 8008078:	4613      	mov	r3, r2
 800807a:	71fb      	strb	r3, [r7, #7]
    size_t pos = stream->bytes_left;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	613b      	str	r3, [r7, #16]
    
    while (extension != NULL && pos == stream->bytes_left)
 8008082:	e022      	b.n	80080ca <decode_extension+0x5e>
    {
        bool status;
        if (extension->type->decode)
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00a      	beq.n	80080a4 <decode_extension+0x38>
            status = extension->type->decode(stream, extension, tag, wire_type);
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681c      	ldr	r4, [r3, #0]
 8008094:	79fb      	ldrb	r3, [r7, #7]
 8008096:	68ba      	ldr	r2, [r7, #8]
 8008098:	6839      	ldr	r1, [r7, #0]
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	47a0      	blx	r4
 800809e:	4603      	mov	r3, r0
 80080a0:	75fb      	strb	r3, [r7, #23]
 80080a2:	e007      	b.n	80080b4 <decode_extension+0x48>
        else
            status = default_extension_decoder(stream, extension, tag, wire_type);
 80080a4:	79fb      	ldrb	r3, [r7, #7]
 80080a6:	68ba      	ldr	r2, [r7, #8]
 80080a8:	6839      	ldr	r1, [r7, #0]
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	f7ff ffa4 	bl	8007ff8 <default_extension_decoder>
 80080b0:	4603      	mov	r3, r0
 80080b2:	75fb      	strb	r3, [r7, #23]

        if (!status)
 80080b4:	7dfb      	ldrb	r3, [r7, #23]
 80080b6:	f083 0301 	eor.w	r3, r3, #1
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d001      	beq.n	80080c4 <decode_extension+0x58>
            return false;
 80080c0:	2300      	movs	r3, #0
 80080c2:	e00b      	b.n	80080dc <decode_extension+0x70>
        
        extension = extension->next;
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	603b      	str	r3, [r7, #0]
    while (extension != NULL && pos == stream->bytes_left)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d004      	beq.n	80080da <decode_extension+0x6e>
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	693a      	ldr	r2, [r7, #16]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d0d4      	beq.n	8008084 <decode_extension+0x18>
    }
    
    return true;
 80080da:	2301      	movs	r3, #1
}
 80080dc:	4618      	mov	r0, r3
 80080de:	371c      	adds	r7, #28
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd90      	pop	{r4, r7, pc}

080080e4 <pb_field_set_to_default>:

/* Initialize message fields to default values, recursively */
static bool pb_field_set_to_default(pb_field_iter_t *field)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b08e      	sub	sp, #56	@ 0x38
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
    pb_type_t type;
    type = field->type;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	7d9b      	ldrb	r3, [r3, #22]
 80080f0:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 80080f4:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80080f8:	f003 030f 	and.w	r3, r3, #15
 80080fc:	2b0a      	cmp	r3, #10
 80080fe:	d124      	bne.n	800814a <pb_field_set_to_default+0x66>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)field->pData;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	69db      	ldr	r3, [r3, #28]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	637b      	str	r3, [r7, #52]	@ 0x34
        while (ext != NULL)
 8008108:	e01b      	b.n	8008142 <pb_field_set_to_default+0x5e>
        {
            pb_field_iter_t ext_iter;
            if (pb_field_iter_begin_extension(&ext_iter, ext))
 800810a:	f107 0308 	add.w	r3, r7, #8
 800810e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008110:	4618      	mov	r0, r3
 8008112:	f7ff f809 	bl	8007128 <pb_field_iter_begin_extension>
 8008116:	4603      	mov	r3, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00f      	beq.n	800813c <pb_field_set_to_default+0x58>
            {
                ext->found = false;
 800811c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800811e:	2200      	movs	r2, #0
 8008120:	731a      	strb	r2, [r3, #12]
                if (!pb_message_set_to_defaults(&ext_iter))
 8008122:	f107 0308 	add.w	r3, r7, #8
 8008126:	4618      	mov	r0, r3
 8008128:	f000 f89d 	bl	8008266 <pb_message_set_to_defaults>
 800812c:	4603      	mov	r3, r0
 800812e:	f083 0301 	eor.w	r3, r3, #1
 8008132:	b2db      	uxtb	r3, r3
 8008134:	2b00      	cmp	r3, #0
 8008136:	d001      	beq.n	800813c <pb_field_set_to_default+0x58>
                    return false;
 8008138:	2300      	movs	r3, #0
 800813a:	e090      	b.n	800825e <pb_field_set_to_default+0x17a>
            }
            ext = ext->next;
 800813c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	637b      	str	r3, [r7, #52]	@ 0x34
        while (ext != NULL)
 8008142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008144:	2b00      	cmp	r3, #0
 8008146:	d1e0      	bne.n	800810a <pb_field_set_to_default+0x26>
 8008148:	e088      	b.n	800825c <pb_field_set_to_default+0x178>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 800814a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800814e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d166      	bne.n	8008224 <pb_field_set_to_default+0x140>
    {
        bool init_data = true;
 8008156:	2301      	movs	r3, #1
 8008158:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 800815c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8008160:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008164:	2b10      	cmp	r3, #16
 8008166:	d108      	bne.n	800817a <pb_field_set_to_default+0x96>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6a1b      	ldr	r3, [r3, #32]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d004      	beq.n	800817a <pb_field_set_to_default+0x96>
        {
            /* Set has_field to false. Still initialize the optional field
             * itself also. */
            *(bool*)field->pSize = false;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6a1b      	ldr	r3, [r3, #32]
 8008174:	2200      	movs	r2, #0
 8008176:	701a      	strb	r2, [r3, #0]
 8008178:	e012      	b.n	80081a0 <pb_field_set_to_default+0xbc>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800817a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800817e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008182:	2b20      	cmp	r3, #32
 8008184:	d005      	beq.n	8008192 <pb_field_set_to_default+0xae>
                 PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8008186:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800818a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800818e:	2b30      	cmp	r3, #48	@ 0x30
 8008190:	d106      	bne.n	80081a0 <pb_field_set_to_default+0xbc>
        {
            /* REPEATED: Set array count to 0, no need to initialize contents.
               ONEOF: Set which_field to 0. */
            *(pb_size_t*)field->pSize = 0;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6a1b      	ldr	r3, [r3, #32]
 8008196:	2200      	movs	r2, #0
 8008198:	801a      	strh	r2, [r3, #0]
            init_data = false;
 800819a:	2300      	movs	r3, #0
 800819c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        }

        if (init_data)
 80081a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d059      	beq.n	800825c <pb_field_set_to_default+0x178>
        {
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	7d9b      	ldrb	r3, [r3, #22]
 80081ac:	f003 030f 	and.w	r3, r3, #15
 80081b0:	2b08      	cmp	r3, #8
 80081b2:	d005      	beq.n	80081c0 <pb_field_set_to_default+0xdc>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	7d9b      	ldrb	r3, [r3, #22]
 80081b8:	f003 030f 	and.w	r3, r3, #15
 80081bc:	2b09      	cmp	r3, #9
 80081be:	d128      	bne.n	8008212 <pb_field_set_to_default+0x12e>
                (field->submsg_desc->default_value != NULL ||
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081c4:	689b      	ldr	r3, [r3, #8]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d10a      	bne.n	80081e0 <pb_field_set_to_default+0xfc>
                 field->submsg_desc->field_callback != NULL ||
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081ce:	68db      	ldr	r3, [r3, #12]
                (field->submsg_desc->default_value != NULL ||
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d105      	bne.n	80081e0 <pb_field_set_to_default+0xfc>
                 field->submsg_desc->submsg_info[0] != NULL))
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
                 field->submsg_desc->field_callback != NULL ||
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d018      	beq.n	8008212 <pb_field_set_to_default+0x12e>
            {
                /* Initialize submessage to defaults.
                 * Only needed if it has default values
                 * or callback/submessage fields. */
                pb_field_iter_t submsg_iter;
                if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	69da      	ldr	r2, [r3, #28]
 80081e8:	f107 0308 	add.w	r3, r7, #8
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7fe ff82 	bl	80070f6 <pb_field_iter_begin>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d030      	beq.n	800825a <pb_field_set_to_default+0x176>
                {
                    if (!pb_message_set_to_defaults(&submsg_iter))
 80081f8:	f107 0308 	add.w	r3, r7, #8
 80081fc:	4618      	mov	r0, r3
 80081fe:	f000 f832 	bl	8008266 <pb_message_set_to_defaults>
 8008202:	4603      	mov	r3, r0
 8008204:	f083 0301 	eor.w	r3, r3, #1
 8008208:	b2db      	uxtb	r3, r3
 800820a:	2b00      	cmp	r3, #0
 800820c:	d025      	beq.n	800825a <pb_field_set_to_default+0x176>
                        return false;
 800820e:	2300      	movs	r3, #0
 8008210:	e025      	b.n	800825e <pb_field_set_to_default+0x17a>
                }
            }
            else
            {
                /* Initialize to zeros */
                memset(field->pData, 0, (size_t)field->data_size);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	69d8      	ldr	r0, [r3, #28]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	8a5b      	ldrh	r3, [r3, #18]
 800821a:	461a      	mov	r2, r3
 800821c:	2100      	movs	r1, #0
 800821e:	f001 faad 	bl	800977c <memset>
 8008222:	e01b      	b.n	800825c <pb_field_set_to_default+0x178>
            }
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 8008224:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8008228:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800822c:	2b80      	cmp	r3, #128	@ 0x80
 800822e:	d115      	bne.n	800825c <pb_field_set_to_default+0x178>
    {
        /* Initialize the pointer to NULL. */
        *(void**)field->pField = NULL;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	699b      	ldr	r3, [r3, #24]
 8008234:	2200      	movs	r2, #0
 8008236:	601a      	str	r2, [r3, #0]

        /* Initialize array count to 0. */
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8008238:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800823c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008240:	2b20      	cmp	r3, #32
 8008242:	d005      	beq.n	8008250 <pb_field_set_to_default+0x16c>
            PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8008244:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8008248:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800824c:	2b30      	cmp	r3, #48	@ 0x30
 800824e:	d105      	bne.n	800825c <pb_field_set_to_default+0x178>
        {
            *(pb_size_t*)field->pSize = 0;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6a1b      	ldr	r3, [r3, #32]
 8008254:	2200      	movs	r2, #0
 8008256:	801a      	strh	r2, [r3, #0]
 8008258:	e000      	b.n	800825c <pb_field_set_to_default+0x178>
            {
 800825a:	bf00      	nop
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }

    return true;
 800825c:	2301      	movs	r3, #1
}
 800825e:	4618      	mov	r0, r3
 8008260:	3738      	adds	r7, #56	@ 0x38
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <pb_message_set_to_defaults>:

static bool pb_message_set_to_defaults(pb_field_iter_t *iter)
{
 8008266:	b590      	push	{r4, r7, lr}
 8008268:	b08d      	sub	sp, #52	@ 0x34
 800826a:	af00      	add	r7, sp, #0
 800826c:	6178      	str	r0, [r7, #20]
    pb_istream_t defstream = PB_ISTREAM_EMPTY;
 800826e:	f107 0320 	add.w	r3, r7, #32
 8008272:	2200      	movs	r2, #0
 8008274:	601a      	str	r2, [r3, #0]
 8008276:	605a      	str	r2, [r3, #4]
 8008278:	609a      	str	r2, [r3, #8]
 800827a:	60da      	str	r2, [r3, #12]
    uint32_t tag = 0;
 800827c:	2300      	movs	r3, #0
 800827e:	61fb      	str	r3, [r7, #28]
    pb_wire_type_t wire_type = PB_WT_VARINT;
 8008280:	2300      	movs	r3, #0
 8008282:	76fb      	strb	r3, [r7, #27]
    bool eof;

    if (iter->descriptor->default_value)
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d020      	beq.n	80082d0 <pb_message_set_to_defaults+0x6a>
    {
        defstream = pb_istream_from_buffer(iter->descriptor->default_value, (size_t)-1);
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	6899      	ldr	r1, [r3, #8]
 8008294:	463b      	mov	r3, r7
 8008296:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800829a:	4618      	mov	r0, r3
 800829c:	f7ff f8e0 	bl	8007460 <pb_istream_from_buffer>
 80082a0:	f107 0420 	add.w	r4, r7, #32
 80082a4:	463b      	mov	r3, r7
 80082a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80082a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 80082ac:	f107 031a 	add.w	r3, r7, #26
 80082b0:	f107 021c 	add.w	r2, r7, #28
 80082b4:	f107 011b 	add.w	r1, r7, #27
 80082b8:	f107 0020 	add.w	r0, r7, #32
 80082bc:	f7ff fa47 	bl	800774e <pb_decode_tag>
 80082c0:	4603      	mov	r3, r0
 80082c2:	f083 0301 	eor.w	r3, r3, #1
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d001      	beq.n	80082d0 <pb_message_set_to_defaults+0x6a>
            return false;
 80082cc:	2300      	movs	r3, #0
 80082ce:	e043      	b.n	8008358 <pb_message_set_to_defaults+0xf2>
    }

    do
    {
        if (!pb_field_set_to_default(iter))
 80082d0:	6978      	ldr	r0, [r7, #20]
 80082d2:	f7ff ff07 	bl	80080e4 <pb_field_set_to_default>
 80082d6:	4603      	mov	r3, r0
 80082d8:	f083 0301 	eor.w	r3, r3, #1
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d001      	beq.n	80082e6 <pb_message_set_to_defaults+0x80>
            return false;
 80082e2:	2300      	movs	r3, #0
 80082e4:	e038      	b.n	8008358 <pb_message_set_to_defaults+0xf2>

        if (tag != 0 && iter->tag == tag)
 80082e6:	69fb      	ldr	r3, [r7, #28]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d02e      	beq.n	800834a <pb_message_set_to_defaults+0xe4>
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	8a1b      	ldrh	r3, [r3, #16]
 80082f0:	461a      	mov	r2, r3
 80082f2:	69fb      	ldr	r3, [r7, #28]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d128      	bne.n	800834a <pb_message_set_to_defaults+0xe4>
        {
            /* We have a default value for this field in the defstream */
            if (!decode_field(&defstream, wire_type, iter))
 80082f8:	7ef9      	ldrb	r1, [r7, #27]
 80082fa:	f107 0320 	add.w	r3, r7, #32
 80082fe:	697a      	ldr	r2, [r7, #20]
 8008300:	4618      	mov	r0, r3
 8008302:	f7ff fe3b 	bl	8007f7c <decode_field>
 8008306:	4603      	mov	r3, r0
 8008308:	f083 0301 	eor.w	r3, r3, #1
 800830c:	b2db      	uxtb	r3, r3
 800830e:	2b00      	cmp	r3, #0
 8008310:	d001      	beq.n	8008316 <pb_message_set_to_defaults+0xb0>
                return false;
 8008312:	2300      	movs	r3, #0
 8008314:	e020      	b.n	8008358 <pb_message_set_to_defaults+0xf2>
            if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 8008316:	f107 031a 	add.w	r3, r7, #26
 800831a:	f107 021c 	add.w	r2, r7, #28
 800831e:	f107 011b 	add.w	r1, r7, #27
 8008322:	f107 0020 	add.w	r0, r7, #32
 8008326:	f7ff fa12 	bl	800774e <pb_decode_tag>
 800832a:	4603      	mov	r3, r0
 800832c:	f083 0301 	eor.w	r3, r3, #1
 8008330:	b2db      	uxtb	r3, r3
 8008332:	2b00      	cmp	r3, #0
 8008334:	d001      	beq.n	800833a <pb_message_set_to_defaults+0xd4>
                return false;
 8008336:	2300      	movs	r3, #0
 8008338:	e00e      	b.n	8008358 <pb_message_set_to_defaults+0xf2>

            if (iter->pSize)
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	6a1b      	ldr	r3, [r3, #32]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d003      	beq.n	800834a <pb_message_set_to_defaults+0xe4>
                *(bool*)iter->pSize = false;
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	6a1b      	ldr	r3, [r3, #32]
 8008346:	2200      	movs	r2, #0
 8008348:	701a      	strb	r2, [r3, #0]
        }
    } while (pb_field_iter_next(iter));
 800834a:	6978      	ldr	r0, [r7, #20]
 800834c:	f7fe ff1c 	bl	8007188 <pb_field_iter_next>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d1bc      	bne.n	80082d0 <pb_message_set_to_defaults+0x6a>

    return true;
 8008356:	2301      	movs	r3, #1
}
 8008358:	4618      	mov	r0, r3
 800835a:	3734      	adds	r7, #52	@ 0x34
 800835c:	46bd      	mov	sp, r7
 800835e:	bd90      	pop	{r4, r7, pc}

08008360 <pb_decode_inner>:
/*********************
 * Decode all fields *
 *********************/

static bool checkreturn pb_decode_inner(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct, unsigned int flags)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b09a      	sub	sp, #104	@ 0x68
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	607a      	str	r2, [r7, #4]
 800836c:	603b      	str	r3, [r7, #0]
    uint32_t extension_range_start = 0;
 800836e:	2300      	movs	r3, #0
 8008370:	667b      	str	r3, [r7, #100]	@ 0x64
    pb_extension_t *extensions = NULL;
 8008372:	2300      	movs	r3, #0
 8008374:	663b      	str	r3, [r7, #96]	@ 0x60

    /* 'fixed_count_field' and 'fixed_count_size' track position of a repeated fixed
     * count field. This can only handle _one_ repeated fixed count field that
     * is unpacked and unordered among other (non repeated fixed count) fields.
     */
    pb_size_t fixed_count_field = PB_SIZE_MAX;
 8008376:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800837a:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    pb_size_t fixed_count_size = 0;
 800837e:	2300      	movs	r3, #0
 8008380:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
    pb_size_t fixed_count_total_size = 0;
 8008384:	2300      	movs	r3, #0
 8008386:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

    pb_fields_seen_t fields_seen = {{0, 0}};
 800838a:	2300      	movs	r3, #0
 800838c:	643b      	str	r3, [r7, #64]	@ 0x40
 800838e:	2300      	movs	r3, #0
 8008390:	647b      	str	r3, [r7, #68]	@ 0x44
    const uint32_t allbits = ~(uint32_t)0;
 8008392:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008396:	657b      	str	r3, [r7, #84]	@ 0x54
    pb_field_iter_t iter;

    if (pb_field_iter_begin(&iter, fields, dest_struct))
 8008398:	f107 0318 	add.w	r3, r7, #24
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	68b9      	ldr	r1, [r7, #8]
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7fe fea8 	bl	80070f6 <pb_field_iter_begin>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f000 8102 	beq.w	80085b2 <pb_decode_inner+0x252>
    {
        if ((flags & PB_DECODE_NOINIT) == 0)
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	f003 0301 	and.w	r3, r3, #1
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	f040 80fc 	bne.w	80085b2 <pb_decode_inner+0x252>
        {
            if (!pb_message_set_to_defaults(&iter))
 80083ba:	f107 0318 	add.w	r3, r7, #24
 80083be:	4618      	mov	r0, r3
 80083c0:	f7ff ff51 	bl	8008266 <pb_message_set_to_defaults>
 80083c4:	4603      	mov	r3, r0
 80083c6:	f083 0301 	eor.w	r3, r3, #1
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	f000 80f0 	beq.w	80085b2 <pb_decode_inner+0x252>
                PB_RETURN_ERROR(stream, "failed to set defaults");
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d002      	beq.n	80083e0 <pb_decode_inner+0x80>
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	e000      	b.n	80083e2 <pb_decode_inner+0x82>
 80083e0:	4b99      	ldr	r3, [pc, #612]	@ (8008648 <pb_decode_inner+0x2e8>)
 80083e2:	68fa      	ldr	r2, [r7, #12]
 80083e4:	60d3      	str	r3, [r2, #12]
 80083e6:	2300      	movs	r3, #0
 80083e8:	e16d      	b.n	80086c6 <pb_decode_inner+0x366>
    {
        uint32_t tag;
        pb_wire_type_t wire_type;
        bool eof;

        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 80083ea:	f107 0312 	add.w	r3, r7, #18
 80083ee:	f107 0214 	add.w	r2, r7, #20
 80083f2:	f107 0113 	add.w	r1, r7, #19
 80083f6:	68f8      	ldr	r0, [r7, #12]
 80083f8:	f7ff f9a9 	bl	800774e <pb_decode_tag>
 80083fc:	4603      	mov	r3, r0
 80083fe:	f083 0301 	eor.w	r3, r3, #1
 8008402:	b2db      	uxtb	r3, r3
 8008404:	2b00      	cmp	r3, #0
 8008406:	d005      	beq.n	8008414 <pb_decode_inner+0xb4>
        {
            if (eof)
 8008408:	7cbb      	ldrb	r3, [r7, #18]
 800840a:	2b00      	cmp	r3, #0
 800840c:	f040 80d7 	bne.w	80085be <pb_decode_inner+0x25e>
                break;
            else
                return false;
 8008410:	2300      	movs	r3, #0
 8008412:	e158      	b.n	80086c6 <pb_decode_inner+0x366>
        }

        if (tag == 0)
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d111      	bne.n	800843e <pb_decode_inner+0xde>
        {
          if (flags & PB_DECODE_NULLTERMINATED)
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	f003 0304 	and.w	r3, r3, #4
 8008420:	2b00      	cmp	r3, #0
 8008422:	f040 80ce 	bne.w	80085c2 <pb_decode_inner+0x262>
          {
            break;
          }
          else
          {
            PB_RETURN_ERROR(stream, "zero tag");
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	68db      	ldr	r3, [r3, #12]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d002      	beq.n	8008434 <pb_decode_inner+0xd4>
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	68db      	ldr	r3, [r3, #12]
 8008432:	e000      	b.n	8008436 <pb_decode_inner+0xd6>
 8008434:	4b85      	ldr	r3, [pc, #532]	@ (800864c <pb_decode_inner+0x2ec>)
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	60d3      	str	r3, [r2, #12]
 800843a:	2300      	movs	r3, #0
 800843c:	e143      	b.n	80086c6 <pb_decode_inner+0x366>
          }
        }

        if (!pb_field_iter_find(&iter, tag) || PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 800843e:	697a      	ldr	r2, [r7, #20]
 8008440:	f107 0318 	add.w	r3, r7, #24
 8008444:	4611      	mov	r1, r2
 8008446:	4618      	mov	r0, r3
 8008448:	f7fe feb3 	bl	80071b2 <pb_field_iter_find>
 800844c:	4603      	mov	r3, r0
 800844e:	f083 0301 	eor.w	r3, r3, #1
 8008452:	b2db      	uxtb	r3, r3
 8008454:	2b00      	cmp	r3, #0
 8008456:	d105      	bne.n	8008464 <pb_decode_inner+0x104>
 8008458:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800845c:	f003 030f 	and.w	r3, r3, #15
 8008460:	2b0a      	cmp	r3, #10
 8008462:	d13c      	bne.n	80084de <pb_decode_inner+0x17e>
        {
            /* No match found, check if it matches an extension. */
            if (extension_range_start == 0)
 8008464:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008466:	2b00      	cmp	r3, #0
 8008468:	d112      	bne.n	8008490 <pb_decode_inner+0x130>
            {
                if (pb_field_iter_find_extension(&iter))
 800846a:	f107 0318 	add.w	r3, r7, #24
 800846e:	4618      	mov	r0, r3
 8008470:	f7fe fef5 	bl	800725e <pb_field_iter_find_extension>
 8008474:	4603      	mov	r3, r0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d004      	beq.n	8008484 <pb_decode_inner+0x124>
                {
                    extensions = *(pb_extension_t* const *)iter.pData;
 800847a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	663b      	str	r3, [r7, #96]	@ 0x60
                    extension_range_start = iter.tag;
 8008480:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008482:	667b      	str	r3, [r7, #100]	@ 0x64
                }

                if (!extensions)
 8008484:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008486:	2b00      	cmp	r3, #0
 8008488:	d102      	bne.n	8008490 <pb_decode_inner+0x130>
                {
                    extension_range_start = (uint32_t)-1;
 800848a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800848e:	667b      	str	r3, [r7, #100]	@ 0x64
                }
            }

            if (tag >= extension_range_start)
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008494:	429a      	cmp	r2, r3
 8008496:	d815      	bhi.n	80084c4 <pb_decode_inner+0x164>
            {
                size_t pos = stream->bytes_left;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	64fb      	str	r3, [r7, #76]	@ 0x4c

                if (!decode_extension(stream, tag, wire_type, extensions))
 800849e:	6979      	ldr	r1, [r7, #20]
 80084a0:	7cfa      	ldrb	r2, [r7, #19]
 80084a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80084a4:	68f8      	ldr	r0, [r7, #12]
 80084a6:	f7ff fde1 	bl	800806c <decode_extension>
 80084aa:	4603      	mov	r3, r0
 80084ac:	f083 0301 	eor.w	r3, r3, #1
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d001      	beq.n	80084ba <pb_decode_inner+0x15a>
                    return false;
 80084b6:	2300      	movs	r3, #0
 80084b8:	e105      	b.n	80086c6 <pb_decode_inner+0x366>

                if (pos != stream->bytes_left)
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d173      	bne.n	80085ac <pb_decode_inner+0x24c>
                    continue;
                }
            }

            /* No match found, skip data */
            if (!pb_skip_field(stream, wire_type))
 80084c4:	7cfb      	ldrb	r3, [r7, #19]
 80084c6:	4619      	mov	r1, r3
 80084c8:	68f8      	ldr	r0, [r7, #12]
 80084ca:	f7ff f96f 	bl	80077ac <pb_skip_field>
 80084ce:	4603      	mov	r3, r0
 80084d0:	f083 0301 	eor.w	r3, r3, #1
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d06a      	beq.n	80085b0 <pb_decode_inner+0x250>
                return false;
 80084da:	2300      	movs	r3, #0
 80084dc:	e0f3      	b.n	80086c6 <pb_decode_inner+0x366>
        }

        /* If a repeated fixed count field was found, get size from
         * 'fixed_count_field' as there is no counter contained in the struct.
         */
        if (PB_HTYPE(iter.type) == PB_HTYPE_REPEATED && iter.pSize == &iter.array_size)
 80084de:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80084e2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80084e6:	2b20      	cmp	r3, #32
 80084e8:	d12e      	bne.n	8008548 <pb_decode_inner+0x1e8>
 80084ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80084ec:	f107 0318 	add.w	r3, r7, #24
 80084f0:	3314      	adds	r3, #20
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d128      	bne.n	8008548 <pb_decode_inner+0x1e8>
        {
            if (fixed_count_field != iter.index) {
 80084f6:	8c3b      	ldrh	r3, [r7, #32]
 80084f8:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d020      	beq.n	8008542 <pb_decode_inner+0x1e2>
                /* If the new fixed count field does not match the previous one,
                 * check that the previous one is NULL or that it finished
                 * receiving all the expected data.
                 */
                if (fixed_count_field != PB_SIZE_MAX &&
 8008500:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8008504:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008508:	4293      	cmp	r3, r2
 800850a:	d011      	beq.n	8008530 <pb_decode_inner+0x1d0>
                    fixed_count_size != fixed_count_total_size)
 800850c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
                if (fixed_count_field != PB_SIZE_MAX &&
 8008510:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8008514:	429a      	cmp	r2, r3
 8008516:	d00b      	beq.n	8008530 <pb_decode_inner+0x1d0>
                {
                    PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d002      	beq.n	8008526 <pb_decode_inner+0x1c6>
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	e000      	b.n	8008528 <pb_decode_inner+0x1c8>
 8008526:	4b4a      	ldr	r3, [pc, #296]	@ (8008650 <pb_decode_inner+0x2f0>)
 8008528:	68fa      	ldr	r2, [r7, #12]
 800852a:	60d3      	str	r3, [r2, #12]
 800852c:	2300      	movs	r3, #0
 800852e:	e0ca      	b.n	80086c6 <pb_decode_inner+0x366>
                }

                fixed_count_field = iter.index;
 8008530:	8c3b      	ldrh	r3, [r7, #32]
 8008532:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
                fixed_count_size = 0;
 8008536:	2300      	movs	r3, #0
 8008538:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
                fixed_count_total_size = iter.array_size;
 800853c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800853e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
            }

            iter.pSize = &fixed_count_size;
 8008542:	f107 034a 	add.w	r3, r7, #74	@ 0x4a
 8008546:	63bb      	str	r3, [r7, #56]	@ 0x38
        }

        if (PB_HTYPE(iter.type) == PB_HTYPE_REQUIRED
 8008548:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800854c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008550:	2b00      	cmp	r3, #0
 8008552:	d11c      	bne.n	800858e <pb_decode_inner+0x22e>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 8008554:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008556:	2b3f      	cmp	r3, #63	@ 0x3f
 8008558:	d819      	bhi.n	800858e <pb_decode_inner+0x22e>
        {
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 800855a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800855c:	f003 031f 	and.w	r3, r3, #31
 8008560:	2201      	movs	r2, #1
 8008562:	fa02 f303 	lsl.w	r3, r2, r3
 8008566:	653b      	str	r3, [r7, #80]	@ 0x50
            fields_seen.bitfield[iter.required_field_index >> 5] |= tmp;
 8008568:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800856a:	095b      	lsrs	r3, r3, #5
 800856c:	b29b      	uxth	r3, r3
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	3368      	adds	r3, #104	@ 0x68
 8008572:	443b      	add	r3, r7
 8008574:	f853 2c28 	ldr.w	r2, [r3, #-40]
 8008578:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800857a:	095b      	lsrs	r3, r3, #5
 800857c:	b29b      	uxth	r3, r3
 800857e:	4619      	mov	r1, r3
 8008580:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008582:	431a      	orrs	r2, r3
 8008584:	008b      	lsls	r3, r1, #2
 8008586:	3368      	adds	r3, #104	@ 0x68
 8008588:	443b      	add	r3, r7
 800858a:	f843 2c28 	str.w	r2, [r3, #-40]
        }

        if (!decode_field(stream, wire_type, &iter))
 800858e:	7cfb      	ldrb	r3, [r7, #19]
 8008590:	f107 0218 	add.w	r2, r7, #24
 8008594:	4619      	mov	r1, r3
 8008596:	68f8      	ldr	r0, [r7, #12]
 8008598:	f7ff fcf0 	bl	8007f7c <decode_field>
 800859c:	4603      	mov	r3, r0
 800859e:	f083 0301 	eor.w	r3, r3, #1
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d004      	beq.n	80085b2 <pb_decode_inner+0x252>
            return false;
 80085a8:	2300      	movs	r3, #0
 80085aa:	e08c      	b.n	80086c6 <pb_decode_inner+0x366>
                    continue;
 80085ac:	bf00      	nop
 80085ae:	e000      	b.n	80085b2 <pb_decode_inner+0x252>
            continue;
 80085b0:	bf00      	nop
    while (stream->bytes_left)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	f47f af17 	bne.w	80083ea <pb_decode_inner+0x8a>
 80085bc:	e002      	b.n	80085c4 <pb_decode_inner+0x264>
                break;
 80085be:	bf00      	nop
 80085c0:	e000      	b.n	80085c4 <pb_decode_inner+0x264>
            break;
 80085c2:	bf00      	nop
    }

    /* Check that all elements of the last decoded fixed count field were present. */
    if (fixed_count_field != PB_SIZE_MAX &&
 80085c4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80085c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d011      	beq.n	80085f4 <pb_decode_inner+0x294>
        fixed_count_size != fixed_count_total_size)
 80085d0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
    if (fixed_count_field != PB_SIZE_MAX &&
 80085d4:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 80085d8:	429a      	cmp	r2, r3
 80085da:	d00b      	beq.n	80085f4 <pb_decode_inner+0x294>
    {
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d002      	beq.n	80085ea <pb_decode_inner+0x28a>
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	e000      	b.n	80085ec <pb_decode_inner+0x28c>
 80085ea:	4b19      	ldr	r3, [pc, #100]	@ (8008650 <pb_decode_inner+0x2f0>)
 80085ec:	68fa      	ldr	r2, [r7, #12]
 80085ee:	60d3      	str	r3, [r2, #12]
 80085f0:	2300      	movs	r3, #0
 80085f2:	e068      	b.n	80086c6 <pb_decode_inner+0x366>
    }

    /* Check that all required fields were present. */
    {
        pb_size_t req_field_count = iter.descriptor->required_field_count;
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	8a5b      	ldrh	r3, [r3, #18]
 80085f8:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

        if (req_field_count > 0)
 80085fc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8008600:	2b00      	cmp	r3, #0
 8008602:	d05f      	beq.n	80086c4 <pb_decode_inner+0x364>
        {
            pb_size_t i;

            if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 8008604:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8008608:	2b40      	cmp	r3, #64	@ 0x40
 800860a:	d902      	bls.n	8008612 <pb_decode_inner+0x2b2>
                req_field_count = PB_MAX_REQUIRED_FIELDS;
 800860c:	2340      	movs	r3, #64	@ 0x40
 800860e:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

            /* Check the whole words */
            for (i = 0; i < (req_field_count >> 5); i++)
 8008612:	2300      	movs	r3, #0
 8008614:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8008618:	e023      	b.n	8008662 <pb_decode_inner+0x302>
            {
                if (fields_seen.bitfield[i] != allbits)
 800861a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	3368      	adds	r3, #104	@ 0x68
 8008622:	443b      	add	r3, r7
 8008624:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8008628:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800862a:	429a      	cmp	r2, r3
 800862c:	d014      	beq.n	8008658 <pb_decode_inner+0x2f8>
                    PB_RETURN_ERROR(stream, "missing required field");
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	68db      	ldr	r3, [r3, #12]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d002      	beq.n	800863c <pb_decode_inner+0x2dc>
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	68db      	ldr	r3, [r3, #12]
 800863a:	e000      	b.n	800863e <pb_decode_inner+0x2de>
 800863c:	4b05      	ldr	r3, [pc, #20]	@ (8008654 <pb_decode_inner+0x2f4>)
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	60d3      	str	r3, [r2, #12]
 8008642:	2300      	movs	r3, #0
 8008644:	e03f      	b.n	80086c6 <pb_decode_inner+0x366>
 8008646:	bf00      	nop
 8008648:	0800a2f0 	.word	0x0800a2f0
 800864c:	0800a340 	.word	0x0800a340
 8008650:	0800a34c 	.word	0x0800a34c
 8008654:	0800a370 	.word	0x0800a370
            for (i = 0; i < (req_field_count >> 5); i++)
 8008658:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800865c:	3301      	adds	r3, #1
 800865e:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8008662:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8008666:	095b      	lsrs	r3, r3, #5
 8008668:	b29b      	uxth	r3, r3
 800866a:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 800866e:	429a      	cmp	r2, r3
 8008670:	d3d3      	bcc.n	800861a <pb_decode_inner+0x2ba>
            }

            /* Check the remaining bits (if any) */
            if ((req_field_count & 31) != 0)
 8008672:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8008676:	f003 031f 	and.w	r3, r3, #31
 800867a:	2b00      	cmp	r3, #0
 800867c:	d022      	beq.n	80086c4 <pb_decode_inner+0x364>
            {
                if (fields_seen.bitfield[req_field_count >> 5] !=
 800867e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8008682:	095b      	lsrs	r3, r3, #5
 8008684:	b29b      	uxth	r3, r3
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	3368      	adds	r3, #104	@ 0x68
 800868a:	443b      	add	r3, r7
 800868c:	f853 2c28 	ldr.w	r2, [r3, #-40]
                    (allbits >> (uint_least8_t)(32 - (req_field_count & 31))))
 8008690:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8008694:	b2db      	uxtb	r3, r3
 8008696:	f003 031f 	and.w	r3, r3, #31
 800869a:	b2db      	uxtb	r3, r3
 800869c:	f1c3 0320 	rsb	r3, r3, #32
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	4619      	mov	r1, r3
 80086a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086a6:	40cb      	lsrs	r3, r1
                if (fields_seen.bitfield[req_field_count >> 5] !=
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d00b      	beq.n	80086c4 <pb_decode_inner+0x364>
                {
                    PB_RETURN_ERROR(stream, "missing required field");
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d002      	beq.n	80086ba <pb_decode_inner+0x35a>
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	e000      	b.n	80086bc <pb_decode_inner+0x35c>
 80086ba:	4b05      	ldr	r3, [pc, #20]	@ (80086d0 <pb_decode_inner+0x370>)
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	60d3      	str	r3, [r2, #12]
 80086c0:	2300      	movs	r3, #0
 80086c2:	e000      	b.n	80086c6 <pb_decode_inner+0x366>
                }
            }
        }
    }

    return true;
 80086c4:	2301      	movs	r3, #1
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3768      	adds	r7, #104	@ 0x68
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	0800a370 	.word	0x0800a370

080086d4 <pb_decode>:
    
    return status;
}

bool checkreturn pb_decode(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b086      	sub	sp, #24
 80086d8:	af00      	add	r7, sp, #0
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	60b9      	str	r1, [r7, #8]
 80086de:	607a      	str	r2, [r7, #4]
    bool status;

    status = pb_decode_inner(stream, fields, dest_struct, 0);
 80086e0:	2300      	movs	r3, #0
 80086e2:	687a      	ldr	r2, [r7, #4]
 80086e4:	68b9      	ldr	r1, [r7, #8]
 80086e6:	68f8      	ldr	r0, [r7, #12]
 80086e8:	f7ff fe3a 	bl	8008360 <pb_decode_inner>
 80086ec:	4603      	mov	r3, r0
 80086ee:	75fb      	strb	r3, [r7, #23]
#ifdef PB_ENABLE_MALLOC
    if (!status)
        pb_release(fields, dest_struct);
#endif

    return status;
 80086f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3718      	adds	r7, #24
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}

080086fa <pb_decode_bool>:
#endif

/* Field decoders */

bool pb_decode_bool(pb_istream_t *stream, bool *dest)
{
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b084      	sub	sp, #16
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
 8008702:	6039      	str	r1, [r7, #0]
    uint32_t value;
    if (!pb_decode_varint32(stream, &value))
 8008704:	f107 030c 	add.w	r3, r7, #12
 8008708:	4619      	mov	r1, r3
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f7fe ff70 	bl	80075f0 <pb_decode_varint32>
 8008710:	4603      	mov	r3, r0
 8008712:	f083 0301 	eor.w	r3, r3, #1
 8008716:	b2db      	uxtb	r3, r3
 8008718:	2b00      	cmp	r3, #0
 800871a:	d001      	beq.n	8008720 <pb_decode_bool+0x26>
        return false;
 800871c:	2300      	movs	r3, #0
 800871e:	e008      	b.n	8008732 <pb_decode_bool+0x38>

    *(bool*)dest = (value != 0);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2b00      	cmp	r3, #0
 8008724:	bf14      	ite	ne
 8008726:	2301      	movne	r3, #1
 8008728:	2300      	moveq	r3, #0
 800872a:	b2da      	uxtb	r2, r3
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	701a      	strb	r2, [r3, #0]
    return true;
 8008730:	2301      	movs	r3, #1
}
 8008732:	4618      	mov	r0, r3
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}

0800873a <pb_decode_svarint>:

bool pb_decode_svarint(pb_istream_t *stream, pb_int64_t *dest)
{
 800873a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
    pb_uint64_t value;
    if (!pb_decode_varint(stream, &value))
 8008746:	f107 0308 	add.w	r3, r7, #8
 800874a:	4619      	mov	r1, r3
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f7fe ff5f 	bl	8007610 <pb_decode_varint>
 8008752:	4603      	mov	r3, r0
 8008754:	f083 0301 	eor.w	r3, r3, #1
 8008758:	b2db      	uxtb	r3, r3
 800875a:	2b00      	cmp	r3, #0
 800875c:	d001      	beq.n	8008762 <pb_decode_svarint+0x28>
        return false;
 800875e:	2300      	movs	r3, #0
 8008760:	e029      	b.n	80087b6 <pb_decode_svarint+0x7c>
    
    if (value & 1)
 8008762:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008766:	f002 0401 	and.w	r4, r2, #1
 800876a:	2500      	movs	r5, #0
 800876c:	ea54 0305 	orrs.w	r3, r4, r5
 8008770:	d013      	beq.n	800879a <pb_decode_svarint+0x60>
        *dest = (pb_int64_t)(~(value >> 1));
 8008772:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008776:	f04f 0200 	mov.w	r2, #0
 800877a:	f04f 0300 	mov.w	r3, #0
 800877e:	0842      	lsrs	r2, r0, #1
 8008780:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8008784:	084b      	lsrs	r3, r1, #1
 8008786:	ea6f 0802 	mvn.w	r8, r2
 800878a:	ea6f 0903 	mvn.w	r9, r3
 800878e:	4642      	mov	r2, r8
 8008790:	464b      	mov	r3, r9
 8008792:	6839      	ldr	r1, [r7, #0]
 8008794:	e9c1 2300 	strd	r2, r3, [r1]
 8008798:	e00c      	b.n	80087b4 <pb_decode_svarint+0x7a>
    else
        *dest = (pb_int64_t)(value >> 1);
 800879a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800879e:	f04f 0200 	mov.w	r2, #0
 80087a2:	f04f 0300 	mov.w	r3, #0
 80087a6:	0842      	lsrs	r2, r0, #1
 80087a8:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80087ac:	084b      	lsrs	r3, r1, #1
 80087ae:	6839      	ldr	r1, [r7, #0]
 80087b0:	e9c1 2300 	strd	r2, r3, [r1]
    
    return true;
 80087b4:	2301      	movs	r3, #1
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080087c0 <pb_decode_fixed32>:

bool pb_decode_fixed32(pb_istream_t *stream, void *dest)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
    union {
        uint32_t fixed32;
        pb_byte_t bytes[4];
    } u;

    if (!pb_read(stream, u.bytes, 4))
 80087ca:	f107 030c 	add.w	r3, r7, #12
 80087ce:	2204      	movs	r2, #4
 80087d0:	4619      	mov	r1, r3
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f7fe fd92 	bl	80072fc <pb_read>
 80087d8:	4603      	mov	r3, r0
 80087da:	f083 0301 	eor.w	r3, r3, #1
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d001      	beq.n	80087e8 <pb_decode_fixed32+0x28>
        return false;
 80087e4:	2300      	movs	r3, #0
 80087e6:	e003      	b.n	80087f0 <pb_decode_fixed32+0x30>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint32_t*)dest = u.fixed32;
 80087e8:	68fa      	ldr	r2, [r7, #12]
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	601a      	str	r2, [r3, #0]
    *(uint32_t*)dest = ((uint32_t)u.bytes[0] << 0) |
                       ((uint32_t)u.bytes[1] << 8) |
                       ((uint32_t)u.bytes[2] << 16) |
                       ((uint32_t)u.bytes[3] << 24);
#endif
    return true;
 80087ee:	2301      	movs	r3, #1
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3710      	adds	r7, #16
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <pb_decode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool pb_decode_fixed64(pb_istream_t *stream, void *dest)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	6039      	str	r1, [r7, #0]
    union {
        uint64_t fixed64;
        pb_byte_t bytes[8];
    } u;

    if (!pb_read(stream, u.bytes, 8))
 8008802:	f107 0308 	add.w	r3, r7, #8
 8008806:	2208      	movs	r2, #8
 8008808:	4619      	mov	r1, r3
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f7fe fd76 	bl	80072fc <pb_read>
 8008810:	4603      	mov	r3, r0
 8008812:	f083 0301 	eor.w	r3, r3, #1
 8008816:	b2db      	uxtb	r3, r3
 8008818:	2b00      	cmp	r3, #0
 800881a:	d001      	beq.n	8008820 <pb_decode_fixed64+0x28>
        return false;
 800881c:	2300      	movs	r3, #0
 800881e:	e005      	b.n	800882c <pb_decode_fixed64+0x34>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint64_t*)dest = u.fixed64;
 8008820:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008824:	6839      	ldr	r1, [r7, #0]
 8008826:	e9c1 2300 	strd	r2, r3, [r1]
                       ((uint64_t)u.bytes[4] << 32) |
                       ((uint64_t)u.bytes[5] << 40) |
                       ((uint64_t)u.bytes[6] << 48) |
                       ((uint64_t)u.bytes[7] << 56);
#endif
    return true;
 800882a:	2301      	movs	r3, #1
}
 800882c:	4618      	mov	r0, r3
 800882e:	3710      	adds	r7, #16
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <pb_dec_bool>:
#endif

static bool checkreturn pb_dec_bool(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
    return pb_decode_bool(stream, (bool*)field->pData);
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	69db      	ldr	r3, [r3, #28]
 8008842:	4619      	mov	r1, r3
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f7ff ff58 	bl	80086fa <pb_decode_bool>
 800884a:	4603      	mov	r3, r0
}
 800884c:	4618      	mov	r0, r3
 800884e:	3708      	adds	r7, #8
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <pb_dec_varint>:

static bool checkreturn pb_dec_varint(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8008854:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008858:	b094      	sub	sp, #80	@ 0x50
 800885a:	af00      	add	r7, sp, #0
 800885c:	6278      	str	r0, [r7, #36]	@ 0x24
 800885e:	6239      	str	r1, [r7, #32]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 8008860:	6a3b      	ldr	r3, [r7, #32]
 8008862:	7d9b      	ldrb	r3, [r3, #22]
 8008864:	f003 030f 	and.w	r3, r3, #15
 8008868:	2b02      	cmp	r3, #2
 800886a:	d179      	bne.n	8008960 <pb_dec_varint+0x10c>
    {
        pb_uint64_t value, clamped;
        if (!pb_decode_varint(stream, &value))
 800886c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008870:	4619      	mov	r1, r3
 8008872:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008874:	f7fe fecc 	bl	8007610 <pb_decode_varint>
 8008878:	4603      	mov	r3, r0
 800887a:	f083 0301 	eor.w	r3, r3, #1
 800887e:	b2db      	uxtb	r3, r3
 8008880:	2b00      	cmp	r3, #0
 8008882:	d001      	beq.n	8008888 <pb_dec_varint+0x34>
            return false;
 8008884:	2300      	movs	r3, #0
 8008886:	e107      	b.n	8008a98 <pb_dec_varint+0x244>

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_uint64_t))
 8008888:	6a3b      	ldr	r3, [r7, #32]
 800888a:	8a5b      	ldrh	r3, [r3, #18]
 800888c:	2b08      	cmp	r3, #8
 800888e:	d10a      	bne.n	80088a6 <pb_dec_varint+0x52>
            clamped = *(pb_uint64_t*)field->pData = value;
 8008890:	6a3b      	ldr	r3, [r7, #32]
 8008892:	69d9      	ldr	r1, [r3, #28]
 8008894:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008898:	e9c1 2300 	strd	r2, r3, [r1]
 800889c:	e9d1 2300 	ldrd	r2, r3, [r1]
 80088a0:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 80088a4:	e046      	b.n	8008934 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint32_t))
 80088a6:	6a3b      	ldr	r3, [r7, #32]
 80088a8:	8a5b      	ldrh	r3, [r3, #18]
 80088aa:	2b04      	cmp	r3, #4
 80088ac:	d10e      	bne.n	80088cc <pb_dec_varint+0x78>
            clamped = *(uint32_t*)field->pData = (uint32_t)value;
 80088ae:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80088b2:	6a3b      	ldr	r3, [r7, #32]
 80088b4:	69db      	ldr	r3, [r3, #28]
 80088b6:	4602      	mov	r2, r0
 80088b8:	601a      	str	r2, [r3, #0]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2200      	movs	r2, #0
 80088be:	613b      	str	r3, [r7, #16]
 80088c0:	617a      	str	r2, [r7, #20]
 80088c2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80088c6:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 80088ca:	e033      	b.n	8008934 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least16_t))
 80088cc:	6a3b      	ldr	r3, [r7, #32]
 80088ce:	8a5b      	ldrh	r3, [r3, #18]
 80088d0:	2b02      	cmp	r3, #2
 80088d2:	d10f      	bne.n	80088f4 <pb_dec_varint+0xa0>
            clamped = *(uint_least16_t*)field->pData = (uint_least16_t)value;
 80088d4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80088d8:	6a3b      	ldr	r3, [r7, #32]
 80088da:	69db      	ldr	r3, [r3, #28]
 80088dc:	b282      	uxth	r2, r0
 80088de:	801a      	strh	r2, [r3, #0]
 80088e0:	881b      	ldrh	r3, [r3, #0]
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	2200      	movs	r2, #0
 80088e6:	60bb      	str	r3, [r7, #8]
 80088e8:	60fa      	str	r2, [r7, #12]
 80088ea:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80088ee:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 80088f2:	e01f      	b.n	8008934 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least8_t))
 80088f4:	6a3b      	ldr	r3, [r7, #32]
 80088f6:	8a5b      	ldrh	r3, [r3, #18]
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d10f      	bne.n	800891c <pb_dec_varint+0xc8>
            clamped = *(uint_least8_t*)field->pData = (uint_least8_t)value;
 80088fc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8008900:	6a3b      	ldr	r3, [r7, #32]
 8008902:	69db      	ldr	r3, [r3, #28]
 8008904:	b2c2      	uxtb	r2, r0
 8008906:	701a      	strb	r2, [r3, #0]
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	b2db      	uxtb	r3, r3
 800890c:	2200      	movs	r2, #0
 800890e:	603b      	str	r3, [r7, #0]
 8008910:	607a      	str	r2, [r7, #4]
 8008912:	e9d7 3400 	ldrd	r3, r4, [r7]
 8008916:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
 800891a:	e00b      	b.n	8008934 <pb_dec_varint+0xe0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 800891c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800891e:	68db      	ldr	r3, [r3, #12]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d002      	beq.n	800892a <pb_dec_varint+0xd6>
 8008924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008926:	68db      	ldr	r3, [r3, #12]
 8008928:	e000      	b.n	800892c <pb_dec_varint+0xd8>
 800892a:	4b5e      	ldr	r3, [pc, #376]	@ (8008aa4 <pb_dec_varint+0x250>)
 800892c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800892e:	60d3      	str	r3, [r2, #12]
 8008930:	2300      	movs	r3, #0
 8008932:	e0b1      	b.n	8008a98 <pb_dec_varint+0x244>

        if (clamped != value)
 8008934:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008938:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800893c:	4299      	cmp	r1, r3
 800893e:	bf08      	it	eq
 8008940:	4290      	cmpeq	r0, r2
 8008942:	d00b      	beq.n	800895c <pb_dec_varint+0x108>
            PB_RETURN_ERROR(stream, "integer too large");
 8008944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d002      	beq.n	8008952 <pb_dec_varint+0xfe>
 800894c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	e000      	b.n	8008954 <pb_dec_varint+0x100>
 8008952:	4b55      	ldr	r3, [pc, #340]	@ (8008aa8 <pb_dec_varint+0x254>)
 8008954:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008956:	60d3      	str	r3, [r2, #12]
 8008958:	2300      	movs	r3, #0
 800895a:	e09d      	b.n	8008a98 <pb_dec_varint+0x244>

        return true;
 800895c:	2301      	movs	r3, #1
 800895e:	e09b      	b.n	8008a98 <pb_dec_varint+0x244>
    {
        pb_uint64_t value;
        pb_int64_t svalue;
        pb_int64_t clamped;

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 8008960:	6a3b      	ldr	r3, [r7, #32]
 8008962:	7d9b      	ldrb	r3, [r3, #22]
 8008964:	f003 030f 	and.w	r3, r3, #15
 8008968:	2b03      	cmp	r3, #3
 800896a:	d10d      	bne.n	8008988 <pb_dec_varint+0x134>
        {
            if (!pb_decode_svarint(stream, &svalue))
 800896c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008970:	4619      	mov	r1, r3
 8008972:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008974:	f7ff fee1 	bl	800873a <pb_decode_svarint>
 8008978:	4603      	mov	r3, r0
 800897a:	f083 0301 	eor.w	r3, r3, #1
 800897e:	b2db      	uxtb	r3, r3
 8008980:	2b00      	cmp	r3, #0
 8008982:	d022      	beq.n	80089ca <pb_dec_varint+0x176>
                return false;
 8008984:	2300      	movs	r3, #0
 8008986:	e087      	b.n	8008a98 <pb_dec_varint+0x244>
        }
        else
        {
            if (!pb_decode_varint(stream, &value))
 8008988:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800898c:	4619      	mov	r1, r3
 800898e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008990:	f7fe fe3e 	bl	8007610 <pb_decode_varint>
 8008994:	4603      	mov	r3, r0
 8008996:	f083 0301 	eor.w	r3, r3, #1
 800899a:	b2db      	uxtb	r3, r3
 800899c:	2b00      	cmp	r3, #0
 800899e:	d001      	beq.n	80089a4 <pb_dec_varint+0x150>
                return false;
 80089a0:	2300      	movs	r3, #0
 80089a2:	e079      	b.n	8008a98 <pb_dec_varint+0x244>
            * be cast as int32_t, instead of the int64_t that should be used when
            * encoding. Nanopb versions before 0.2.5 had a bug in encoding. In order to
            * not break decoding of such messages, we cast <=32 bit fields to
            * int32_t first to get the sign correct.
            */
            if (field->data_size == sizeof(pb_int64_t))
 80089a4:	6a3b      	ldr	r3, [r7, #32]
 80089a6:	8a5b      	ldrh	r3, [r3, #18]
 80089a8:	2b08      	cmp	r3, #8
 80089aa:	d104      	bne.n	80089b6 <pb_dec_varint+0x162>
                svalue = (pb_int64_t)value;
 80089ac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80089b0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80089b4:	e009      	b.n	80089ca <pb_dec_varint+0x176>
            else
                svalue = (int32_t)value;
 80089b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80089ba:	4613      	mov	r3, r2
 80089bc:	17da      	asrs	r2, r3, #31
 80089be:	61bb      	str	r3, [r7, #24]
 80089c0:	61fa      	str	r2, [r7, #28]
 80089c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80089c6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
        }

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_int64_t))
 80089ca:	6a3b      	ldr	r3, [r7, #32]
 80089cc:	8a5b      	ldrh	r3, [r3, #18]
 80089ce:	2b08      	cmp	r3, #8
 80089d0:	d10a      	bne.n	80089e8 <pb_dec_varint+0x194>
            clamped = *(pb_int64_t*)field->pData = svalue;
 80089d2:	6a3b      	ldr	r3, [r7, #32]
 80089d4:	69d9      	ldr	r1, [r3, #28]
 80089d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80089da:	e9c1 2300 	strd	r2, r3, [r1]
 80089de:	e9d1 2300 	ldrd	r2, r3, [r1]
 80089e2:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 80089e6:	e042      	b.n	8008a6e <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int32_t))
 80089e8:	6a3b      	ldr	r3, [r7, #32]
 80089ea:	8a5b      	ldrh	r3, [r3, #18]
 80089ec:	2b04      	cmp	r3, #4
 80089ee:	d10c      	bne.n	8008a0a <pb_dec_varint+0x1b6>
            clamped = *(int32_t*)field->pData = (int32_t)svalue;
 80089f0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80089f4:	6a3b      	ldr	r3, [r7, #32]
 80089f6:	69db      	ldr	r3, [r3, #28]
 80089f8:	4602      	mov	r2, r0
 80089fa:	601a      	str	r2, [r3, #0]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	17da      	asrs	r2, r3, #31
 8008a00:	469a      	mov	sl, r3
 8008a02:	4693      	mov	fp, r2
 8008a04:	e9c7 ab10 	strd	sl, fp, [r7, #64]	@ 0x40
 8008a08:	e031      	b.n	8008a6e <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least16_t))
 8008a0a:	6a3b      	ldr	r3, [r7, #32]
 8008a0c:	8a5b      	ldrh	r3, [r3, #18]
 8008a0e:	2b02      	cmp	r3, #2
 8008a10:	d10e      	bne.n	8008a30 <pb_dec_varint+0x1dc>
            clamped = *(int_least16_t*)field->pData = (int_least16_t)svalue;
 8008a12:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008a16:	6a3b      	ldr	r3, [r7, #32]
 8008a18:	69db      	ldr	r3, [r3, #28]
 8008a1a:	b202      	sxth	r2, r0
 8008a1c:	801a      	strh	r2, [r3, #0]
 8008a1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a22:	b21b      	sxth	r3, r3
 8008a24:	17da      	asrs	r2, r3, #31
 8008a26:	4698      	mov	r8, r3
 8008a28:	4691      	mov	r9, r2
 8008a2a:	e9c7 8910 	strd	r8, r9, [r7, #64]	@ 0x40
 8008a2e:	e01e      	b.n	8008a6e <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least8_t))
 8008a30:	6a3b      	ldr	r3, [r7, #32]
 8008a32:	8a5b      	ldrh	r3, [r3, #18]
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d10e      	bne.n	8008a56 <pb_dec_varint+0x202>
            clamped = *(int_least8_t*)field->pData = (int_least8_t)svalue;
 8008a38:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008a3c:	6a3b      	ldr	r3, [r7, #32]
 8008a3e:	69db      	ldr	r3, [r3, #28]
 8008a40:	b242      	sxtb	r2, r0
 8008a42:	701a      	strb	r2, [r3, #0]
 8008a44:	f993 3000 	ldrsb.w	r3, [r3]
 8008a48:	b25b      	sxtb	r3, r3
 8008a4a:	17da      	asrs	r2, r3, #31
 8008a4c:	461c      	mov	r4, r3
 8008a4e:	4615      	mov	r5, r2
 8008a50:	e9c7 4510 	strd	r4, r5, [r7, #64]	@ 0x40
 8008a54:	e00b      	b.n	8008a6e <pb_dec_varint+0x21a>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 8008a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a58:	68db      	ldr	r3, [r3, #12]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d002      	beq.n	8008a64 <pb_dec_varint+0x210>
 8008a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	e000      	b.n	8008a66 <pb_dec_varint+0x212>
 8008a64:	4b0f      	ldr	r3, [pc, #60]	@ (8008aa4 <pb_dec_varint+0x250>)
 8008a66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a68:	60d3      	str	r3, [r2, #12]
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	e014      	b.n	8008a98 <pb_dec_varint+0x244>

        if (clamped != svalue)
 8008a6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008a72:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8008a76:	4299      	cmp	r1, r3
 8008a78:	bf08      	it	eq
 8008a7a:	4290      	cmpeq	r0, r2
 8008a7c:	d00b      	beq.n	8008a96 <pb_dec_varint+0x242>
            PB_RETURN_ERROR(stream, "integer too large");
 8008a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d002      	beq.n	8008a8c <pb_dec_varint+0x238>
 8008a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a88:	68db      	ldr	r3, [r3, #12]
 8008a8a:	e000      	b.n	8008a8e <pb_dec_varint+0x23a>
 8008a8c:	4b06      	ldr	r3, [pc, #24]	@ (8008aa8 <pb_dec_varint+0x254>)
 8008a8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a90:	60d3      	str	r3, [r2, #12]
 8008a92:	2300      	movs	r3, #0
 8008a94:	e000      	b.n	8008a98 <pb_dec_varint+0x244>

        return true;
 8008a96:	2301      	movs	r3, #1
    }
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3750      	adds	r7, #80	@ 0x50
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008aa2:	bf00      	nop
 8008aa4:	0800a388 	.word	0x0800a388
 8008aa8:	0800a39c 	.word	0x0800a39c

08008aac <pb_dec_bytes>:

static bool checkreturn pb_dec_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b086      	sub	sp, #24
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_bytes_array_t *dest;
    
    if (!pb_decode_varint32(stream, &size))
 8008ab6:	f107 030c 	add.w	r3, r7, #12
 8008aba:	4619      	mov	r1, r3
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f7fe fd97 	bl	80075f0 <pb_decode_varint32>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	f083 0301 	eor.w	r3, r3, #1
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d001      	beq.n	8008ad2 <pb_dec_bytes+0x26>
        return false;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	e055      	b.n	8008b7e <pb_dec_bytes+0xd2>
    
    if (size > PB_SIZE_MAX)
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ad8:	d30b      	bcc.n	8008af2 <pb_dec_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d002      	beq.n	8008ae8 <pb_dec_bytes+0x3c>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	e000      	b.n	8008aea <pb_dec_bytes+0x3e>
 8008ae8:	4b27      	ldr	r3, [pc, #156]	@ (8008b88 <pb_dec_bytes+0xdc>)
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	60d3      	str	r3, [r2, #12]
 8008aee:	2300      	movs	r3, #0
 8008af0:	e045      	b.n	8008b7e <pb_dec_bytes+0xd2>
    
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	3302      	adds	r3, #2
 8008af6:	617b      	str	r3, [r7, #20]
    if (size > alloc_size)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	697a      	ldr	r2, [r7, #20]
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d20b      	bcs.n	8008b18 <pb_dec_bytes+0x6c>
        PB_RETURN_ERROR(stream, "size too large");
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d002      	beq.n	8008b0e <pb_dec_bytes+0x62>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	e000      	b.n	8008b10 <pb_dec_bytes+0x64>
 8008b0e:	4b1f      	ldr	r3, [pc, #124]	@ (8008b8c <pb_dec_bytes+0xe0>)
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	60d3      	str	r3, [r2, #12]
 8008b14:	2300      	movs	r3, #0
 8008b16:	e032      	b.n	8008b7e <pb_dec_bytes+0xd2>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	7d9b      	ldrb	r3, [r3, #22]
 8008b1c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008b20:	2b80      	cmp	r3, #128	@ 0x80
 8008b22:	d10b      	bne.n	8008b3c <pb_dec_bytes+0x90>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	68db      	ldr	r3, [r3, #12]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d002      	beq.n	8008b32 <pb_dec_bytes+0x86>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	e000      	b.n	8008b34 <pb_dec_bytes+0x88>
 8008b32:	4b17      	ldr	r3, [pc, #92]	@ (8008b90 <pb_dec_bytes+0xe4>)
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	60d3      	str	r3, [r2, #12]
 8008b38:	2300      	movs	r3, #0
 8008b3a:	e020      	b.n	8008b7e <pb_dec_bytes+0xd2>
        dest = *(pb_bytes_array_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	8a5b      	ldrh	r3, [r3, #18]
 8008b40:	461a      	mov	r2, r3
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d90b      	bls.n	8008b60 <pb_dec_bytes+0xb4>
            PB_RETURN_ERROR(stream, "bytes overflow");
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d002      	beq.n	8008b56 <pb_dec_bytes+0xaa>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	e000      	b.n	8008b58 <pb_dec_bytes+0xac>
 8008b56:	4b0c      	ldr	r3, [pc, #48]	@ (8008b88 <pb_dec_bytes+0xdc>)
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	60d3      	str	r3, [r2, #12]
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	e00e      	b.n	8008b7e <pb_dec_bytes+0xd2>
        dest = (pb_bytes_array_t*)field->pData;
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	69db      	ldr	r3, [r3, #28]
 8008b64:	613b      	str	r3, [r7, #16]
    }

    dest->size = (pb_size_t)size;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	b29a      	uxth	r2, r3
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	801a      	strh	r2, [r3, #0]
    return pb_read(stream, dest->bytes, (size_t)size);
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	3302      	adds	r3, #2
 8008b72:	68fa      	ldr	r2, [r7, #12]
 8008b74:	4619      	mov	r1, r3
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f7fe fbc0 	bl	80072fc <pb_read>
 8008b7c:	4603      	mov	r3, r0
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3718      	adds	r7, #24
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	0800a3b0 	.word	0x0800a3b0
 8008b8c:	0800a3c0 	.word	0x0800a3c0
 8008b90:	0800a308 	.word	0x0800a308

08008b94 <pb_dec_string>:

static bool checkreturn pb_dec_string(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b086      	sub	sp, #24
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_byte_t *dest = (pb_byte_t*)field->pData;
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	69db      	ldr	r3, [r3, #28]
 8008ba2:	617b      	str	r3, [r7, #20]

    if (!pb_decode_varint32(stream, &size))
 8008ba4:	f107 030c 	add.w	r3, r7, #12
 8008ba8:	4619      	mov	r1, r3
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f7fe fd20 	bl	80075f0 <pb_decode_varint32>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	f083 0301 	eor.w	r3, r3, #1
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d001      	beq.n	8008bc0 <pb_dec_string+0x2c>
        return false;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	e05a      	b.n	8008c76 <pb_dec_string+0xe2>

    if (size == (uint32_t)-1)
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008bc6:	d10b      	bne.n	8008be0 <pb_dec_string+0x4c>
        PB_RETURN_ERROR(stream, "size too large");
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	68db      	ldr	r3, [r3, #12]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d002      	beq.n	8008bd6 <pb_dec_string+0x42>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	e000      	b.n	8008bd8 <pb_dec_string+0x44>
 8008bd6:	4b2a      	ldr	r3, [pc, #168]	@ (8008c80 <pb_dec_string+0xec>)
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	60d3      	str	r3, [r2, #12]
 8008bdc:	2300      	movs	r3, #0
 8008bde:	e04a      	b.n	8008c76 <pb_dec_string+0xe2>

    /* Space for null terminator */
    alloc_size = (size_t)(size + 1);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	3301      	adds	r3, #1
 8008be4:	613b      	str	r3, [r7, #16]

    if (alloc_size < size)
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	693a      	ldr	r2, [r7, #16]
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d20b      	bcs.n	8008c06 <pb_dec_string+0x72>
        PB_RETURN_ERROR(stream, "size too large");
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d002      	beq.n	8008bfc <pb_dec_string+0x68>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	68db      	ldr	r3, [r3, #12]
 8008bfa:	e000      	b.n	8008bfe <pb_dec_string+0x6a>
 8008bfc:	4b20      	ldr	r3, [pc, #128]	@ (8008c80 <pb_dec_string+0xec>)
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	60d3      	str	r3, [r2, #12]
 8008c02:	2300      	movs	r3, #0
 8008c04:	e037      	b.n	8008c76 <pb_dec_string+0xe2>

    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	7d9b      	ldrb	r3, [r3, #22]
 8008c0a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008c0e:	2b80      	cmp	r3, #128	@ 0x80
 8008c10:	d10b      	bne.n	8008c2a <pb_dec_string+0x96>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d002      	beq.n	8008c20 <pb_dec_string+0x8c>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	68db      	ldr	r3, [r3, #12]
 8008c1e:	e000      	b.n	8008c22 <pb_dec_string+0x8e>
 8008c20:	4b18      	ldr	r3, [pc, #96]	@ (8008c84 <pb_dec_string+0xf0>)
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	60d3      	str	r3, [r2, #12]
 8008c26:	2300      	movs	r3, #0
 8008c28:	e025      	b.n	8008c76 <pb_dec_string+0xe2>
        dest = *(pb_byte_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	8a5b      	ldrh	r3, [r3, #18]
 8008c2e:	461a      	mov	r2, r3
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d90b      	bls.n	8008c4e <pb_dec_string+0xba>
            PB_RETURN_ERROR(stream, "string overflow");
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d002      	beq.n	8008c44 <pb_dec_string+0xb0>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	68db      	ldr	r3, [r3, #12]
 8008c42:	e000      	b.n	8008c46 <pb_dec_string+0xb2>
 8008c44:	4b10      	ldr	r3, [pc, #64]	@ (8008c88 <pb_dec_string+0xf4>)
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	60d3      	str	r3, [r2, #12]
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	e013      	b.n	8008c76 <pb_dec_string+0xe2>
    }
    
    dest[size] = 0;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	697a      	ldr	r2, [r7, #20]
 8008c52:	4413      	add	r3, r2
 8008c54:	2200      	movs	r2, #0
 8008c56:	701a      	strb	r2, [r3, #0]

    if (!pb_read(stream, dest, (size_t)size))
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	6979      	ldr	r1, [r7, #20]
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f7fe fb4c 	bl	80072fc <pb_read>
 8008c64:	4603      	mov	r3, r0
 8008c66:	f083 0301 	eor.w	r3, r3, #1
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d001      	beq.n	8008c74 <pb_dec_string+0xe0>
        return false;
 8008c70:	2300      	movs	r3, #0
 8008c72:	e000      	b.n	8008c76 <pb_dec_string+0xe2>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8((const char*)dest))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return true;
 8008c74:	2301      	movs	r3, #1
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3718      	adds	r7, #24
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	0800a3c0 	.word	0x0800a3c0
 8008c84:	0800a308 	.word	0x0800a308
 8008c88:	0800a3d0 	.word	0x0800a3d0

08008c8c <pb_dec_submessage>:

static bool checkreturn pb_dec_submessage(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b08a      	sub	sp, #40	@ 0x28
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	6039      	str	r1, [r7, #0]
    bool status = true;
 8008c96:	2301      	movs	r3, #1
 8008c98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    bool submsg_consumed = false;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    pb_istream_t substream;

    if (!pb_make_string_substream(stream, &substream))
 8008ca2:	f107 030c 	add.w	r3, r7, #12
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f7fe fe2d 	bl	8007908 <pb_make_string_substream>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	f083 0301 	eor.w	r3, r3, #1
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d001      	beq.n	8008cbe <pb_dec_submessage+0x32>
        return false;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	e069      	b.n	8008d92 <pb_dec_submessage+0x106>
    
    if (field->submsg_desc == NULL)
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d10b      	bne.n	8008cde <pb_dec_submessage+0x52>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	68db      	ldr	r3, [r3, #12]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d002      	beq.n	8008cd4 <pb_dec_submessage+0x48>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	68db      	ldr	r3, [r3, #12]
 8008cd2:	e000      	b.n	8008cd6 <pb_dec_submessage+0x4a>
 8008cd4:	4b31      	ldr	r3, [pc, #196]	@ (8008d9c <pb_dec_submessage+0x110>)
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	60d3      	str	r3, [r2, #12]
 8008cda:	2300      	movs	r3, #0
 8008cdc:	e059      	b.n	8008d92 <pb_dec_submessage+0x106>
    
    /* Submessages can have a separate message-level callback that is called
     * before decoding the message. Typically it is used to set callback fields
     * inside oneofs. */
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	7d9b      	ldrb	r3, [r3, #22]
 8008ce2:	f003 030f 	and.w	r3, r3, #15
 8008ce6:	2b09      	cmp	r3, #9
 8008ce8:	d11c      	bne.n	8008d24 <pb_dec_submessage+0x98>
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	6a1b      	ldr	r3, [r3, #32]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d018      	beq.n	8008d24 <pb_dec_submessage+0x98>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	6a1b      	ldr	r3, [r3, #32]
 8008cf6:	3b08      	subs	r3, #8
 8008cf8:	61fb      	str	r3, [r7, #28]
        if (callback->funcs.decode)
 8008cfa:	69fb      	ldr	r3, [r7, #28]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d010      	beq.n	8008d24 <pb_dec_submessage+0x98>
        {
            status = callback->funcs.decode(&substream, field, &callback->arg);
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	69fa      	ldr	r2, [r7, #28]
 8008d08:	3204      	adds	r2, #4
 8008d0a:	f107 000c 	add.w	r0, r7, #12
 8008d0e:	6839      	ldr	r1, [r7, #0]
 8008d10:	4798      	blx	r3
 8008d12:	4603      	mov	r3, r0
 8008d14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            if (substream.bytes_left == 0)
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d102      	bne.n	8008d24 <pb_dec_submessage+0x98>
            {
                submsg_consumed = true;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            }
        }
    }

    /* Now decode the submessage contents */
    if (status && !submsg_consumed)
 8008d24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d022      	beq.n	8008d72 <pb_dec_submessage+0xe6>
 8008d2c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008d30:	f083 0301 	eor.w	r3, r3, #1
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d01b      	beq.n	8008d72 <pb_dec_submessage+0xe6>
    {
        unsigned int flags = 0;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	623b      	str	r3, [r7, #32]

        /* Static required/optional fields are already initialized by top-level
         * pb_decode(), no need to initialize them again. */
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	7d9b      	ldrb	r3, [r3, #22]
 8008d42:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d107      	bne.n	8008d5a <pb_dec_submessage+0xce>
            PB_HTYPE(field->type) != PB_HTYPE_REPEATED)
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	7d9b      	ldrb	r3, [r3, #22]
 8008d4e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8008d52:	2b20      	cmp	r3, #32
 8008d54:	d001      	beq.n	8008d5a <pb_dec_submessage+0xce>
        {
            flags = PB_DECODE_NOINIT;
 8008d56:	2301      	movs	r3, #1
 8008d58:	623b      	str	r3, [r7, #32]
        }

        status = pb_decode_inner(&substream, field->submsg_desc, field->pData, flags);
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	69da      	ldr	r2, [r3, #28]
 8008d62:	f107 000c 	add.w	r0, r7, #12
 8008d66:	6a3b      	ldr	r3, [r7, #32]
 8008d68:	f7ff fafa 	bl	8008360 <pb_decode_inner>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    
    if (!pb_close_string_substream(stream, &substream))
 8008d72:	f107 030c 	add.w	r3, r7, #12
 8008d76:	4619      	mov	r1, r3
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f7fe fdff 	bl	800797c <pb_close_string_substream>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	f083 0301 	eor.w	r3, r3, #1
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d001      	beq.n	8008d8e <pb_dec_submessage+0x102>
        return false;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	e001      	b.n	8008d92 <pb_dec_submessage+0x106>

    return status;
 8008d8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3728      	adds	r7, #40	@ 0x28
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	0800a3e0 	.word	0x0800a3e0

08008da0 <pb_dec_fixed_length_bytes>:

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 8008daa:	f107 030c 	add.w	r3, r7, #12
 8008dae:	4619      	mov	r1, r3
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f7fe fc1d 	bl	80075f0 <pb_decode_varint32>
 8008db6:	4603      	mov	r3, r0
 8008db8:	f083 0301 	eor.w	r3, r3, #1
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d001      	beq.n	8008dc6 <pb_dec_fixed_length_bytes+0x26>
        return false;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	e037      	b.n	8008e36 <pb_dec_fixed_length_bytes+0x96>

    if (size > PB_SIZE_MAX)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008dcc:	d30b      	bcc.n	8008de6 <pb_dec_fixed_length_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	68db      	ldr	r3, [r3, #12]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d002      	beq.n	8008ddc <pb_dec_fixed_length_bytes+0x3c>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	e000      	b.n	8008dde <pb_dec_fixed_length_bytes+0x3e>
 8008ddc:	4b18      	ldr	r3, [pc, #96]	@ (8008e40 <pb_dec_fixed_length_bytes+0xa0>)
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	60d3      	str	r3, [r2, #12]
 8008de2:	2300      	movs	r3, #0
 8008de4:	e027      	b.n	8008e36 <pb_dec_fixed_length_bytes+0x96>

    if (size == 0)
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d109      	bne.n	8008e00 <pb_dec_fixed_length_bytes+0x60>
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(field->pData, 0, (size_t)field->data_size);
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	69d8      	ldr	r0, [r3, #28]
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	8a5b      	ldrh	r3, [r3, #18]
 8008df4:	461a      	mov	r2, r3
 8008df6:	2100      	movs	r1, #0
 8008df8:	f000 fcc0 	bl	800977c <memset>
        return true;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	e01a      	b.n	8008e36 <pb_dec_fixed_length_bytes+0x96>
    }

    if (size != field->data_size)
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	8a5b      	ldrh	r3, [r3, #18]
 8008e04:	461a      	mov	r2, r3
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d00b      	beq.n	8008e24 <pb_dec_fixed_length_bytes+0x84>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	68db      	ldr	r3, [r3, #12]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d002      	beq.n	8008e1a <pb_dec_fixed_length_bytes+0x7a>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	e000      	b.n	8008e1c <pb_dec_fixed_length_bytes+0x7c>
 8008e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8008e44 <pb_dec_fixed_length_bytes+0xa4>)
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	60d3      	str	r3, [r2, #12]
 8008e20:	2300      	movs	r3, #0
 8008e22:	e008      	b.n	8008e36 <pb_dec_fixed_length_bytes+0x96>

    return pb_read(stream, (pb_byte_t*)field->pData, (size_t)field->data_size);
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	69d9      	ldr	r1, [r3, #28]
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	8a5b      	ldrh	r3, [r3, #18]
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f7fe fa64 	bl	80072fc <pb_read>
 8008e34:	4603      	mov	r3, r0
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3710      	adds	r7, #16
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	0800a3b0 	.word	0x0800a3b0
 8008e44:	0800a3fc 	.word	0x0800a3fc

08008e48 <_ZdlPvj>:
 8008e48:	f000 b99c 	b.w	8009184 <_ZdlPv>

08008e4c <_ZNSaIcEC1Ev>:
 8008e4c:	4770      	bx	lr

08008e4e <_ZNSaIcED1Ev>:
 8008e4e:	4770      	bx	lr

08008e50 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8008e50:	b10a      	cbz	r2, 8008e56 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8008e52:	f000 bd62 	b.w	800991a <memcpy>
 8008e56:	4770      	bx	lr

08008e58 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 8008e58:	f850 3b08 	ldr.w	r3, [r0], #8
 8008e5c:	1a1b      	subs	r3, r3, r0
 8008e5e:	4258      	negs	r0, r3
 8008e60:	4158      	adcs	r0, r3
 8008e62:	4770      	bx	lr

08008e64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8008e64:	b508      	push	{r3, lr}
 8008e66:	680b      	ldr	r3, [r1, #0]
 8008e68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e6c:	d302      	bcc.n	8008e74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8008e6e:	480d      	ldr	r0, [pc, #52]	@ (8008ea4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8008e70:	f000 f9a1 	bl	80091b6 <_ZSt20__throw_length_errorPKc>
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d90b      	bls.n	8008e90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8008e78:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8008e7c:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8008e80:	d206      	bcs.n	8008e90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8008e82:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8008e86:	bf2a      	itet	cs
 8008e88:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 8008e8c:	6008      	strcc	r0, [r1, #0]
 8008e8e:	600b      	strcs	r3, [r1, #0]
 8008e90:	6808      	ldr	r0, [r1, #0]
 8008e92:	3001      	adds	r0, #1
 8008e94:	d501      	bpl.n	8008e9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8008e96:	f000 f988 	bl	80091aa <_ZSt17__throw_bad_allocv>
 8008e9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008e9e:	f000 b973 	b.w	8009188 <_Znwj>
 8008ea2:	bf00      	nop
 8008ea4:	0800a4c8 	.word	0x0800a4c8

08008ea8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8008ea8:	b510      	push	{r4, lr}
 8008eaa:	4604      	mov	r4, r0
 8008eac:	f7ff ffd4 	bl	8008e58 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8008eb0:	b920      	cbnz	r0, 8008ebc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 8008eb2:	6820      	ldr	r0, [r4, #0]
 8008eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008eb8:	f000 b964 	b.w	8009184 <_ZdlPv>
 8008ebc:	bd10      	pop	{r4, pc}

08008ebe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8008ebe:	6840      	ldr	r0, [r0, #4]
 8008ec0:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8008ec4:	3901      	subs	r1, #1
 8008ec6:	1a09      	subs	r1, r1, r0
 8008ec8:	4291      	cmp	r1, r2
 8008eca:	b508      	push	{r3, lr}
 8008ecc:	d202      	bcs.n	8008ed4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f000 f971 	bl	80091b6 <_ZSt20__throw_length_errorPKc>
 8008ed4:	bd08      	pop	{r3, pc}

08008ed6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8008ed6:	2a01      	cmp	r2, #1
 8008ed8:	b410      	push	{r4}
 8008eda:	d104      	bne.n	8008ee6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8008edc:	780a      	ldrb	r2, [r1, #0]
 8008ede:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ee2:	7002      	strb	r2, [r0, #0]
 8008ee4:	4770      	bx	lr
 8008ee6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008eea:	f7ff bfb1 	b.w	8008e50 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08008eee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8008eee:	b508      	push	{r3, lr}
 8008ef0:	1a52      	subs	r2, r2, r1
 8008ef2:	f7ff fff0 	bl	8008ed6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008ef6:	bd08      	pop	{r3, pc}

08008ef8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8008ef8:	b508      	push	{r3, lr}
 8008efa:	1a52      	subs	r2, r2, r1
 8008efc:	f7ff ffeb 	bl	8008ed6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008f00:	bd08      	pop	{r3, pc}

08008f02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8008f02:	f100 0208 	add.w	r2, r0, #8
 8008f06:	6002      	str	r2, [r0, #0]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	6042      	str	r2, [r0, #4]
 8008f0c:	7202      	strb	r2, [r0, #8]
 8008f0e:	4770      	bx	lr

08008f10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8008f10:	b510      	push	{r4, lr}
 8008f12:	4604      	mov	r4, r0
 8008f14:	f7ff ffc8 	bl	8008ea8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8008f18:	4620      	mov	r0, r4
 8008f1a:	bd10      	pop	{r4, pc}

08008f1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 8008f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f1e:	460c      	mov	r4, r1
 8008f20:	4605      	mov	r5, r0
 8008f22:	f7ff ff99 	bl	8008e58 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8008f26:	4606      	mov	r6, r0
 8008f28:	4620      	mov	r0, r4
 8008f2a:	f7ff ff95 	bl	8008e58 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8008f2e:	b190      	cbz	r0, 8008f56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x3a>
 8008f30:	42a5      	cmp	r5, r4
 8008f32:	d00a      	beq.n	8008f4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 8008f34:	6862      	ldr	r2, [r4, #4]
 8008f36:	b11a      	cbz	r2, 8008f40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x24>
 8008f38:	6821      	ldr	r1, [r4, #0]
 8008f3a:	6828      	ldr	r0, [r5, #0]
 8008f3c:	f7ff ffcb 	bl	8008ed6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008f40:	6863      	ldr	r3, [r4, #4]
 8008f42:	682a      	ldr	r2, [r5, #0]
 8008f44:	606b      	str	r3, [r5, #4]
 8008f46:	2100      	movs	r1, #0
 8008f48:	54d1      	strb	r1, [r2, r3]
 8008f4a:	6822      	ldr	r2, [r4, #0]
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	6063      	str	r3, [r4, #4]
 8008f50:	7013      	strb	r3, [r2, #0]
 8008f52:	4628      	mov	r0, r5
 8008f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f56:	b90e      	cbnz	r6, 8008f5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 8008f58:	6828      	ldr	r0, [r5, #0]
 8008f5a:	68af      	ldr	r7, [r5, #8]
 8008f5c:	6823      	ldr	r3, [r4, #0]
 8008f5e:	602b      	str	r3, [r5, #0]
 8008f60:	6863      	ldr	r3, [r4, #4]
 8008f62:	606b      	str	r3, [r5, #4]
 8008f64:	68a3      	ldr	r3, [r4, #8]
 8008f66:	60ab      	str	r3, [r5, #8]
 8008f68:	b110      	cbz	r0, 8008f70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x54>
 8008f6a:	6020      	str	r0, [r4, #0]
 8008f6c:	60a7      	str	r7, [r4, #8]
 8008f6e:	e7ec      	b.n	8008f4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 8008f70:	f104 0308 	add.w	r3, r4, #8
 8008f74:	6023      	str	r3, [r4, #0]
 8008f76:	e7e8      	b.n	8008f4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>

08008f78 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 8008f78:	6840      	ldr	r0, [r0, #4]
 8008f7a:	4770      	bx	lr

08008f7c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 8008f7c:	b510      	push	{r4, lr}
 8008f7e:	4604      	mov	r4, r0
 8008f80:	f7ff ff6a 	bl	8008e58 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8008f84:	b908      	cbnz	r0, 8008f8a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 8008f86:	68a0      	ldr	r0, [r4, #8]
 8008f88:	bd10      	pop	{r4, pc}
 8008f8a:	200f      	movs	r0, #15
 8008f8c:	e7fc      	b.n	8008f88 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

08008f8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 8008f8e:	4288      	cmp	r0, r1
 8008f90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f92:	4604      	mov	r4, r0
 8008f94:	460e      	mov	r6, r1
 8008f96:	d01d      	beq.n	8008fd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x46>
 8008f98:	684d      	ldr	r5, [r1, #4]
 8008f9a:	f7ff ffef 	bl	8008f7c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8008f9e:	42a8      	cmp	r0, r5
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	d211      	bcs.n	8008fc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x3a>
 8008fa4:	a901      	add	r1, sp, #4
 8008fa6:	4620      	mov	r0, r4
 8008fa8:	9501      	str	r5, [sp, #4]
 8008faa:	f7ff ff5b 	bl	8008e64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8008fae:	4607      	mov	r7, r0
 8008fb0:	4620      	mov	r0, r4
 8008fb2:	f7ff ff79 	bl	8008ea8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8008fb6:	9b01      	ldr	r3, [sp, #4]
 8008fb8:	6027      	str	r7, [r4, #0]
 8008fba:	60a3      	str	r3, [r4, #8]
 8008fbc:	6831      	ldr	r1, [r6, #0]
 8008fbe:	6820      	ldr	r0, [r4, #0]
 8008fc0:	462a      	mov	r2, r5
 8008fc2:	f7ff ff88 	bl	8008ed6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008fc6:	e001      	b.n	8008fcc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x3e>
 8008fc8:	2d00      	cmp	r5, #0
 8008fca:	d1f7      	bne.n	8008fbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x2e>
 8008fcc:	6823      	ldr	r3, [r4, #0]
 8008fce:	6065      	str	r5, [r4, #4]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	555a      	strb	r2, [r3, r5]
 8008fd4:	b003      	add	sp, #12
 8008fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008fd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 8008fd8:	b510      	push	{r4, lr}
 8008fda:	4604      	mov	r4, r0
 8008fdc:	f7ff ffd7 	bl	8008f8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 8008fe0:	4620      	mov	r0, r4
 8008fe2:	bd10      	pop	{r4, pc}

08008fe4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8008fe4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8008fe8:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008fea:	461f      	mov	r7, r3
 8008fec:	6843      	ldr	r3, [r0, #4]
 8008fee:	eb01 0802 	add.w	r8, r1, r2
 8008ff2:	1ab2      	subs	r2, r6, r2
 8008ff4:	441a      	add	r2, r3
 8008ff6:	4604      	mov	r4, r0
 8008ff8:	460d      	mov	r5, r1
 8008ffa:	eba3 0908 	sub.w	r9, r3, r8
 8008ffe:	9201      	str	r2, [sp, #4]
 8009000:	f7ff ffbc 	bl	8008f7c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8009004:	a901      	add	r1, sp, #4
 8009006:	4602      	mov	r2, r0
 8009008:	4620      	mov	r0, r4
 800900a:	f7ff ff2b 	bl	8008e64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800900e:	4682      	mov	sl, r0
 8009010:	b11d      	cbz	r5, 800901a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x36>
 8009012:	6821      	ldr	r1, [r4, #0]
 8009014:	462a      	mov	r2, r5
 8009016:	f7ff ff5e 	bl	8008ed6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800901a:	b137      	cbz	r7, 800902a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 800901c:	b12e      	cbz	r6, 800902a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 800901e:	4632      	mov	r2, r6
 8009020:	4639      	mov	r1, r7
 8009022:	eb0a 0005 	add.w	r0, sl, r5
 8009026:	f7ff ff56 	bl	8008ed6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800902a:	f1b9 0f00 	cmp.w	r9, #0
 800902e:	d007      	beq.n	8009040 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x5c>
 8009030:	6821      	ldr	r1, [r4, #0]
 8009032:	4435      	add	r5, r6
 8009034:	464a      	mov	r2, r9
 8009036:	4441      	add	r1, r8
 8009038:	eb0a 0005 	add.w	r0, sl, r5
 800903c:	f7ff ff4b 	bl	8008ed6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009040:	4620      	mov	r0, r4
 8009042:	f7ff ff31 	bl	8008ea8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8009046:	9b01      	ldr	r3, [sp, #4]
 8009048:	f8c4 a000 	str.w	sl, [r4]
 800904c:	60a3      	str	r3, [r4, #8]
 800904e:	b002      	add	sp, #8
 8009050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009054 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 8009054:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009058:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800905c:	4604      	mov	r4, r0
 800905e:	eb02 0708 	add.w	r7, r2, r8
 8009062:	460e      	mov	r6, r1
 8009064:	4615      	mov	r5, r2
 8009066:	f7ff ff89 	bl	8008f7c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 800906a:	42b8      	cmp	r0, r7
 800906c:	d30e      	bcc.n	800908c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x38>
 800906e:	b12d      	cbz	r5, 800907c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x28>
 8009070:	6820      	ldr	r0, [r4, #0]
 8009072:	462a      	mov	r2, r5
 8009074:	4631      	mov	r1, r6
 8009076:	4440      	add	r0, r8
 8009078:	f7ff ff2d 	bl	8008ed6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800907c:	6823      	ldr	r3, [r4, #0]
 800907e:	6067      	str	r7, [r4, #4]
 8009080:	2200      	movs	r2, #0
 8009082:	4620      	mov	r0, r4
 8009084:	55da      	strb	r2, [r3, r7]
 8009086:	b002      	add	sp, #8
 8009088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800908c:	9500      	str	r5, [sp, #0]
 800908e:	4633      	mov	r3, r6
 8009090:	2200      	movs	r2, #0
 8009092:	4641      	mov	r1, r8
 8009094:	4620      	mov	r0, r4
 8009096:	f7ff ffa5 	bl	8008fe4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800909a:	e7ef      	b.n	800907c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x28>

0800909c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>:
 800909c:	b570      	push	{r4, r5, r6, lr}
 800909e:	4b06      	ldr	r3, [pc, #24]	@ (80090b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj+0x1c>)
 80090a0:	4604      	mov	r4, r0
 80090a2:	460d      	mov	r5, r1
 80090a4:	4616      	mov	r6, r2
 80090a6:	2100      	movs	r1, #0
 80090a8:	f7ff ff09 	bl	8008ebe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80090ac:	4632      	mov	r2, r6
 80090ae:	4629      	mov	r1, r5
 80090b0:	4620      	mov	r0, r4
 80090b2:	f7ff ffcf 	bl	8009054 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 80090b6:	bd70      	pop	{r4, r5, r6, pc}
 80090b8:	0800a4e0 	.word	0x0800a4e0

080090bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 80090bc:	b508      	push	{r3, lr}
 80090be:	e9d1 1200 	ldrd	r1, r2, [r1]
 80090c2:	f7ff ffeb 	bl	800909c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>
 80090c6:	bd08      	pop	{r3, pc}

080090c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>:
 80090c8:	b508      	push	{r3, lr}
 80090ca:	f7ff fff7 	bl	80090bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 80090ce:	bd08      	pop	{r3, pc}

080090d0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 80090d0:	6800      	ldr	r0, [r0, #0]
 80090d2:	4770      	bx	lr

080090d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 80090d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80090d6:	1a53      	subs	r3, r2, r1
 80090d8:	2b0f      	cmp	r3, #15
 80090da:	4604      	mov	r4, r0
 80090dc:	460d      	mov	r5, r1
 80090de:	4616      	mov	r6, r2
 80090e0:	9301      	str	r3, [sp, #4]
 80090e2:	d906      	bls.n	80090f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x1e>
 80090e4:	2200      	movs	r2, #0
 80090e6:	a901      	add	r1, sp, #4
 80090e8:	f7ff febc 	bl	8008e64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80090ec:	9b01      	ldr	r3, [sp, #4]
 80090ee:	6020      	str	r0, [r4, #0]
 80090f0:	60a3      	str	r3, [r4, #8]
 80090f2:	4632      	mov	r2, r6
 80090f4:	4629      	mov	r1, r5
 80090f6:	6820      	ldr	r0, [r4, #0]
 80090f8:	f7ff fef9 	bl	8008eee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 80090fc:	9b01      	ldr	r3, [sp, #4]
 80090fe:	6822      	ldr	r2, [r4, #0]
 8009100:	6063      	str	r3, [r4, #4]
 8009102:	2100      	movs	r1, #0
 8009104:	54d1      	strb	r1, [r2, r3]
 8009106:	b002      	add	sp, #8
 8009108:	bd70      	pop	{r4, r5, r6, pc}

0800910a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 800910a:	f100 0208 	add.w	r2, r0, #8
 800910e:	b510      	push	{r4, lr}
 8009110:	6002      	str	r2, [r0, #0]
 8009112:	e9d1 1200 	ldrd	r1, r2, [r1]
 8009116:	4604      	mov	r4, r0
 8009118:	f04f 0300 	mov.w	r3, #0
 800911c:	440a      	add	r2, r1
 800911e:	f7ff ffd9 	bl	80090d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8009122:	4620      	mov	r0, r4
 8009124:	bd10      	pop	{r4, pc}

08009126 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8009126:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009128:	1a53      	subs	r3, r2, r1
 800912a:	2b0f      	cmp	r3, #15
 800912c:	4604      	mov	r4, r0
 800912e:	460d      	mov	r5, r1
 8009130:	4616      	mov	r6, r2
 8009132:	9301      	str	r3, [sp, #4]
 8009134:	d906      	bls.n	8009144 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x1e>
 8009136:	2200      	movs	r2, #0
 8009138:	a901      	add	r1, sp, #4
 800913a:	f7ff fe93 	bl	8008e64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800913e:	9b01      	ldr	r3, [sp, #4]
 8009140:	6020      	str	r0, [r4, #0]
 8009142:	60a3      	str	r3, [r4, #8]
 8009144:	4632      	mov	r2, r6
 8009146:	4629      	mov	r1, r5
 8009148:	6820      	ldr	r0, [r4, #0]
 800914a:	f7ff fed5 	bl	8008ef8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800914e:	9b01      	ldr	r3, [sp, #4]
 8009150:	6822      	ldr	r2, [r4, #0]
 8009152:	6063      	str	r3, [r4, #4]
 8009154:	2100      	movs	r1, #0
 8009156:	54d1      	strb	r1, [r2, r3]
 8009158:	b002      	add	sp, #8
 800915a:	bd70      	pop	{r4, r5, r6, pc}

0800915c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcjRKS3_>:
 800915c:	f100 0308 	add.w	r3, r0, #8
 8009160:	b510      	push	{r4, lr}
 8009162:	4604      	mov	r4, r0
 8009164:	6003      	str	r3, [r0, #0]
 8009166:	b919      	cbnz	r1, 8009170 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcjRKS3_+0x14>
 8009168:	b112      	cbz	r2, 8009170 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcjRKS3_+0x14>
 800916a:	4805      	ldr	r0, [pc, #20]	@ (8009180 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcjRKS3_+0x24>)
 800916c:	f000 f820 	bl	80091b0 <_ZSt19__throw_logic_errorPKc>
 8009170:	4620      	mov	r0, r4
 8009172:	f04f 0300 	mov.w	r3, #0
 8009176:	440a      	add	r2, r1
 8009178:	f7ff ffd5 	bl	8009126 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800917c:	4620      	mov	r0, r4
 800917e:	bd10      	pop	{r4, pc}
 8009180:	0800a4f5 	.word	0x0800a4f5

08009184 <_ZdlPv>:
 8009184:	f000 b832 	b.w	80091ec <free>

08009188 <_Znwj>:
 8009188:	2801      	cmp	r0, #1
 800918a:	bf38      	it	cc
 800918c:	2001      	movcc	r0, #1
 800918e:	b510      	push	{r4, lr}
 8009190:	4604      	mov	r4, r0
 8009192:	4620      	mov	r0, r4
 8009194:	f000 f822 	bl	80091dc <malloc>
 8009198:	b100      	cbz	r0, 800919c <_Znwj+0x14>
 800919a:	bd10      	pop	{r4, pc}
 800919c:	f000 f80e 	bl	80091bc <_ZSt15get_new_handlerv>
 80091a0:	b908      	cbnz	r0, 80091a6 <_Znwj+0x1e>
 80091a2:	f000 f813 	bl	80091cc <abort>
 80091a6:	4780      	blx	r0
 80091a8:	e7f3      	b.n	8009192 <_Znwj+0xa>

080091aa <_ZSt17__throw_bad_allocv>:
 80091aa:	b508      	push	{r3, lr}
 80091ac:	f000 f80e 	bl	80091cc <abort>

080091b0 <_ZSt19__throw_logic_errorPKc>:
 80091b0:	b508      	push	{r3, lr}
 80091b2:	f000 f80b 	bl	80091cc <abort>

080091b6 <_ZSt20__throw_length_errorPKc>:
 80091b6:	b508      	push	{r3, lr}
 80091b8:	f000 f808 	bl	80091cc <abort>

080091bc <_ZSt15get_new_handlerv>:
 80091bc:	4b02      	ldr	r3, [pc, #8]	@ (80091c8 <_ZSt15get_new_handlerv+0xc>)
 80091be:	6818      	ldr	r0, [r3, #0]
 80091c0:	f3bf 8f5b 	dmb	ish
 80091c4:	4770      	bx	lr
 80091c6:	bf00      	nop
 80091c8:	20000cec 	.word	0x20000cec

080091cc <abort>:
 80091cc:	b508      	push	{r3, lr}
 80091ce:	2006      	movs	r0, #6
 80091d0:	f000 fb04 	bl	80097dc <raise>
 80091d4:	2001      	movs	r0, #1
 80091d6:	f7f8 fcab 	bl	8001b30 <_exit>
	...

080091dc <malloc>:
 80091dc:	4b02      	ldr	r3, [pc, #8]	@ (80091e8 <malloc+0xc>)
 80091de:	4601      	mov	r1, r0
 80091e0:	6818      	ldr	r0, [r3, #0]
 80091e2:	f000 b82d 	b.w	8009240 <_malloc_r>
 80091e6:	bf00      	nop
 80091e8:	20000018 	.word	0x20000018

080091ec <free>:
 80091ec:	4b02      	ldr	r3, [pc, #8]	@ (80091f8 <free+0xc>)
 80091ee:	4601      	mov	r1, r0
 80091f0:	6818      	ldr	r0, [r3, #0]
 80091f2:	f000 bba1 	b.w	8009938 <_free_r>
 80091f6:	bf00      	nop
 80091f8:	20000018 	.word	0x20000018

080091fc <sbrk_aligned>:
 80091fc:	b570      	push	{r4, r5, r6, lr}
 80091fe:	4e0f      	ldr	r6, [pc, #60]	@ (800923c <sbrk_aligned+0x40>)
 8009200:	460c      	mov	r4, r1
 8009202:	6831      	ldr	r1, [r6, #0]
 8009204:	4605      	mov	r5, r0
 8009206:	b911      	cbnz	r1, 800920e <sbrk_aligned+0x12>
 8009208:	f000 fb38 	bl	800987c <_sbrk_r>
 800920c:	6030      	str	r0, [r6, #0]
 800920e:	4621      	mov	r1, r4
 8009210:	4628      	mov	r0, r5
 8009212:	f000 fb33 	bl	800987c <_sbrk_r>
 8009216:	1c43      	adds	r3, r0, #1
 8009218:	d103      	bne.n	8009222 <sbrk_aligned+0x26>
 800921a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800921e:	4620      	mov	r0, r4
 8009220:	bd70      	pop	{r4, r5, r6, pc}
 8009222:	1cc4      	adds	r4, r0, #3
 8009224:	f024 0403 	bic.w	r4, r4, #3
 8009228:	42a0      	cmp	r0, r4
 800922a:	d0f8      	beq.n	800921e <sbrk_aligned+0x22>
 800922c:	1a21      	subs	r1, r4, r0
 800922e:	4628      	mov	r0, r5
 8009230:	f000 fb24 	bl	800987c <_sbrk_r>
 8009234:	3001      	adds	r0, #1
 8009236:	d1f2      	bne.n	800921e <sbrk_aligned+0x22>
 8009238:	e7ef      	b.n	800921a <sbrk_aligned+0x1e>
 800923a:	bf00      	nop
 800923c:	20000cf0 	.word	0x20000cf0

08009240 <_malloc_r>:
 8009240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009244:	1ccd      	adds	r5, r1, #3
 8009246:	f025 0503 	bic.w	r5, r5, #3
 800924a:	3508      	adds	r5, #8
 800924c:	2d0c      	cmp	r5, #12
 800924e:	bf38      	it	cc
 8009250:	250c      	movcc	r5, #12
 8009252:	2d00      	cmp	r5, #0
 8009254:	4606      	mov	r6, r0
 8009256:	db01      	blt.n	800925c <_malloc_r+0x1c>
 8009258:	42a9      	cmp	r1, r5
 800925a:	d904      	bls.n	8009266 <_malloc_r+0x26>
 800925c:	230c      	movs	r3, #12
 800925e:	6033      	str	r3, [r6, #0]
 8009260:	2000      	movs	r0, #0
 8009262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009266:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800933c <_malloc_r+0xfc>
 800926a:	f000 f869 	bl	8009340 <__malloc_lock>
 800926e:	f8d8 3000 	ldr.w	r3, [r8]
 8009272:	461c      	mov	r4, r3
 8009274:	bb44      	cbnz	r4, 80092c8 <_malloc_r+0x88>
 8009276:	4629      	mov	r1, r5
 8009278:	4630      	mov	r0, r6
 800927a:	f7ff ffbf 	bl	80091fc <sbrk_aligned>
 800927e:	1c43      	adds	r3, r0, #1
 8009280:	4604      	mov	r4, r0
 8009282:	d158      	bne.n	8009336 <_malloc_r+0xf6>
 8009284:	f8d8 4000 	ldr.w	r4, [r8]
 8009288:	4627      	mov	r7, r4
 800928a:	2f00      	cmp	r7, #0
 800928c:	d143      	bne.n	8009316 <_malloc_r+0xd6>
 800928e:	2c00      	cmp	r4, #0
 8009290:	d04b      	beq.n	800932a <_malloc_r+0xea>
 8009292:	6823      	ldr	r3, [r4, #0]
 8009294:	4639      	mov	r1, r7
 8009296:	4630      	mov	r0, r6
 8009298:	eb04 0903 	add.w	r9, r4, r3
 800929c:	f000 faee 	bl	800987c <_sbrk_r>
 80092a0:	4581      	cmp	r9, r0
 80092a2:	d142      	bne.n	800932a <_malloc_r+0xea>
 80092a4:	6821      	ldr	r1, [r4, #0]
 80092a6:	1a6d      	subs	r5, r5, r1
 80092a8:	4629      	mov	r1, r5
 80092aa:	4630      	mov	r0, r6
 80092ac:	f7ff ffa6 	bl	80091fc <sbrk_aligned>
 80092b0:	3001      	adds	r0, #1
 80092b2:	d03a      	beq.n	800932a <_malloc_r+0xea>
 80092b4:	6823      	ldr	r3, [r4, #0]
 80092b6:	442b      	add	r3, r5
 80092b8:	6023      	str	r3, [r4, #0]
 80092ba:	f8d8 3000 	ldr.w	r3, [r8]
 80092be:	685a      	ldr	r2, [r3, #4]
 80092c0:	bb62      	cbnz	r2, 800931c <_malloc_r+0xdc>
 80092c2:	f8c8 7000 	str.w	r7, [r8]
 80092c6:	e00f      	b.n	80092e8 <_malloc_r+0xa8>
 80092c8:	6822      	ldr	r2, [r4, #0]
 80092ca:	1b52      	subs	r2, r2, r5
 80092cc:	d420      	bmi.n	8009310 <_malloc_r+0xd0>
 80092ce:	2a0b      	cmp	r2, #11
 80092d0:	d917      	bls.n	8009302 <_malloc_r+0xc2>
 80092d2:	1961      	adds	r1, r4, r5
 80092d4:	42a3      	cmp	r3, r4
 80092d6:	6025      	str	r5, [r4, #0]
 80092d8:	bf18      	it	ne
 80092da:	6059      	strne	r1, [r3, #4]
 80092dc:	6863      	ldr	r3, [r4, #4]
 80092de:	bf08      	it	eq
 80092e0:	f8c8 1000 	streq.w	r1, [r8]
 80092e4:	5162      	str	r2, [r4, r5]
 80092e6:	604b      	str	r3, [r1, #4]
 80092e8:	4630      	mov	r0, r6
 80092ea:	f000 f82f 	bl	800934c <__malloc_unlock>
 80092ee:	f104 000b 	add.w	r0, r4, #11
 80092f2:	1d23      	adds	r3, r4, #4
 80092f4:	f020 0007 	bic.w	r0, r0, #7
 80092f8:	1ac2      	subs	r2, r0, r3
 80092fa:	bf1c      	itt	ne
 80092fc:	1a1b      	subne	r3, r3, r0
 80092fe:	50a3      	strne	r3, [r4, r2]
 8009300:	e7af      	b.n	8009262 <_malloc_r+0x22>
 8009302:	6862      	ldr	r2, [r4, #4]
 8009304:	42a3      	cmp	r3, r4
 8009306:	bf0c      	ite	eq
 8009308:	f8c8 2000 	streq.w	r2, [r8]
 800930c:	605a      	strne	r2, [r3, #4]
 800930e:	e7eb      	b.n	80092e8 <_malloc_r+0xa8>
 8009310:	4623      	mov	r3, r4
 8009312:	6864      	ldr	r4, [r4, #4]
 8009314:	e7ae      	b.n	8009274 <_malloc_r+0x34>
 8009316:	463c      	mov	r4, r7
 8009318:	687f      	ldr	r7, [r7, #4]
 800931a:	e7b6      	b.n	800928a <_malloc_r+0x4a>
 800931c:	461a      	mov	r2, r3
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	42a3      	cmp	r3, r4
 8009322:	d1fb      	bne.n	800931c <_malloc_r+0xdc>
 8009324:	2300      	movs	r3, #0
 8009326:	6053      	str	r3, [r2, #4]
 8009328:	e7de      	b.n	80092e8 <_malloc_r+0xa8>
 800932a:	230c      	movs	r3, #12
 800932c:	6033      	str	r3, [r6, #0]
 800932e:	4630      	mov	r0, r6
 8009330:	f000 f80c 	bl	800934c <__malloc_unlock>
 8009334:	e794      	b.n	8009260 <_malloc_r+0x20>
 8009336:	6005      	str	r5, [r0, #0]
 8009338:	e7d6      	b.n	80092e8 <_malloc_r+0xa8>
 800933a:	bf00      	nop
 800933c:	20000cf4 	.word	0x20000cf4

08009340 <__malloc_lock>:
 8009340:	4801      	ldr	r0, [pc, #4]	@ (8009348 <__malloc_lock+0x8>)
 8009342:	f000 bae8 	b.w	8009916 <__retarget_lock_acquire_recursive>
 8009346:	bf00      	nop
 8009348:	20000e38 	.word	0x20000e38

0800934c <__malloc_unlock>:
 800934c:	4801      	ldr	r0, [pc, #4]	@ (8009354 <__malloc_unlock+0x8>)
 800934e:	f000 bae3 	b.w	8009918 <__retarget_lock_release_recursive>
 8009352:	bf00      	nop
 8009354:	20000e38 	.word	0x20000e38

08009358 <std>:
 8009358:	2300      	movs	r3, #0
 800935a:	b510      	push	{r4, lr}
 800935c:	4604      	mov	r4, r0
 800935e:	e9c0 3300 	strd	r3, r3, [r0]
 8009362:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009366:	6083      	str	r3, [r0, #8]
 8009368:	8181      	strh	r1, [r0, #12]
 800936a:	6643      	str	r3, [r0, #100]	@ 0x64
 800936c:	81c2      	strh	r2, [r0, #14]
 800936e:	6183      	str	r3, [r0, #24]
 8009370:	4619      	mov	r1, r3
 8009372:	2208      	movs	r2, #8
 8009374:	305c      	adds	r0, #92	@ 0x5c
 8009376:	f000 fa01 	bl	800977c <memset>
 800937a:	4b0d      	ldr	r3, [pc, #52]	@ (80093b0 <std+0x58>)
 800937c:	6263      	str	r3, [r4, #36]	@ 0x24
 800937e:	4b0d      	ldr	r3, [pc, #52]	@ (80093b4 <std+0x5c>)
 8009380:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009382:	4b0d      	ldr	r3, [pc, #52]	@ (80093b8 <std+0x60>)
 8009384:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009386:	4b0d      	ldr	r3, [pc, #52]	@ (80093bc <std+0x64>)
 8009388:	6323      	str	r3, [r4, #48]	@ 0x30
 800938a:	4b0d      	ldr	r3, [pc, #52]	@ (80093c0 <std+0x68>)
 800938c:	6224      	str	r4, [r4, #32]
 800938e:	429c      	cmp	r4, r3
 8009390:	d006      	beq.n	80093a0 <std+0x48>
 8009392:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009396:	4294      	cmp	r4, r2
 8009398:	d002      	beq.n	80093a0 <std+0x48>
 800939a:	33d0      	adds	r3, #208	@ 0xd0
 800939c:	429c      	cmp	r4, r3
 800939e:	d105      	bne.n	80093ac <std+0x54>
 80093a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80093a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093a8:	f000 bab4 	b.w	8009914 <__retarget_lock_init_recursive>
 80093ac:	bd10      	pop	{r4, pc}
 80093ae:	bf00      	nop
 80093b0:	080095cd 	.word	0x080095cd
 80093b4:	080095ef 	.word	0x080095ef
 80093b8:	08009627 	.word	0x08009627
 80093bc:	0800964b 	.word	0x0800964b
 80093c0:	20000cf8 	.word	0x20000cf8

080093c4 <stdio_exit_handler>:
 80093c4:	4a02      	ldr	r2, [pc, #8]	@ (80093d0 <stdio_exit_handler+0xc>)
 80093c6:	4903      	ldr	r1, [pc, #12]	@ (80093d4 <stdio_exit_handler+0x10>)
 80093c8:	4803      	ldr	r0, [pc, #12]	@ (80093d8 <stdio_exit_handler+0x14>)
 80093ca:	f000 b869 	b.w	80094a0 <_fwalk_sglue>
 80093ce:	bf00      	nop
 80093d0:	2000000c 	.word	0x2000000c
 80093d4:	0800a075 	.word	0x0800a075
 80093d8:	2000001c 	.word	0x2000001c

080093dc <cleanup_stdio>:
 80093dc:	6841      	ldr	r1, [r0, #4]
 80093de:	4b0c      	ldr	r3, [pc, #48]	@ (8009410 <cleanup_stdio+0x34>)
 80093e0:	4299      	cmp	r1, r3
 80093e2:	b510      	push	{r4, lr}
 80093e4:	4604      	mov	r4, r0
 80093e6:	d001      	beq.n	80093ec <cleanup_stdio+0x10>
 80093e8:	f000 fe44 	bl	800a074 <_fflush_r>
 80093ec:	68a1      	ldr	r1, [r4, #8]
 80093ee:	4b09      	ldr	r3, [pc, #36]	@ (8009414 <cleanup_stdio+0x38>)
 80093f0:	4299      	cmp	r1, r3
 80093f2:	d002      	beq.n	80093fa <cleanup_stdio+0x1e>
 80093f4:	4620      	mov	r0, r4
 80093f6:	f000 fe3d 	bl	800a074 <_fflush_r>
 80093fa:	68e1      	ldr	r1, [r4, #12]
 80093fc:	4b06      	ldr	r3, [pc, #24]	@ (8009418 <cleanup_stdio+0x3c>)
 80093fe:	4299      	cmp	r1, r3
 8009400:	d004      	beq.n	800940c <cleanup_stdio+0x30>
 8009402:	4620      	mov	r0, r4
 8009404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009408:	f000 be34 	b.w	800a074 <_fflush_r>
 800940c:	bd10      	pop	{r4, pc}
 800940e:	bf00      	nop
 8009410:	20000cf8 	.word	0x20000cf8
 8009414:	20000d60 	.word	0x20000d60
 8009418:	20000dc8 	.word	0x20000dc8

0800941c <global_stdio_init.part.0>:
 800941c:	b510      	push	{r4, lr}
 800941e:	4b0b      	ldr	r3, [pc, #44]	@ (800944c <global_stdio_init.part.0+0x30>)
 8009420:	4c0b      	ldr	r4, [pc, #44]	@ (8009450 <global_stdio_init.part.0+0x34>)
 8009422:	4a0c      	ldr	r2, [pc, #48]	@ (8009454 <global_stdio_init.part.0+0x38>)
 8009424:	601a      	str	r2, [r3, #0]
 8009426:	4620      	mov	r0, r4
 8009428:	2200      	movs	r2, #0
 800942a:	2104      	movs	r1, #4
 800942c:	f7ff ff94 	bl	8009358 <std>
 8009430:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009434:	2201      	movs	r2, #1
 8009436:	2109      	movs	r1, #9
 8009438:	f7ff ff8e 	bl	8009358 <std>
 800943c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009440:	2202      	movs	r2, #2
 8009442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009446:	2112      	movs	r1, #18
 8009448:	f7ff bf86 	b.w	8009358 <std>
 800944c:	20000e30 	.word	0x20000e30
 8009450:	20000cf8 	.word	0x20000cf8
 8009454:	080093c5 	.word	0x080093c5

08009458 <__sfp_lock_acquire>:
 8009458:	4801      	ldr	r0, [pc, #4]	@ (8009460 <__sfp_lock_acquire+0x8>)
 800945a:	f000 ba5c 	b.w	8009916 <__retarget_lock_acquire_recursive>
 800945e:	bf00      	nop
 8009460:	20000e39 	.word	0x20000e39

08009464 <__sfp_lock_release>:
 8009464:	4801      	ldr	r0, [pc, #4]	@ (800946c <__sfp_lock_release+0x8>)
 8009466:	f000 ba57 	b.w	8009918 <__retarget_lock_release_recursive>
 800946a:	bf00      	nop
 800946c:	20000e39 	.word	0x20000e39

08009470 <__sinit>:
 8009470:	b510      	push	{r4, lr}
 8009472:	4604      	mov	r4, r0
 8009474:	f7ff fff0 	bl	8009458 <__sfp_lock_acquire>
 8009478:	6a23      	ldr	r3, [r4, #32]
 800947a:	b11b      	cbz	r3, 8009484 <__sinit+0x14>
 800947c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009480:	f7ff bff0 	b.w	8009464 <__sfp_lock_release>
 8009484:	4b04      	ldr	r3, [pc, #16]	@ (8009498 <__sinit+0x28>)
 8009486:	6223      	str	r3, [r4, #32]
 8009488:	4b04      	ldr	r3, [pc, #16]	@ (800949c <__sinit+0x2c>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d1f5      	bne.n	800947c <__sinit+0xc>
 8009490:	f7ff ffc4 	bl	800941c <global_stdio_init.part.0>
 8009494:	e7f2      	b.n	800947c <__sinit+0xc>
 8009496:	bf00      	nop
 8009498:	080093dd 	.word	0x080093dd
 800949c:	20000e30 	.word	0x20000e30

080094a0 <_fwalk_sglue>:
 80094a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094a4:	4607      	mov	r7, r0
 80094a6:	4688      	mov	r8, r1
 80094a8:	4614      	mov	r4, r2
 80094aa:	2600      	movs	r6, #0
 80094ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80094b0:	f1b9 0901 	subs.w	r9, r9, #1
 80094b4:	d505      	bpl.n	80094c2 <_fwalk_sglue+0x22>
 80094b6:	6824      	ldr	r4, [r4, #0]
 80094b8:	2c00      	cmp	r4, #0
 80094ba:	d1f7      	bne.n	80094ac <_fwalk_sglue+0xc>
 80094bc:	4630      	mov	r0, r6
 80094be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094c2:	89ab      	ldrh	r3, [r5, #12]
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d907      	bls.n	80094d8 <_fwalk_sglue+0x38>
 80094c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80094cc:	3301      	adds	r3, #1
 80094ce:	d003      	beq.n	80094d8 <_fwalk_sglue+0x38>
 80094d0:	4629      	mov	r1, r5
 80094d2:	4638      	mov	r0, r7
 80094d4:	47c0      	blx	r8
 80094d6:	4306      	orrs	r6, r0
 80094d8:	3568      	adds	r5, #104	@ 0x68
 80094da:	e7e9      	b.n	80094b0 <_fwalk_sglue+0x10>

080094dc <iprintf>:
 80094dc:	b40f      	push	{r0, r1, r2, r3}
 80094de:	b507      	push	{r0, r1, r2, lr}
 80094e0:	4906      	ldr	r1, [pc, #24]	@ (80094fc <iprintf+0x20>)
 80094e2:	ab04      	add	r3, sp, #16
 80094e4:	6808      	ldr	r0, [r1, #0]
 80094e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80094ea:	6881      	ldr	r1, [r0, #8]
 80094ec:	9301      	str	r3, [sp, #4]
 80094ee:	f000 fa97 	bl	8009a20 <_vfiprintf_r>
 80094f2:	b003      	add	sp, #12
 80094f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80094f8:	b004      	add	sp, #16
 80094fa:	4770      	bx	lr
 80094fc:	20000018 	.word	0x20000018

08009500 <putchar>:
 8009500:	4b02      	ldr	r3, [pc, #8]	@ (800950c <putchar+0xc>)
 8009502:	4601      	mov	r1, r0
 8009504:	6818      	ldr	r0, [r3, #0]
 8009506:	6882      	ldr	r2, [r0, #8]
 8009508:	f000 be3e 	b.w	800a188 <_putc_r>
 800950c:	20000018 	.word	0x20000018

08009510 <_puts_r>:
 8009510:	6a03      	ldr	r3, [r0, #32]
 8009512:	b570      	push	{r4, r5, r6, lr}
 8009514:	6884      	ldr	r4, [r0, #8]
 8009516:	4605      	mov	r5, r0
 8009518:	460e      	mov	r6, r1
 800951a:	b90b      	cbnz	r3, 8009520 <_puts_r+0x10>
 800951c:	f7ff ffa8 	bl	8009470 <__sinit>
 8009520:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009522:	07db      	lsls	r3, r3, #31
 8009524:	d405      	bmi.n	8009532 <_puts_r+0x22>
 8009526:	89a3      	ldrh	r3, [r4, #12]
 8009528:	0598      	lsls	r0, r3, #22
 800952a:	d402      	bmi.n	8009532 <_puts_r+0x22>
 800952c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800952e:	f000 f9f2 	bl	8009916 <__retarget_lock_acquire_recursive>
 8009532:	89a3      	ldrh	r3, [r4, #12]
 8009534:	0719      	lsls	r1, r3, #28
 8009536:	d502      	bpl.n	800953e <_puts_r+0x2e>
 8009538:	6923      	ldr	r3, [r4, #16]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d135      	bne.n	80095aa <_puts_r+0x9a>
 800953e:	4621      	mov	r1, r4
 8009540:	4628      	mov	r0, r5
 8009542:	f000 f8c5 	bl	80096d0 <__swsetup_r>
 8009546:	b380      	cbz	r0, 80095aa <_puts_r+0x9a>
 8009548:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800954c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800954e:	07da      	lsls	r2, r3, #31
 8009550:	d405      	bmi.n	800955e <_puts_r+0x4e>
 8009552:	89a3      	ldrh	r3, [r4, #12]
 8009554:	059b      	lsls	r3, r3, #22
 8009556:	d402      	bmi.n	800955e <_puts_r+0x4e>
 8009558:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800955a:	f000 f9dd 	bl	8009918 <__retarget_lock_release_recursive>
 800955e:	4628      	mov	r0, r5
 8009560:	bd70      	pop	{r4, r5, r6, pc}
 8009562:	2b00      	cmp	r3, #0
 8009564:	da04      	bge.n	8009570 <_puts_r+0x60>
 8009566:	69a2      	ldr	r2, [r4, #24]
 8009568:	429a      	cmp	r2, r3
 800956a:	dc17      	bgt.n	800959c <_puts_r+0x8c>
 800956c:	290a      	cmp	r1, #10
 800956e:	d015      	beq.n	800959c <_puts_r+0x8c>
 8009570:	6823      	ldr	r3, [r4, #0]
 8009572:	1c5a      	adds	r2, r3, #1
 8009574:	6022      	str	r2, [r4, #0]
 8009576:	7019      	strb	r1, [r3, #0]
 8009578:	68a3      	ldr	r3, [r4, #8]
 800957a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800957e:	3b01      	subs	r3, #1
 8009580:	60a3      	str	r3, [r4, #8]
 8009582:	2900      	cmp	r1, #0
 8009584:	d1ed      	bne.n	8009562 <_puts_r+0x52>
 8009586:	2b00      	cmp	r3, #0
 8009588:	da11      	bge.n	80095ae <_puts_r+0x9e>
 800958a:	4622      	mov	r2, r4
 800958c:	210a      	movs	r1, #10
 800958e:	4628      	mov	r0, r5
 8009590:	f000 f85f 	bl	8009652 <__swbuf_r>
 8009594:	3001      	adds	r0, #1
 8009596:	d0d7      	beq.n	8009548 <_puts_r+0x38>
 8009598:	250a      	movs	r5, #10
 800959a:	e7d7      	b.n	800954c <_puts_r+0x3c>
 800959c:	4622      	mov	r2, r4
 800959e:	4628      	mov	r0, r5
 80095a0:	f000 f857 	bl	8009652 <__swbuf_r>
 80095a4:	3001      	adds	r0, #1
 80095a6:	d1e7      	bne.n	8009578 <_puts_r+0x68>
 80095a8:	e7ce      	b.n	8009548 <_puts_r+0x38>
 80095aa:	3e01      	subs	r6, #1
 80095ac:	e7e4      	b.n	8009578 <_puts_r+0x68>
 80095ae:	6823      	ldr	r3, [r4, #0]
 80095b0:	1c5a      	adds	r2, r3, #1
 80095b2:	6022      	str	r2, [r4, #0]
 80095b4:	220a      	movs	r2, #10
 80095b6:	701a      	strb	r2, [r3, #0]
 80095b8:	e7ee      	b.n	8009598 <_puts_r+0x88>
	...

080095bc <puts>:
 80095bc:	4b02      	ldr	r3, [pc, #8]	@ (80095c8 <puts+0xc>)
 80095be:	4601      	mov	r1, r0
 80095c0:	6818      	ldr	r0, [r3, #0]
 80095c2:	f7ff bfa5 	b.w	8009510 <_puts_r>
 80095c6:	bf00      	nop
 80095c8:	20000018 	.word	0x20000018

080095cc <__sread>:
 80095cc:	b510      	push	{r4, lr}
 80095ce:	460c      	mov	r4, r1
 80095d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095d4:	f000 f92c 	bl	8009830 <_read_r>
 80095d8:	2800      	cmp	r0, #0
 80095da:	bfab      	itete	ge
 80095dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80095de:	89a3      	ldrhlt	r3, [r4, #12]
 80095e0:	181b      	addge	r3, r3, r0
 80095e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80095e6:	bfac      	ite	ge
 80095e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80095ea:	81a3      	strhlt	r3, [r4, #12]
 80095ec:	bd10      	pop	{r4, pc}

080095ee <__swrite>:
 80095ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095f2:	461f      	mov	r7, r3
 80095f4:	898b      	ldrh	r3, [r1, #12]
 80095f6:	05db      	lsls	r3, r3, #23
 80095f8:	4605      	mov	r5, r0
 80095fa:	460c      	mov	r4, r1
 80095fc:	4616      	mov	r6, r2
 80095fe:	d505      	bpl.n	800960c <__swrite+0x1e>
 8009600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009604:	2302      	movs	r3, #2
 8009606:	2200      	movs	r2, #0
 8009608:	f000 f900 	bl	800980c <_lseek_r>
 800960c:	89a3      	ldrh	r3, [r4, #12]
 800960e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009612:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009616:	81a3      	strh	r3, [r4, #12]
 8009618:	4632      	mov	r2, r6
 800961a:	463b      	mov	r3, r7
 800961c:	4628      	mov	r0, r5
 800961e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009622:	f000 b93b 	b.w	800989c <_write_r>

08009626 <__sseek>:
 8009626:	b510      	push	{r4, lr}
 8009628:	460c      	mov	r4, r1
 800962a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800962e:	f000 f8ed 	bl	800980c <_lseek_r>
 8009632:	1c43      	adds	r3, r0, #1
 8009634:	89a3      	ldrh	r3, [r4, #12]
 8009636:	bf15      	itete	ne
 8009638:	6560      	strne	r0, [r4, #84]	@ 0x54
 800963a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800963e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009642:	81a3      	strheq	r3, [r4, #12]
 8009644:	bf18      	it	ne
 8009646:	81a3      	strhne	r3, [r4, #12]
 8009648:	bd10      	pop	{r4, pc}

0800964a <__sclose>:
 800964a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800964e:	f000 b8cd 	b.w	80097ec <_close_r>

08009652 <__swbuf_r>:
 8009652:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009654:	460e      	mov	r6, r1
 8009656:	4614      	mov	r4, r2
 8009658:	4605      	mov	r5, r0
 800965a:	b118      	cbz	r0, 8009664 <__swbuf_r+0x12>
 800965c:	6a03      	ldr	r3, [r0, #32]
 800965e:	b90b      	cbnz	r3, 8009664 <__swbuf_r+0x12>
 8009660:	f7ff ff06 	bl	8009470 <__sinit>
 8009664:	69a3      	ldr	r3, [r4, #24]
 8009666:	60a3      	str	r3, [r4, #8]
 8009668:	89a3      	ldrh	r3, [r4, #12]
 800966a:	071a      	lsls	r2, r3, #28
 800966c:	d501      	bpl.n	8009672 <__swbuf_r+0x20>
 800966e:	6923      	ldr	r3, [r4, #16]
 8009670:	b943      	cbnz	r3, 8009684 <__swbuf_r+0x32>
 8009672:	4621      	mov	r1, r4
 8009674:	4628      	mov	r0, r5
 8009676:	f000 f82b 	bl	80096d0 <__swsetup_r>
 800967a:	b118      	cbz	r0, 8009684 <__swbuf_r+0x32>
 800967c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009680:	4638      	mov	r0, r7
 8009682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009684:	6823      	ldr	r3, [r4, #0]
 8009686:	6922      	ldr	r2, [r4, #16]
 8009688:	1a98      	subs	r0, r3, r2
 800968a:	6963      	ldr	r3, [r4, #20]
 800968c:	b2f6      	uxtb	r6, r6
 800968e:	4283      	cmp	r3, r0
 8009690:	4637      	mov	r7, r6
 8009692:	dc05      	bgt.n	80096a0 <__swbuf_r+0x4e>
 8009694:	4621      	mov	r1, r4
 8009696:	4628      	mov	r0, r5
 8009698:	f000 fcec 	bl	800a074 <_fflush_r>
 800969c:	2800      	cmp	r0, #0
 800969e:	d1ed      	bne.n	800967c <__swbuf_r+0x2a>
 80096a0:	68a3      	ldr	r3, [r4, #8]
 80096a2:	3b01      	subs	r3, #1
 80096a4:	60a3      	str	r3, [r4, #8]
 80096a6:	6823      	ldr	r3, [r4, #0]
 80096a8:	1c5a      	adds	r2, r3, #1
 80096aa:	6022      	str	r2, [r4, #0]
 80096ac:	701e      	strb	r6, [r3, #0]
 80096ae:	6962      	ldr	r2, [r4, #20]
 80096b0:	1c43      	adds	r3, r0, #1
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d004      	beq.n	80096c0 <__swbuf_r+0x6e>
 80096b6:	89a3      	ldrh	r3, [r4, #12]
 80096b8:	07db      	lsls	r3, r3, #31
 80096ba:	d5e1      	bpl.n	8009680 <__swbuf_r+0x2e>
 80096bc:	2e0a      	cmp	r6, #10
 80096be:	d1df      	bne.n	8009680 <__swbuf_r+0x2e>
 80096c0:	4621      	mov	r1, r4
 80096c2:	4628      	mov	r0, r5
 80096c4:	f000 fcd6 	bl	800a074 <_fflush_r>
 80096c8:	2800      	cmp	r0, #0
 80096ca:	d0d9      	beq.n	8009680 <__swbuf_r+0x2e>
 80096cc:	e7d6      	b.n	800967c <__swbuf_r+0x2a>
	...

080096d0 <__swsetup_r>:
 80096d0:	b538      	push	{r3, r4, r5, lr}
 80096d2:	4b29      	ldr	r3, [pc, #164]	@ (8009778 <__swsetup_r+0xa8>)
 80096d4:	4605      	mov	r5, r0
 80096d6:	6818      	ldr	r0, [r3, #0]
 80096d8:	460c      	mov	r4, r1
 80096da:	b118      	cbz	r0, 80096e4 <__swsetup_r+0x14>
 80096dc:	6a03      	ldr	r3, [r0, #32]
 80096de:	b90b      	cbnz	r3, 80096e4 <__swsetup_r+0x14>
 80096e0:	f7ff fec6 	bl	8009470 <__sinit>
 80096e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096e8:	0719      	lsls	r1, r3, #28
 80096ea:	d422      	bmi.n	8009732 <__swsetup_r+0x62>
 80096ec:	06da      	lsls	r2, r3, #27
 80096ee:	d407      	bmi.n	8009700 <__swsetup_r+0x30>
 80096f0:	2209      	movs	r2, #9
 80096f2:	602a      	str	r2, [r5, #0]
 80096f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096f8:	81a3      	strh	r3, [r4, #12]
 80096fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80096fe:	e033      	b.n	8009768 <__swsetup_r+0x98>
 8009700:	0758      	lsls	r0, r3, #29
 8009702:	d512      	bpl.n	800972a <__swsetup_r+0x5a>
 8009704:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009706:	b141      	cbz	r1, 800971a <__swsetup_r+0x4a>
 8009708:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800970c:	4299      	cmp	r1, r3
 800970e:	d002      	beq.n	8009716 <__swsetup_r+0x46>
 8009710:	4628      	mov	r0, r5
 8009712:	f000 f911 	bl	8009938 <_free_r>
 8009716:	2300      	movs	r3, #0
 8009718:	6363      	str	r3, [r4, #52]	@ 0x34
 800971a:	89a3      	ldrh	r3, [r4, #12]
 800971c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009720:	81a3      	strh	r3, [r4, #12]
 8009722:	2300      	movs	r3, #0
 8009724:	6063      	str	r3, [r4, #4]
 8009726:	6923      	ldr	r3, [r4, #16]
 8009728:	6023      	str	r3, [r4, #0]
 800972a:	89a3      	ldrh	r3, [r4, #12]
 800972c:	f043 0308 	orr.w	r3, r3, #8
 8009730:	81a3      	strh	r3, [r4, #12]
 8009732:	6923      	ldr	r3, [r4, #16]
 8009734:	b94b      	cbnz	r3, 800974a <__swsetup_r+0x7a>
 8009736:	89a3      	ldrh	r3, [r4, #12]
 8009738:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800973c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009740:	d003      	beq.n	800974a <__swsetup_r+0x7a>
 8009742:	4621      	mov	r1, r4
 8009744:	4628      	mov	r0, r5
 8009746:	f000 fce3 	bl	800a110 <__smakebuf_r>
 800974a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800974e:	f013 0201 	ands.w	r2, r3, #1
 8009752:	d00a      	beq.n	800976a <__swsetup_r+0x9a>
 8009754:	2200      	movs	r2, #0
 8009756:	60a2      	str	r2, [r4, #8]
 8009758:	6962      	ldr	r2, [r4, #20]
 800975a:	4252      	negs	r2, r2
 800975c:	61a2      	str	r2, [r4, #24]
 800975e:	6922      	ldr	r2, [r4, #16]
 8009760:	b942      	cbnz	r2, 8009774 <__swsetup_r+0xa4>
 8009762:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009766:	d1c5      	bne.n	80096f4 <__swsetup_r+0x24>
 8009768:	bd38      	pop	{r3, r4, r5, pc}
 800976a:	0799      	lsls	r1, r3, #30
 800976c:	bf58      	it	pl
 800976e:	6962      	ldrpl	r2, [r4, #20]
 8009770:	60a2      	str	r2, [r4, #8]
 8009772:	e7f4      	b.n	800975e <__swsetup_r+0x8e>
 8009774:	2000      	movs	r0, #0
 8009776:	e7f7      	b.n	8009768 <__swsetup_r+0x98>
 8009778:	20000018 	.word	0x20000018

0800977c <memset>:
 800977c:	4402      	add	r2, r0
 800977e:	4603      	mov	r3, r0
 8009780:	4293      	cmp	r3, r2
 8009782:	d100      	bne.n	8009786 <memset+0xa>
 8009784:	4770      	bx	lr
 8009786:	f803 1b01 	strb.w	r1, [r3], #1
 800978a:	e7f9      	b.n	8009780 <memset+0x4>

0800978c <_raise_r>:
 800978c:	291f      	cmp	r1, #31
 800978e:	b538      	push	{r3, r4, r5, lr}
 8009790:	4605      	mov	r5, r0
 8009792:	460c      	mov	r4, r1
 8009794:	d904      	bls.n	80097a0 <_raise_r+0x14>
 8009796:	2316      	movs	r3, #22
 8009798:	6003      	str	r3, [r0, #0]
 800979a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800979e:	bd38      	pop	{r3, r4, r5, pc}
 80097a0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80097a2:	b112      	cbz	r2, 80097aa <_raise_r+0x1e>
 80097a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80097a8:	b94b      	cbnz	r3, 80097be <_raise_r+0x32>
 80097aa:	4628      	mov	r0, r5
 80097ac:	f000 f864 	bl	8009878 <_getpid_r>
 80097b0:	4622      	mov	r2, r4
 80097b2:	4601      	mov	r1, r0
 80097b4:	4628      	mov	r0, r5
 80097b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097ba:	f000 b84b 	b.w	8009854 <_kill_r>
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d00a      	beq.n	80097d8 <_raise_r+0x4c>
 80097c2:	1c59      	adds	r1, r3, #1
 80097c4:	d103      	bne.n	80097ce <_raise_r+0x42>
 80097c6:	2316      	movs	r3, #22
 80097c8:	6003      	str	r3, [r0, #0]
 80097ca:	2001      	movs	r0, #1
 80097cc:	e7e7      	b.n	800979e <_raise_r+0x12>
 80097ce:	2100      	movs	r1, #0
 80097d0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80097d4:	4620      	mov	r0, r4
 80097d6:	4798      	blx	r3
 80097d8:	2000      	movs	r0, #0
 80097da:	e7e0      	b.n	800979e <_raise_r+0x12>

080097dc <raise>:
 80097dc:	4b02      	ldr	r3, [pc, #8]	@ (80097e8 <raise+0xc>)
 80097de:	4601      	mov	r1, r0
 80097e0:	6818      	ldr	r0, [r3, #0]
 80097e2:	f7ff bfd3 	b.w	800978c <_raise_r>
 80097e6:	bf00      	nop
 80097e8:	20000018 	.word	0x20000018

080097ec <_close_r>:
 80097ec:	b538      	push	{r3, r4, r5, lr}
 80097ee:	4d06      	ldr	r5, [pc, #24]	@ (8009808 <_close_r+0x1c>)
 80097f0:	2300      	movs	r3, #0
 80097f2:	4604      	mov	r4, r0
 80097f4:	4608      	mov	r0, r1
 80097f6:	602b      	str	r3, [r5, #0]
 80097f8:	f7f8 f9c2 	bl	8001b80 <_close>
 80097fc:	1c43      	adds	r3, r0, #1
 80097fe:	d102      	bne.n	8009806 <_close_r+0x1a>
 8009800:	682b      	ldr	r3, [r5, #0]
 8009802:	b103      	cbz	r3, 8009806 <_close_r+0x1a>
 8009804:	6023      	str	r3, [r4, #0]
 8009806:	bd38      	pop	{r3, r4, r5, pc}
 8009808:	20000e34 	.word	0x20000e34

0800980c <_lseek_r>:
 800980c:	b538      	push	{r3, r4, r5, lr}
 800980e:	4d07      	ldr	r5, [pc, #28]	@ (800982c <_lseek_r+0x20>)
 8009810:	4604      	mov	r4, r0
 8009812:	4608      	mov	r0, r1
 8009814:	4611      	mov	r1, r2
 8009816:	2200      	movs	r2, #0
 8009818:	602a      	str	r2, [r5, #0]
 800981a:	461a      	mov	r2, r3
 800981c:	f7f8 f9d7 	bl	8001bce <_lseek>
 8009820:	1c43      	adds	r3, r0, #1
 8009822:	d102      	bne.n	800982a <_lseek_r+0x1e>
 8009824:	682b      	ldr	r3, [r5, #0]
 8009826:	b103      	cbz	r3, 800982a <_lseek_r+0x1e>
 8009828:	6023      	str	r3, [r4, #0]
 800982a:	bd38      	pop	{r3, r4, r5, pc}
 800982c:	20000e34 	.word	0x20000e34

08009830 <_read_r>:
 8009830:	b538      	push	{r3, r4, r5, lr}
 8009832:	4d07      	ldr	r5, [pc, #28]	@ (8009850 <_read_r+0x20>)
 8009834:	4604      	mov	r4, r0
 8009836:	4608      	mov	r0, r1
 8009838:	4611      	mov	r1, r2
 800983a:	2200      	movs	r2, #0
 800983c:	602a      	str	r2, [r5, #0]
 800983e:	461a      	mov	r2, r3
 8009840:	f7f8 f981 	bl	8001b46 <_read>
 8009844:	1c43      	adds	r3, r0, #1
 8009846:	d102      	bne.n	800984e <_read_r+0x1e>
 8009848:	682b      	ldr	r3, [r5, #0]
 800984a:	b103      	cbz	r3, 800984e <_read_r+0x1e>
 800984c:	6023      	str	r3, [r4, #0]
 800984e:	bd38      	pop	{r3, r4, r5, pc}
 8009850:	20000e34 	.word	0x20000e34

08009854 <_kill_r>:
 8009854:	b538      	push	{r3, r4, r5, lr}
 8009856:	4d07      	ldr	r5, [pc, #28]	@ (8009874 <_kill_r+0x20>)
 8009858:	2300      	movs	r3, #0
 800985a:	4604      	mov	r4, r0
 800985c:	4608      	mov	r0, r1
 800985e:	4611      	mov	r1, r2
 8009860:	602b      	str	r3, [r5, #0]
 8009862:	f7f8 f955 	bl	8001b10 <_kill>
 8009866:	1c43      	adds	r3, r0, #1
 8009868:	d102      	bne.n	8009870 <_kill_r+0x1c>
 800986a:	682b      	ldr	r3, [r5, #0]
 800986c:	b103      	cbz	r3, 8009870 <_kill_r+0x1c>
 800986e:	6023      	str	r3, [r4, #0]
 8009870:	bd38      	pop	{r3, r4, r5, pc}
 8009872:	bf00      	nop
 8009874:	20000e34 	.word	0x20000e34

08009878 <_getpid_r>:
 8009878:	f7f8 b942 	b.w	8001b00 <_getpid>

0800987c <_sbrk_r>:
 800987c:	b538      	push	{r3, r4, r5, lr}
 800987e:	4d06      	ldr	r5, [pc, #24]	@ (8009898 <_sbrk_r+0x1c>)
 8009880:	2300      	movs	r3, #0
 8009882:	4604      	mov	r4, r0
 8009884:	4608      	mov	r0, r1
 8009886:	602b      	str	r3, [r5, #0]
 8009888:	f7f8 f9ae 	bl	8001be8 <_sbrk>
 800988c:	1c43      	adds	r3, r0, #1
 800988e:	d102      	bne.n	8009896 <_sbrk_r+0x1a>
 8009890:	682b      	ldr	r3, [r5, #0]
 8009892:	b103      	cbz	r3, 8009896 <_sbrk_r+0x1a>
 8009894:	6023      	str	r3, [r4, #0]
 8009896:	bd38      	pop	{r3, r4, r5, pc}
 8009898:	20000e34 	.word	0x20000e34

0800989c <_write_r>:
 800989c:	b538      	push	{r3, r4, r5, lr}
 800989e:	4d07      	ldr	r5, [pc, #28]	@ (80098bc <_write_r+0x20>)
 80098a0:	4604      	mov	r4, r0
 80098a2:	4608      	mov	r0, r1
 80098a4:	4611      	mov	r1, r2
 80098a6:	2200      	movs	r2, #0
 80098a8:	602a      	str	r2, [r5, #0]
 80098aa:	461a      	mov	r2, r3
 80098ac:	f7f7 fa76 	bl	8000d9c <_write>
 80098b0:	1c43      	adds	r3, r0, #1
 80098b2:	d102      	bne.n	80098ba <_write_r+0x1e>
 80098b4:	682b      	ldr	r3, [r5, #0]
 80098b6:	b103      	cbz	r3, 80098ba <_write_r+0x1e>
 80098b8:	6023      	str	r3, [r4, #0]
 80098ba:	bd38      	pop	{r3, r4, r5, pc}
 80098bc:	20000e34 	.word	0x20000e34

080098c0 <__errno>:
 80098c0:	4b01      	ldr	r3, [pc, #4]	@ (80098c8 <__errno+0x8>)
 80098c2:	6818      	ldr	r0, [r3, #0]
 80098c4:	4770      	bx	lr
 80098c6:	bf00      	nop
 80098c8:	20000018 	.word	0x20000018

080098cc <__libc_init_array>:
 80098cc:	b570      	push	{r4, r5, r6, lr}
 80098ce:	4d0d      	ldr	r5, [pc, #52]	@ (8009904 <__libc_init_array+0x38>)
 80098d0:	4c0d      	ldr	r4, [pc, #52]	@ (8009908 <__libc_init_array+0x3c>)
 80098d2:	1b64      	subs	r4, r4, r5
 80098d4:	10a4      	asrs	r4, r4, #2
 80098d6:	2600      	movs	r6, #0
 80098d8:	42a6      	cmp	r6, r4
 80098da:	d109      	bne.n	80098f0 <__libc_init_array+0x24>
 80098dc:	4d0b      	ldr	r5, [pc, #44]	@ (800990c <__libc_init_array+0x40>)
 80098de:	4c0c      	ldr	r4, [pc, #48]	@ (8009910 <__libc_init_array+0x44>)
 80098e0:	f000 fca8 	bl	800a234 <_init>
 80098e4:	1b64      	subs	r4, r4, r5
 80098e6:	10a4      	asrs	r4, r4, #2
 80098e8:	2600      	movs	r6, #0
 80098ea:	42a6      	cmp	r6, r4
 80098ec:	d105      	bne.n	80098fa <__libc_init_array+0x2e>
 80098ee:	bd70      	pop	{r4, r5, r6, pc}
 80098f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80098f4:	4798      	blx	r3
 80098f6:	3601      	adds	r6, #1
 80098f8:	e7ee      	b.n	80098d8 <__libc_init_array+0xc>
 80098fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80098fe:	4798      	blx	r3
 8009900:	3601      	adds	r6, #1
 8009902:	e7f2      	b.n	80098ea <__libc_init_array+0x1e>
 8009904:	0800a564 	.word	0x0800a564
 8009908:	0800a564 	.word	0x0800a564
 800990c:	0800a564 	.word	0x0800a564
 8009910:	0800a56c 	.word	0x0800a56c

08009914 <__retarget_lock_init_recursive>:
 8009914:	4770      	bx	lr

08009916 <__retarget_lock_acquire_recursive>:
 8009916:	4770      	bx	lr

08009918 <__retarget_lock_release_recursive>:
 8009918:	4770      	bx	lr

0800991a <memcpy>:
 800991a:	440a      	add	r2, r1
 800991c:	4291      	cmp	r1, r2
 800991e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009922:	d100      	bne.n	8009926 <memcpy+0xc>
 8009924:	4770      	bx	lr
 8009926:	b510      	push	{r4, lr}
 8009928:	f811 4b01 	ldrb.w	r4, [r1], #1
 800992c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009930:	4291      	cmp	r1, r2
 8009932:	d1f9      	bne.n	8009928 <memcpy+0xe>
 8009934:	bd10      	pop	{r4, pc}
	...

08009938 <_free_r>:
 8009938:	b538      	push	{r3, r4, r5, lr}
 800993a:	4605      	mov	r5, r0
 800993c:	2900      	cmp	r1, #0
 800993e:	d041      	beq.n	80099c4 <_free_r+0x8c>
 8009940:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009944:	1f0c      	subs	r4, r1, #4
 8009946:	2b00      	cmp	r3, #0
 8009948:	bfb8      	it	lt
 800994a:	18e4      	addlt	r4, r4, r3
 800994c:	f7ff fcf8 	bl	8009340 <__malloc_lock>
 8009950:	4a1d      	ldr	r2, [pc, #116]	@ (80099c8 <_free_r+0x90>)
 8009952:	6813      	ldr	r3, [r2, #0]
 8009954:	b933      	cbnz	r3, 8009964 <_free_r+0x2c>
 8009956:	6063      	str	r3, [r4, #4]
 8009958:	6014      	str	r4, [r2, #0]
 800995a:	4628      	mov	r0, r5
 800995c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009960:	f7ff bcf4 	b.w	800934c <__malloc_unlock>
 8009964:	42a3      	cmp	r3, r4
 8009966:	d908      	bls.n	800997a <_free_r+0x42>
 8009968:	6820      	ldr	r0, [r4, #0]
 800996a:	1821      	adds	r1, r4, r0
 800996c:	428b      	cmp	r3, r1
 800996e:	bf01      	itttt	eq
 8009970:	6819      	ldreq	r1, [r3, #0]
 8009972:	685b      	ldreq	r3, [r3, #4]
 8009974:	1809      	addeq	r1, r1, r0
 8009976:	6021      	streq	r1, [r4, #0]
 8009978:	e7ed      	b.n	8009956 <_free_r+0x1e>
 800997a:	461a      	mov	r2, r3
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	b10b      	cbz	r3, 8009984 <_free_r+0x4c>
 8009980:	42a3      	cmp	r3, r4
 8009982:	d9fa      	bls.n	800997a <_free_r+0x42>
 8009984:	6811      	ldr	r1, [r2, #0]
 8009986:	1850      	adds	r0, r2, r1
 8009988:	42a0      	cmp	r0, r4
 800998a:	d10b      	bne.n	80099a4 <_free_r+0x6c>
 800998c:	6820      	ldr	r0, [r4, #0]
 800998e:	4401      	add	r1, r0
 8009990:	1850      	adds	r0, r2, r1
 8009992:	4283      	cmp	r3, r0
 8009994:	6011      	str	r1, [r2, #0]
 8009996:	d1e0      	bne.n	800995a <_free_r+0x22>
 8009998:	6818      	ldr	r0, [r3, #0]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	6053      	str	r3, [r2, #4]
 800999e:	4408      	add	r0, r1
 80099a0:	6010      	str	r0, [r2, #0]
 80099a2:	e7da      	b.n	800995a <_free_r+0x22>
 80099a4:	d902      	bls.n	80099ac <_free_r+0x74>
 80099a6:	230c      	movs	r3, #12
 80099a8:	602b      	str	r3, [r5, #0]
 80099aa:	e7d6      	b.n	800995a <_free_r+0x22>
 80099ac:	6820      	ldr	r0, [r4, #0]
 80099ae:	1821      	adds	r1, r4, r0
 80099b0:	428b      	cmp	r3, r1
 80099b2:	bf04      	itt	eq
 80099b4:	6819      	ldreq	r1, [r3, #0]
 80099b6:	685b      	ldreq	r3, [r3, #4]
 80099b8:	6063      	str	r3, [r4, #4]
 80099ba:	bf04      	itt	eq
 80099bc:	1809      	addeq	r1, r1, r0
 80099be:	6021      	streq	r1, [r4, #0]
 80099c0:	6054      	str	r4, [r2, #4]
 80099c2:	e7ca      	b.n	800995a <_free_r+0x22>
 80099c4:	bd38      	pop	{r3, r4, r5, pc}
 80099c6:	bf00      	nop
 80099c8:	20000cf4 	.word	0x20000cf4

080099cc <__sfputc_r>:
 80099cc:	6893      	ldr	r3, [r2, #8]
 80099ce:	3b01      	subs	r3, #1
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	b410      	push	{r4}
 80099d4:	6093      	str	r3, [r2, #8]
 80099d6:	da08      	bge.n	80099ea <__sfputc_r+0x1e>
 80099d8:	6994      	ldr	r4, [r2, #24]
 80099da:	42a3      	cmp	r3, r4
 80099dc:	db01      	blt.n	80099e2 <__sfputc_r+0x16>
 80099de:	290a      	cmp	r1, #10
 80099e0:	d103      	bne.n	80099ea <__sfputc_r+0x1e>
 80099e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099e6:	f7ff be34 	b.w	8009652 <__swbuf_r>
 80099ea:	6813      	ldr	r3, [r2, #0]
 80099ec:	1c58      	adds	r0, r3, #1
 80099ee:	6010      	str	r0, [r2, #0]
 80099f0:	7019      	strb	r1, [r3, #0]
 80099f2:	4608      	mov	r0, r1
 80099f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099f8:	4770      	bx	lr

080099fa <__sfputs_r>:
 80099fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099fc:	4606      	mov	r6, r0
 80099fe:	460f      	mov	r7, r1
 8009a00:	4614      	mov	r4, r2
 8009a02:	18d5      	adds	r5, r2, r3
 8009a04:	42ac      	cmp	r4, r5
 8009a06:	d101      	bne.n	8009a0c <__sfputs_r+0x12>
 8009a08:	2000      	movs	r0, #0
 8009a0a:	e007      	b.n	8009a1c <__sfputs_r+0x22>
 8009a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a10:	463a      	mov	r2, r7
 8009a12:	4630      	mov	r0, r6
 8009a14:	f7ff ffda 	bl	80099cc <__sfputc_r>
 8009a18:	1c43      	adds	r3, r0, #1
 8009a1a:	d1f3      	bne.n	8009a04 <__sfputs_r+0xa>
 8009a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009a20 <_vfiprintf_r>:
 8009a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a24:	460d      	mov	r5, r1
 8009a26:	b09d      	sub	sp, #116	@ 0x74
 8009a28:	4614      	mov	r4, r2
 8009a2a:	4698      	mov	r8, r3
 8009a2c:	4606      	mov	r6, r0
 8009a2e:	b118      	cbz	r0, 8009a38 <_vfiprintf_r+0x18>
 8009a30:	6a03      	ldr	r3, [r0, #32]
 8009a32:	b90b      	cbnz	r3, 8009a38 <_vfiprintf_r+0x18>
 8009a34:	f7ff fd1c 	bl	8009470 <__sinit>
 8009a38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a3a:	07d9      	lsls	r1, r3, #31
 8009a3c:	d405      	bmi.n	8009a4a <_vfiprintf_r+0x2a>
 8009a3e:	89ab      	ldrh	r3, [r5, #12]
 8009a40:	059a      	lsls	r2, r3, #22
 8009a42:	d402      	bmi.n	8009a4a <_vfiprintf_r+0x2a>
 8009a44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a46:	f7ff ff66 	bl	8009916 <__retarget_lock_acquire_recursive>
 8009a4a:	89ab      	ldrh	r3, [r5, #12]
 8009a4c:	071b      	lsls	r3, r3, #28
 8009a4e:	d501      	bpl.n	8009a54 <_vfiprintf_r+0x34>
 8009a50:	692b      	ldr	r3, [r5, #16]
 8009a52:	b99b      	cbnz	r3, 8009a7c <_vfiprintf_r+0x5c>
 8009a54:	4629      	mov	r1, r5
 8009a56:	4630      	mov	r0, r6
 8009a58:	f7ff fe3a 	bl	80096d0 <__swsetup_r>
 8009a5c:	b170      	cbz	r0, 8009a7c <_vfiprintf_r+0x5c>
 8009a5e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a60:	07dc      	lsls	r4, r3, #31
 8009a62:	d504      	bpl.n	8009a6e <_vfiprintf_r+0x4e>
 8009a64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009a68:	b01d      	add	sp, #116	@ 0x74
 8009a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a6e:	89ab      	ldrh	r3, [r5, #12]
 8009a70:	0598      	lsls	r0, r3, #22
 8009a72:	d4f7      	bmi.n	8009a64 <_vfiprintf_r+0x44>
 8009a74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a76:	f7ff ff4f 	bl	8009918 <__retarget_lock_release_recursive>
 8009a7a:	e7f3      	b.n	8009a64 <_vfiprintf_r+0x44>
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a80:	2320      	movs	r3, #32
 8009a82:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a86:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a8a:	2330      	movs	r3, #48	@ 0x30
 8009a8c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009c3c <_vfiprintf_r+0x21c>
 8009a90:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009a94:	f04f 0901 	mov.w	r9, #1
 8009a98:	4623      	mov	r3, r4
 8009a9a:	469a      	mov	sl, r3
 8009a9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009aa0:	b10a      	cbz	r2, 8009aa6 <_vfiprintf_r+0x86>
 8009aa2:	2a25      	cmp	r2, #37	@ 0x25
 8009aa4:	d1f9      	bne.n	8009a9a <_vfiprintf_r+0x7a>
 8009aa6:	ebba 0b04 	subs.w	fp, sl, r4
 8009aaa:	d00b      	beq.n	8009ac4 <_vfiprintf_r+0xa4>
 8009aac:	465b      	mov	r3, fp
 8009aae:	4622      	mov	r2, r4
 8009ab0:	4629      	mov	r1, r5
 8009ab2:	4630      	mov	r0, r6
 8009ab4:	f7ff ffa1 	bl	80099fa <__sfputs_r>
 8009ab8:	3001      	adds	r0, #1
 8009aba:	f000 80a7 	beq.w	8009c0c <_vfiprintf_r+0x1ec>
 8009abe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ac0:	445a      	add	r2, fp
 8009ac2:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ac4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	f000 809f 	beq.w	8009c0c <_vfiprintf_r+0x1ec>
 8009ace:	2300      	movs	r3, #0
 8009ad0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009ad4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ad8:	f10a 0a01 	add.w	sl, sl, #1
 8009adc:	9304      	str	r3, [sp, #16]
 8009ade:	9307      	str	r3, [sp, #28]
 8009ae0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009ae4:	931a      	str	r3, [sp, #104]	@ 0x68
 8009ae6:	4654      	mov	r4, sl
 8009ae8:	2205      	movs	r2, #5
 8009aea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aee:	4853      	ldr	r0, [pc, #332]	@ (8009c3c <_vfiprintf_r+0x21c>)
 8009af0:	f7f6 fb96 	bl	8000220 <memchr>
 8009af4:	9a04      	ldr	r2, [sp, #16]
 8009af6:	b9d8      	cbnz	r0, 8009b30 <_vfiprintf_r+0x110>
 8009af8:	06d1      	lsls	r1, r2, #27
 8009afa:	bf44      	itt	mi
 8009afc:	2320      	movmi	r3, #32
 8009afe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b02:	0713      	lsls	r3, r2, #28
 8009b04:	bf44      	itt	mi
 8009b06:	232b      	movmi	r3, #43	@ 0x2b
 8009b08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b0c:	f89a 3000 	ldrb.w	r3, [sl]
 8009b10:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b12:	d015      	beq.n	8009b40 <_vfiprintf_r+0x120>
 8009b14:	9a07      	ldr	r2, [sp, #28]
 8009b16:	4654      	mov	r4, sl
 8009b18:	2000      	movs	r0, #0
 8009b1a:	f04f 0c0a 	mov.w	ip, #10
 8009b1e:	4621      	mov	r1, r4
 8009b20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b24:	3b30      	subs	r3, #48	@ 0x30
 8009b26:	2b09      	cmp	r3, #9
 8009b28:	d94b      	bls.n	8009bc2 <_vfiprintf_r+0x1a2>
 8009b2a:	b1b0      	cbz	r0, 8009b5a <_vfiprintf_r+0x13a>
 8009b2c:	9207      	str	r2, [sp, #28]
 8009b2e:	e014      	b.n	8009b5a <_vfiprintf_r+0x13a>
 8009b30:	eba0 0308 	sub.w	r3, r0, r8
 8009b34:	fa09 f303 	lsl.w	r3, r9, r3
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	9304      	str	r3, [sp, #16]
 8009b3c:	46a2      	mov	sl, r4
 8009b3e:	e7d2      	b.n	8009ae6 <_vfiprintf_r+0xc6>
 8009b40:	9b03      	ldr	r3, [sp, #12]
 8009b42:	1d19      	adds	r1, r3, #4
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	9103      	str	r1, [sp, #12]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	bfbb      	ittet	lt
 8009b4c:	425b      	neglt	r3, r3
 8009b4e:	f042 0202 	orrlt.w	r2, r2, #2
 8009b52:	9307      	strge	r3, [sp, #28]
 8009b54:	9307      	strlt	r3, [sp, #28]
 8009b56:	bfb8      	it	lt
 8009b58:	9204      	strlt	r2, [sp, #16]
 8009b5a:	7823      	ldrb	r3, [r4, #0]
 8009b5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b5e:	d10a      	bne.n	8009b76 <_vfiprintf_r+0x156>
 8009b60:	7863      	ldrb	r3, [r4, #1]
 8009b62:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b64:	d132      	bne.n	8009bcc <_vfiprintf_r+0x1ac>
 8009b66:	9b03      	ldr	r3, [sp, #12]
 8009b68:	1d1a      	adds	r2, r3, #4
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	9203      	str	r2, [sp, #12]
 8009b6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b72:	3402      	adds	r4, #2
 8009b74:	9305      	str	r3, [sp, #20]
 8009b76:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009c4c <_vfiprintf_r+0x22c>
 8009b7a:	7821      	ldrb	r1, [r4, #0]
 8009b7c:	2203      	movs	r2, #3
 8009b7e:	4650      	mov	r0, sl
 8009b80:	f7f6 fb4e 	bl	8000220 <memchr>
 8009b84:	b138      	cbz	r0, 8009b96 <_vfiprintf_r+0x176>
 8009b86:	9b04      	ldr	r3, [sp, #16]
 8009b88:	eba0 000a 	sub.w	r0, r0, sl
 8009b8c:	2240      	movs	r2, #64	@ 0x40
 8009b8e:	4082      	lsls	r2, r0
 8009b90:	4313      	orrs	r3, r2
 8009b92:	3401      	adds	r4, #1
 8009b94:	9304      	str	r3, [sp, #16]
 8009b96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b9a:	4829      	ldr	r0, [pc, #164]	@ (8009c40 <_vfiprintf_r+0x220>)
 8009b9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ba0:	2206      	movs	r2, #6
 8009ba2:	f7f6 fb3d 	bl	8000220 <memchr>
 8009ba6:	2800      	cmp	r0, #0
 8009ba8:	d03f      	beq.n	8009c2a <_vfiprintf_r+0x20a>
 8009baa:	4b26      	ldr	r3, [pc, #152]	@ (8009c44 <_vfiprintf_r+0x224>)
 8009bac:	bb1b      	cbnz	r3, 8009bf6 <_vfiprintf_r+0x1d6>
 8009bae:	9b03      	ldr	r3, [sp, #12]
 8009bb0:	3307      	adds	r3, #7
 8009bb2:	f023 0307 	bic.w	r3, r3, #7
 8009bb6:	3308      	adds	r3, #8
 8009bb8:	9303      	str	r3, [sp, #12]
 8009bba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bbc:	443b      	add	r3, r7
 8009bbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bc0:	e76a      	b.n	8009a98 <_vfiprintf_r+0x78>
 8009bc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bc6:	460c      	mov	r4, r1
 8009bc8:	2001      	movs	r0, #1
 8009bca:	e7a8      	b.n	8009b1e <_vfiprintf_r+0xfe>
 8009bcc:	2300      	movs	r3, #0
 8009bce:	3401      	adds	r4, #1
 8009bd0:	9305      	str	r3, [sp, #20]
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	f04f 0c0a 	mov.w	ip, #10
 8009bd8:	4620      	mov	r0, r4
 8009bda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bde:	3a30      	subs	r2, #48	@ 0x30
 8009be0:	2a09      	cmp	r2, #9
 8009be2:	d903      	bls.n	8009bec <_vfiprintf_r+0x1cc>
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d0c6      	beq.n	8009b76 <_vfiprintf_r+0x156>
 8009be8:	9105      	str	r1, [sp, #20]
 8009bea:	e7c4      	b.n	8009b76 <_vfiprintf_r+0x156>
 8009bec:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bf0:	4604      	mov	r4, r0
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	e7f0      	b.n	8009bd8 <_vfiprintf_r+0x1b8>
 8009bf6:	ab03      	add	r3, sp, #12
 8009bf8:	9300      	str	r3, [sp, #0]
 8009bfa:	462a      	mov	r2, r5
 8009bfc:	4b12      	ldr	r3, [pc, #72]	@ (8009c48 <_vfiprintf_r+0x228>)
 8009bfe:	a904      	add	r1, sp, #16
 8009c00:	4630      	mov	r0, r6
 8009c02:	f3af 8000 	nop.w
 8009c06:	4607      	mov	r7, r0
 8009c08:	1c78      	adds	r0, r7, #1
 8009c0a:	d1d6      	bne.n	8009bba <_vfiprintf_r+0x19a>
 8009c0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c0e:	07d9      	lsls	r1, r3, #31
 8009c10:	d405      	bmi.n	8009c1e <_vfiprintf_r+0x1fe>
 8009c12:	89ab      	ldrh	r3, [r5, #12]
 8009c14:	059a      	lsls	r2, r3, #22
 8009c16:	d402      	bmi.n	8009c1e <_vfiprintf_r+0x1fe>
 8009c18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c1a:	f7ff fe7d 	bl	8009918 <__retarget_lock_release_recursive>
 8009c1e:	89ab      	ldrh	r3, [r5, #12]
 8009c20:	065b      	lsls	r3, r3, #25
 8009c22:	f53f af1f 	bmi.w	8009a64 <_vfiprintf_r+0x44>
 8009c26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c28:	e71e      	b.n	8009a68 <_vfiprintf_r+0x48>
 8009c2a:	ab03      	add	r3, sp, #12
 8009c2c:	9300      	str	r3, [sp, #0]
 8009c2e:	462a      	mov	r2, r5
 8009c30:	4b05      	ldr	r3, [pc, #20]	@ (8009c48 <_vfiprintf_r+0x228>)
 8009c32:	a904      	add	r1, sp, #16
 8009c34:	4630      	mov	r0, r6
 8009c36:	f000 f879 	bl	8009d2c <_printf_i>
 8009c3a:	e7e4      	b.n	8009c06 <_vfiprintf_r+0x1e6>
 8009c3c:	0800a527 	.word	0x0800a527
 8009c40:	0800a531 	.word	0x0800a531
 8009c44:	00000000 	.word	0x00000000
 8009c48:	080099fb 	.word	0x080099fb
 8009c4c:	0800a52d 	.word	0x0800a52d

08009c50 <_printf_common>:
 8009c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c54:	4616      	mov	r6, r2
 8009c56:	4698      	mov	r8, r3
 8009c58:	688a      	ldr	r2, [r1, #8]
 8009c5a:	690b      	ldr	r3, [r1, #16]
 8009c5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009c60:	4293      	cmp	r3, r2
 8009c62:	bfb8      	it	lt
 8009c64:	4613      	movlt	r3, r2
 8009c66:	6033      	str	r3, [r6, #0]
 8009c68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009c6c:	4607      	mov	r7, r0
 8009c6e:	460c      	mov	r4, r1
 8009c70:	b10a      	cbz	r2, 8009c76 <_printf_common+0x26>
 8009c72:	3301      	adds	r3, #1
 8009c74:	6033      	str	r3, [r6, #0]
 8009c76:	6823      	ldr	r3, [r4, #0]
 8009c78:	0699      	lsls	r1, r3, #26
 8009c7a:	bf42      	ittt	mi
 8009c7c:	6833      	ldrmi	r3, [r6, #0]
 8009c7e:	3302      	addmi	r3, #2
 8009c80:	6033      	strmi	r3, [r6, #0]
 8009c82:	6825      	ldr	r5, [r4, #0]
 8009c84:	f015 0506 	ands.w	r5, r5, #6
 8009c88:	d106      	bne.n	8009c98 <_printf_common+0x48>
 8009c8a:	f104 0a19 	add.w	sl, r4, #25
 8009c8e:	68e3      	ldr	r3, [r4, #12]
 8009c90:	6832      	ldr	r2, [r6, #0]
 8009c92:	1a9b      	subs	r3, r3, r2
 8009c94:	42ab      	cmp	r3, r5
 8009c96:	dc26      	bgt.n	8009ce6 <_printf_common+0x96>
 8009c98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009c9c:	6822      	ldr	r2, [r4, #0]
 8009c9e:	3b00      	subs	r3, #0
 8009ca0:	bf18      	it	ne
 8009ca2:	2301      	movne	r3, #1
 8009ca4:	0692      	lsls	r2, r2, #26
 8009ca6:	d42b      	bmi.n	8009d00 <_printf_common+0xb0>
 8009ca8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009cac:	4641      	mov	r1, r8
 8009cae:	4638      	mov	r0, r7
 8009cb0:	47c8      	blx	r9
 8009cb2:	3001      	adds	r0, #1
 8009cb4:	d01e      	beq.n	8009cf4 <_printf_common+0xa4>
 8009cb6:	6823      	ldr	r3, [r4, #0]
 8009cb8:	6922      	ldr	r2, [r4, #16]
 8009cba:	f003 0306 	and.w	r3, r3, #6
 8009cbe:	2b04      	cmp	r3, #4
 8009cc0:	bf02      	ittt	eq
 8009cc2:	68e5      	ldreq	r5, [r4, #12]
 8009cc4:	6833      	ldreq	r3, [r6, #0]
 8009cc6:	1aed      	subeq	r5, r5, r3
 8009cc8:	68a3      	ldr	r3, [r4, #8]
 8009cca:	bf0c      	ite	eq
 8009ccc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009cd0:	2500      	movne	r5, #0
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	bfc4      	itt	gt
 8009cd6:	1a9b      	subgt	r3, r3, r2
 8009cd8:	18ed      	addgt	r5, r5, r3
 8009cda:	2600      	movs	r6, #0
 8009cdc:	341a      	adds	r4, #26
 8009cde:	42b5      	cmp	r5, r6
 8009ce0:	d11a      	bne.n	8009d18 <_printf_common+0xc8>
 8009ce2:	2000      	movs	r0, #0
 8009ce4:	e008      	b.n	8009cf8 <_printf_common+0xa8>
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	4652      	mov	r2, sl
 8009cea:	4641      	mov	r1, r8
 8009cec:	4638      	mov	r0, r7
 8009cee:	47c8      	blx	r9
 8009cf0:	3001      	adds	r0, #1
 8009cf2:	d103      	bne.n	8009cfc <_printf_common+0xac>
 8009cf4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cfc:	3501      	adds	r5, #1
 8009cfe:	e7c6      	b.n	8009c8e <_printf_common+0x3e>
 8009d00:	18e1      	adds	r1, r4, r3
 8009d02:	1c5a      	adds	r2, r3, #1
 8009d04:	2030      	movs	r0, #48	@ 0x30
 8009d06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009d0a:	4422      	add	r2, r4
 8009d0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009d10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009d14:	3302      	adds	r3, #2
 8009d16:	e7c7      	b.n	8009ca8 <_printf_common+0x58>
 8009d18:	2301      	movs	r3, #1
 8009d1a:	4622      	mov	r2, r4
 8009d1c:	4641      	mov	r1, r8
 8009d1e:	4638      	mov	r0, r7
 8009d20:	47c8      	blx	r9
 8009d22:	3001      	adds	r0, #1
 8009d24:	d0e6      	beq.n	8009cf4 <_printf_common+0xa4>
 8009d26:	3601      	adds	r6, #1
 8009d28:	e7d9      	b.n	8009cde <_printf_common+0x8e>
	...

08009d2c <_printf_i>:
 8009d2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d30:	7e0f      	ldrb	r7, [r1, #24]
 8009d32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009d34:	2f78      	cmp	r7, #120	@ 0x78
 8009d36:	4691      	mov	r9, r2
 8009d38:	4680      	mov	r8, r0
 8009d3a:	460c      	mov	r4, r1
 8009d3c:	469a      	mov	sl, r3
 8009d3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009d42:	d807      	bhi.n	8009d54 <_printf_i+0x28>
 8009d44:	2f62      	cmp	r7, #98	@ 0x62
 8009d46:	d80a      	bhi.n	8009d5e <_printf_i+0x32>
 8009d48:	2f00      	cmp	r7, #0
 8009d4a:	f000 80d2 	beq.w	8009ef2 <_printf_i+0x1c6>
 8009d4e:	2f58      	cmp	r7, #88	@ 0x58
 8009d50:	f000 80b9 	beq.w	8009ec6 <_printf_i+0x19a>
 8009d54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009d58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009d5c:	e03a      	b.n	8009dd4 <_printf_i+0xa8>
 8009d5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009d62:	2b15      	cmp	r3, #21
 8009d64:	d8f6      	bhi.n	8009d54 <_printf_i+0x28>
 8009d66:	a101      	add	r1, pc, #4	@ (adr r1, 8009d6c <_printf_i+0x40>)
 8009d68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d6c:	08009dc5 	.word	0x08009dc5
 8009d70:	08009dd9 	.word	0x08009dd9
 8009d74:	08009d55 	.word	0x08009d55
 8009d78:	08009d55 	.word	0x08009d55
 8009d7c:	08009d55 	.word	0x08009d55
 8009d80:	08009d55 	.word	0x08009d55
 8009d84:	08009dd9 	.word	0x08009dd9
 8009d88:	08009d55 	.word	0x08009d55
 8009d8c:	08009d55 	.word	0x08009d55
 8009d90:	08009d55 	.word	0x08009d55
 8009d94:	08009d55 	.word	0x08009d55
 8009d98:	08009ed9 	.word	0x08009ed9
 8009d9c:	08009e03 	.word	0x08009e03
 8009da0:	08009e93 	.word	0x08009e93
 8009da4:	08009d55 	.word	0x08009d55
 8009da8:	08009d55 	.word	0x08009d55
 8009dac:	08009efb 	.word	0x08009efb
 8009db0:	08009d55 	.word	0x08009d55
 8009db4:	08009e03 	.word	0x08009e03
 8009db8:	08009d55 	.word	0x08009d55
 8009dbc:	08009d55 	.word	0x08009d55
 8009dc0:	08009e9b 	.word	0x08009e9b
 8009dc4:	6833      	ldr	r3, [r6, #0]
 8009dc6:	1d1a      	adds	r2, r3, #4
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	6032      	str	r2, [r6, #0]
 8009dcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009dd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	e09d      	b.n	8009f14 <_printf_i+0x1e8>
 8009dd8:	6833      	ldr	r3, [r6, #0]
 8009dda:	6820      	ldr	r0, [r4, #0]
 8009ddc:	1d19      	adds	r1, r3, #4
 8009dde:	6031      	str	r1, [r6, #0]
 8009de0:	0606      	lsls	r6, r0, #24
 8009de2:	d501      	bpl.n	8009de8 <_printf_i+0xbc>
 8009de4:	681d      	ldr	r5, [r3, #0]
 8009de6:	e003      	b.n	8009df0 <_printf_i+0xc4>
 8009de8:	0645      	lsls	r5, r0, #25
 8009dea:	d5fb      	bpl.n	8009de4 <_printf_i+0xb8>
 8009dec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009df0:	2d00      	cmp	r5, #0
 8009df2:	da03      	bge.n	8009dfc <_printf_i+0xd0>
 8009df4:	232d      	movs	r3, #45	@ 0x2d
 8009df6:	426d      	negs	r5, r5
 8009df8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009dfc:	4859      	ldr	r0, [pc, #356]	@ (8009f64 <_printf_i+0x238>)
 8009dfe:	230a      	movs	r3, #10
 8009e00:	e011      	b.n	8009e26 <_printf_i+0xfa>
 8009e02:	6821      	ldr	r1, [r4, #0]
 8009e04:	6833      	ldr	r3, [r6, #0]
 8009e06:	0608      	lsls	r0, r1, #24
 8009e08:	f853 5b04 	ldr.w	r5, [r3], #4
 8009e0c:	d402      	bmi.n	8009e14 <_printf_i+0xe8>
 8009e0e:	0649      	lsls	r1, r1, #25
 8009e10:	bf48      	it	mi
 8009e12:	b2ad      	uxthmi	r5, r5
 8009e14:	2f6f      	cmp	r7, #111	@ 0x6f
 8009e16:	4853      	ldr	r0, [pc, #332]	@ (8009f64 <_printf_i+0x238>)
 8009e18:	6033      	str	r3, [r6, #0]
 8009e1a:	bf14      	ite	ne
 8009e1c:	230a      	movne	r3, #10
 8009e1e:	2308      	moveq	r3, #8
 8009e20:	2100      	movs	r1, #0
 8009e22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009e26:	6866      	ldr	r6, [r4, #4]
 8009e28:	60a6      	str	r6, [r4, #8]
 8009e2a:	2e00      	cmp	r6, #0
 8009e2c:	bfa2      	ittt	ge
 8009e2e:	6821      	ldrge	r1, [r4, #0]
 8009e30:	f021 0104 	bicge.w	r1, r1, #4
 8009e34:	6021      	strge	r1, [r4, #0]
 8009e36:	b90d      	cbnz	r5, 8009e3c <_printf_i+0x110>
 8009e38:	2e00      	cmp	r6, #0
 8009e3a:	d04b      	beq.n	8009ed4 <_printf_i+0x1a8>
 8009e3c:	4616      	mov	r6, r2
 8009e3e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009e42:	fb03 5711 	mls	r7, r3, r1, r5
 8009e46:	5dc7      	ldrb	r7, [r0, r7]
 8009e48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009e4c:	462f      	mov	r7, r5
 8009e4e:	42bb      	cmp	r3, r7
 8009e50:	460d      	mov	r5, r1
 8009e52:	d9f4      	bls.n	8009e3e <_printf_i+0x112>
 8009e54:	2b08      	cmp	r3, #8
 8009e56:	d10b      	bne.n	8009e70 <_printf_i+0x144>
 8009e58:	6823      	ldr	r3, [r4, #0]
 8009e5a:	07df      	lsls	r7, r3, #31
 8009e5c:	d508      	bpl.n	8009e70 <_printf_i+0x144>
 8009e5e:	6923      	ldr	r3, [r4, #16]
 8009e60:	6861      	ldr	r1, [r4, #4]
 8009e62:	4299      	cmp	r1, r3
 8009e64:	bfde      	ittt	le
 8009e66:	2330      	movle	r3, #48	@ 0x30
 8009e68:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009e6c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009e70:	1b92      	subs	r2, r2, r6
 8009e72:	6122      	str	r2, [r4, #16]
 8009e74:	f8cd a000 	str.w	sl, [sp]
 8009e78:	464b      	mov	r3, r9
 8009e7a:	aa03      	add	r2, sp, #12
 8009e7c:	4621      	mov	r1, r4
 8009e7e:	4640      	mov	r0, r8
 8009e80:	f7ff fee6 	bl	8009c50 <_printf_common>
 8009e84:	3001      	adds	r0, #1
 8009e86:	d14a      	bne.n	8009f1e <_printf_i+0x1f2>
 8009e88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009e8c:	b004      	add	sp, #16
 8009e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e92:	6823      	ldr	r3, [r4, #0]
 8009e94:	f043 0320 	orr.w	r3, r3, #32
 8009e98:	6023      	str	r3, [r4, #0]
 8009e9a:	4833      	ldr	r0, [pc, #204]	@ (8009f68 <_printf_i+0x23c>)
 8009e9c:	2778      	movs	r7, #120	@ 0x78
 8009e9e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009ea2:	6823      	ldr	r3, [r4, #0]
 8009ea4:	6831      	ldr	r1, [r6, #0]
 8009ea6:	061f      	lsls	r7, r3, #24
 8009ea8:	f851 5b04 	ldr.w	r5, [r1], #4
 8009eac:	d402      	bmi.n	8009eb4 <_printf_i+0x188>
 8009eae:	065f      	lsls	r7, r3, #25
 8009eb0:	bf48      	it	mi
 8009eb2:	b2ad      	uxthmi	r5, r5
 8009eb4:	6031      	str	r1, [r6, #0]
 8009eb6:	07d9      	lsls	r1, r3, #31
 8009eb8:	bf44      	itt	mi
 8009eba:	f043 0320 	orrmi.w	r3, r3, #32
 8009ebe:	6023      	strmi	r3, [r4, #0]
 8009ec0:	b11d      	cbz	r5, 8009eca <_printf_i+0x19e>
 8009ec2:	2310      	movs	r3, #16
 8009ec4:	e7ac      	b.n	8009e20 <_printf_i+0xf4>
 8009ec6:	4827      	ldr	r0, [pc, #156]	@ (8009f64 <_printf_i+0x238>)
 8009ec8:	e7e9      	b.n	8009e9e <_printf_i+0x172>
 8009eca:	6823      	ldr	r3, [r4, #0]
 8009ecc:	f023 0320 	bic.w	r3, r3, #32
 8009ed0:	6023      	str	r3, [r4, #0]
 8009ed2:	e7f6      	b.n	8009ec2 <_printf_i+0x196>
 8009ed4:	4616      	mov	r6, r2
 8009ed6:	e7bd      	b.n	8009e54 <_printf_i+0x128>
 8009ed8:	6833      	ldr	r3, [r6, #0]
 8009eda:	6825      	ldr	r5, [r4, #0]
 8009edc:	6961      	ldr	r1, [r4, #20]
 8009ede:	1d18      	adds	r0, r3, #4
 8009ee0:	6030      	str	r0, [r6, #0]
 8009ee2:	062e      	lsls	r6, r5, #24
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	d501      	bpl.n	8009eec <_printf_i+0x1c0>
 8009ee8:	6019      	str	r1, [r3, #0]
 8009eea:	e002      	b.n	8009ef2 <_printf_i+0x1c6>
 8009eec:	0668      	lsls	r0, r5, #25
 8009eee:	d5fb      	bpl.n	8009ee8 <_printf_i+0x1bc>
 8009ef0:	8019      	strh	r1, [r3, #0]
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	6123      	str	r3, [r4, #16]
 8009ef6:	4616      	mov	r6, r2
 8009ef8:	e7bc      	b.n	8009e74 <_printf_i+0x148>
 8009efa:	6833      	ldr	r3, [r6, #0]
 8009efc:	1d1a      	adds	r2, r3, #4
 8009efe:	6032      	str	r2, [r6, #0]
 8009f00:	681e      	ldr	r6, [r3, #0]
 8009f02:	6862      	ldr	r2, [r4, #4]
 8009f04:	2100      	movs	r1, #0
 8009f06:	4630      	mov	r0, r6
 8009f08:	f7f6 f98a 	bl	8000220 <memchr>
 8009f0c:	b108      	cbz	r0, 8009f12 <_printf_i+0x1e6>
 8009f0e:	1b80      	subs	r0, r0, r6
 8009f10:	6060      	str	r0, [r4, #4]
 8009f12:	6863      	ldr	r3, [r4, #4]
 8009f14:	6123      	str	r3, [r4, #16]
 8009f16:	2300      	movs	r3, #0
 8009f18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f1c:	e7aa      	b.n	8009e74 <_printf_i+0x148>
 8009f1e:	6923      	ldr	r3, [r4, #16]
 8009f20:	4632      	mov	r2, r6
 8009f22:	4649      	mov	r1, r9
 8009f24:	4640      	mov	r0, r8
 8009f26:	47d0      	blx	sl
 8009f28:	3001      	adds	r0, #1
 8009f2a:	d0ad      	beq.n	8009e88 <_printf_i+0x15c>
 8009f2c:	6823      	ldr	r3, [r4, #0]
 8009f2e:	079b      	lsls	r3, r3, #30
 8009f30:	d413      	bmi.n	8009f5a <_printf_i+0x22e>
 8009f32:	68e0      	ldr	r0, [r4, #12]
 8009f34:	9b03      	ldr	r3, [sp, #12]
 8009f36:	4298      	cmp	r0, r3
 8009f38:	bfb8      	it	lt
 8009f3a:	4618      	movlt	r0, r3
 8009f3c:	e7a6      	b.n	8009e8c <_printf_i+0x160>
 8009f3e:	2301      	movs	r3, #1
 8009f40:	4632      	mov	r2, r6
 8009f42:	4649      	mov	r1, r9
 8009f44:	4640      	mov	r0, r8
 8009f46:	47d0      	blx	sl
 8009f48:	3001      	adds	r0, #1
 8009f4a:	d09d      	beq.n	8009e88 <_printf_i+0x15c>
 8009f4c:	3501      	adds	r5, #1
 8009f4e:	68e3      	ldr	r3, [r4, #12]
 8009f50:	9903      	ldr	r1, [sp, #12]
 8009f52:	1a5b      	subs	r3, r3, r1
 8009f54:	42ab      	cmp	r3, r5
 8009f56:	dcf2      	bgt.n	8009f3e <_printf_i+0x212>
 8009f58:	e7eb      	b.n	8009f32 <_printf_i+0x206>
 8009f5a:	2500      	movs	r5, #0
 8009f5c:	f104 0619 	add.w	r6, r4, #25
 8009f60:	e7f5      	b.n	8009f4e <_printf_i+0x222>
 8009f62:	bf00      	nop
 8009f64:	0800a538 	.word	0x0800a538
 8009f68:	0800a549 	.word	0x0800a549

08009f6c <__sflush_r>:
 8009f6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f74:	0716      	lsls	r6, r2, #28
 8009f76:	4605      	mov	r5, r0
 8009f78:	460c      	mov	r4, r1
 8009f7a:	d454      	bmi.n	800a026 <__sflush_r+0xba>
 8009f7c:	684b      	ldr	r3, [r1, #4]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	dc02      	bgt.n	8009f88 <__sflush_r+0x1c>
 8009f82:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	dd48      	ble.n	800a01a <__sflush_r+0xae>
 8009f88:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009f8a:	2e00      	cmp	r6, #0
 8009f8c:	d045      	beq.n	800a01a <__sflush_r+0xae>
 8009f8e:	2300      	movs	r3, #0
 8009f90:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009f94:	682f      	ldr	r7, [r5, #0]
 8009f96:	6a21      	ldr	r1, [r4, #32]
 8009f98:	602b      	str	r3, [r5, #0]
 8009f9a:	d030      	beq.n	8009ffe <__sflush_r+0x92>
 8009f9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009f9e:	89a3      	ldrh	r3, [r4, #12]
 8009fa0:	0759      	lsls	r1, r3, #29
 8009fa2:	d505      	bpl.n	8009fb0 <__sflush_r+0x44>
 8009fa4:	6863      	ldr	r3, [r4, #4]
 8009fa6:	1ad2      	subs	r2, r2, r3
 8009fa8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009faa:	b10b      	cbz	r3, 8009fb0 <__sflush_r+0x44>
 8009fac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009fae:	1ad2      	subs	r2, r2, r3
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009fb4:	6a21      	ldr	r1, [r4, #32]
 8009fb6:	4628      	mov	r0, r5
 8009fb8:	47b0      	blx	r6
 8009fba:	1c43      	adds	r3, r0, #1
 8009fbc:	89a3      	ldrh	r3, [r4, #12]
 8009fbe:	d106      	bne.n	8009fce <__sflush_r+0x62>
 8009fc0:	6829      	ldr	r1, [r5, #0]
 8009fc2:	291d      	cmp	r1, #29
 8009fc4:	d82b      	bhi.n	800a01e <__sflush_r+0xb2>
 8009fc6:	4a2a      	ldr	r2, [pc, #168]	@ (800a070 <__sflush_r+0x104>)
 8009fc8:	410a      	asrs	r2, r1
 8009fca:	07d6      	lsls	r6, r2, #31
 8009fcc:	d427      	bmi.n	800a01e <__sflush_r+0xb2>
 8009fce:	2200      	movs	r2, #0
 8009fd0:	6062      	str	r2, [r4, #4]
 8009fd2:	04d9      	lsls	r1, r3, #19
 8009fd4:	6922      	ldr	r2, [r4, #16]
 8009fd6:	6022      	str	r2, [r4, #0]
 8009fd8:	d504      	bpl.n	8009fe4 <__sflush_r+0x78>
 8009fda:	1c42      	adds	r2, r0, #1
 8009fdc:	d101      	bne.n	8009fe2 <__sflush_r+0x76>
 8009fde:	682b      	ldr	r3, [r5, #0]
 8009fe0:	b903      	cbnz	r3, 8009fe4 <__sflush_r+0x78>
 8009fe2:	6560      	str	r0, [r4, #84]	@ 0x54
 8009fe4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009fe6:	602f      	str	r7, [r5, #0]
 8009fe8:	b1b9      	cbz	r1, 800a01a <__sflush_r+0xae>
 8009fea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009fee:	4299      	cmp	r1, r3
 8009ff0:	d002      	beq.n	8009ff8 <__sflush_r+0x8c>
 8009ff2:	4628      	mov	r0, r5
 8009ff4:	f7ff fca0 	bl	8009938 <_free_r>
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	6363      	str	r3, [r4, #52]	@ 0x34
 8009ffc:	e00d      	b.n	800a01a <__sflush_r+0xae>
 8009ffe:	2301      	movs	r3, #1
 800a000:	4628      	mov	r0, r5
 800a002:	47b0      	blx	r6
 800a004:	4602      	mov	r2, r0
 800a006:	1c50      	adds	r0, r2, #1
 800a008:	d1c9      	bne.n	8009f9e <__sflush_r+0x32>
 800a00a:	682b      	ldr	r3, [r5, #0]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d0c6      	beq.n	8009f9e <__sflush_r+0x32>
 800a010:	2b1d      	cmp	r3, #29
 800a012:	d001      	beq.n	800a018 <__sflush_r+0xac>
 800a014:	2b16      	cmp	r3, #22
 800a016:	d11e      	bne.n	800a056 <__sflush_r+0xea>
 800a018:	602f      	str	r7, [r5, #0]
 800a01a:	2000      	movs	r0, #0
 800a01c:	e022      	b.n	800a064 <__sflush_r+0xf8>
 800a01e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a022:	b21b      	sxth	r3, r3
 800a024:	e01b      	b.n	800a05e <__sflush_r+0xf2>
 800a026:	690f      	ldr	r7, [r1, #16]
 800a028:	2f00      	cmp	r7, #0
 800a02a:	d0f6      	beq.n	800a01a <__sflush_r+0xae>
 800a02c:	0793      	lsls	r3, r2, #30
 800a02e:	680e      	ldr	r6, [r1, #0]
 800a030:	bf08      	it	eq
 800a032:	694b      	ldreq	r3, [r1, #20]
 800a034:	600f      	str	r7, [r1, #0]
 800a036:	bf18      	it	ne
 800a038:	2300      	movne	r3, #0
 800a03a:	eba6 0807 	sub.w	r8, r6, r7
 800a03e:	608b      	str	r3, [r1, #8]
 800a040:	f1b8 0f00 	cmp.w	r8, #0
 800a044:	dde9      	ble.n	800a01a <__sflush_r+0xae>
 800a046:	6a21      	ldr	r1, [r4, #32]
 800a048:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a04a:	4643      	mov	r3, r8
 800a04c:	463a      	mov	r2, r7
 800a04e:	4628      	mov	r0, r5
 800a050:	47b0      	blx	r6
 800a052:	2800      	cmp	r0, #0
 800a054:	dc08      	bgt.n	800a068 <__sflush_r+0xfc>
 800a056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a05a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a05e:	81a3      	strh	r3, [r4, #12]
 800a060:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a068:	4407      	add	r7, r0
 800a06a:	eba8 0800 	sub.w	r8, r8, r0
 800a06e:	e7e7      	b.n	800a040 <__sflush_r+0xd4>
 800a070:	dfbffffe 	.word	0xdfbffffe

0800a074 <_fflush_r>:
 800a074:	b538      	push	{r3, r4, r5, lr}
 800a076:	690b      	ldr	r3, [r1, #16]
 800a078:	4605      	mov	r5, r0
 800a07a:	460c      	mov	r4, r1
 800a07c:	b913      	cbnz	r3, 800a084 <_fflush_r+0x10>
 800a07e:	2500      	movs	r5, #0
 800a080:	4628      	mov	r0, r5
 800a082:	bd38      	pop	{r3, r4, r5, pc}
 800a084:	b118      	cbz	r0, 800a08e <_fflush_r+0x1a>
 800a086:	6a03      	ldr	r3, [r0, #32]
 800a088:	b90b      	cbnz	r3, 800a08e <_fflush_r+0x1a>
 800a08a:	f7ff f9f1 	bl	8009470 <__sinit>
 800a08e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d0f3      	beq.n	800a07e <_fflush_r+0xa>
 800a096:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a098:	07d0      	lsls	r0, r2, #31
 800a09a:	d404      	bmi.n	800a0a6 <_fflush_r+0x32>
 800a09c:	0599      	lsls	r1, r3, #22
 800a09e:	d402      	bmi.n	800a0a6 <_fflush_r+0x32>
 800a0a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a0a2:	f7ff fc38 	bl	8009916 <__retarget_lock_acquire_recursive>
 800a0a6:	4628      	mov	r0, r5
 800a0a8:	4621      	mov	r1, r4
 800a0aa:	f7ff ff5f 	bl	8009f6c <__sflush_r>
 800a0ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a0b0:	07da      	lsls	r2, r3, #31
 800a0b2:	4605      	mov	r5, r0
 800a0b4:	d4e4      	bmi.n	800a080 <_fflush_r+0xc>
 800a0b6:	89a3      	ldrh	r3, [r4, #12]
 800a0b8:	059b      	lsls	r3, r3, #22
 800a0ba:	d4e1      	bmi.n	800a080 <_fflush_r+0xc>
 800a0bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a0be:	f7ff fc2b 	bl	8009918 <__retarget_lock_release_recursive>
 800a0c2:	e7dd      	b.n	800a080 <_fflush_r+0xc>

0800a0c4 <__swhatbuf_r>:
 800a0c4:	b570      	push	{r4, r5, r6, lr}
 800a0c6:	460c      	mov	r4, r1
 800a0c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0cc:	2900      	cmp	r1, #0
 800a0ce:	b096      	sub	sp, #88	@ 0x58
 800a0d0:	4615      	mov	r5, r2
 800a0d2:	461e      	mov	r6, r3
 800a0d4:	da0d      	bge.n	800a0f2 <__swhatbuf_r+0x2e>
 800a0d6:	89a3      	ldrh	r3, [r4, #12]
 800a0d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a0dc:	f04f 0100 	mov.w	r1, #0
 800a0e0:	bf14      	ite	ne
 800a0e2:	2340      	movne	r3, #64	@ 0x40
 800a0e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a0e8:	2000      	movs	r0, #0
 800a0ea:	6031      	str	r1, [r6, #0]
 800a0ec:	602b      	str	r3, [r5, #0]
 800a0ee:	b016      	add	sp, #88	@ 0x58
 800a0f0:	bd70      	pop	{r4, r5, r6, pc}
 800a0f2:	466a      	mov	r2, sp
 800a0f4:	f000 f87c 	bl	800a1f0 <_fstat_r>
 800a0f8:	2800      	cmp	r0, #0
 800a0fa:	dbec      	blt.n	800a0d6 <__swhatbuf_r+0x12>
 800a0fc:	9901      	ldr	r1, [sp, #4]
 800a0fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a102:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a106:	4259      	negs	r1, r3
 800a108:	4159      	adcs	r1, r3
 800a10a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a10e:	e7eb      	b.n	800a0e8 <__swhatbuf_r+0x24>

0800a110 <__smakebuf_r>:
 800a110:	898b      	ldrh	r3, [r1, #12]
 800a112:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a114:	079d      	lsls	r5, r3, #30
 800a116:	4606      	mov	r6, r0
 800a118:	460c      	mov	r4, r1
 800a11a:	d507      	bpl.n	800a12c <__smakebuf_r+0x1c>
 800a11c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a120:	6023      	str	r3, [r4, #0]
 800a122:	6123      	str	r3, [r4, #16]
 800a124:	2301      	movs	r3, #1
 800a126:	6163      	str	r3, [r4, #20]
 800a128:	b003      	add	sp, #12
 800a12a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a12c:	ab01      	add	r3, sp, #4
 800a12e:	466a      	mov	r2, sp
 800a130:	f7ff ffc8 	bl	800a0c4 <__swhatbuf_r>
 800a134:	9f00      	ldr	r7, [sp, #0]
 800a136:	4605      	mov	r5, r0
 800a138:	4639      	mov	r1, r7
 800a13a:	4630      	mov	r0, r6
 800a13c:	f7ff f880 	bl	8009240 <_malloc_r>
 800a140:	b948      	cbnz	r0, 800a156 <__smakebuf_r+0x46>
 800a142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a146:	059a      	lsls	r2, r3, #22
 800a148:	d4ee      	bmi.n	800a128 <__smakebuf_r+0x18>
 800a14a:	f023 0303 	bic.w	r3, r3, #3
 800a14e:	f043 0302 	orr.w	r3, r3, #2
 800a152:	81a3      	strh	r3, [r4, #12]
 800a154:	e7e2      	b.n	800a11c <__smakebuf_r+0xc>
 800a156:	89a3      	ldrh	r3, [r4, #12]
 800a158:	6020      	str	r0, [r4, #0]
 800a15a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a15e:	81a3      	strh	r3, [r4, #12]
 800a160:	9b01      	ldr	r3, [sp, #4]
 800a162:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a166:	b15b      	cbz	r3, 800a180 <__smakebuf_r+0x70>
 800a168:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a16c:	4630      	mov	r0, r6
 800a16e:	f000 f851 	bl	800a214 <_isatty_r>
 800a172:	b128      	cbz	r0, 800a180 <__smakebuf_r+0x70>
 800a174:	89a3      	ldrh	r3, [r4, #12]
 800a176:	f023 0303 	bic.w	r3, r3, #3
 800a17a:	f043 0301 	orr.w	r3, r3, #1
 800a17e:	81a3      	strh	r3, [r4, #12]
 800a180:	89a3      	ldrh	r3, [r4, #12]
 800a182:	431d      	orrs	r5, r3
 800a184:	81a5      	strh	r5, [r4, #12]
 800a186:	e7cf      	b.n	800a128 <__smakebuf_r+0x18>

0800a188 <_putc_r>:
 800a188:	b570      	push	{r4, r5, r6, lr}
 800a18a:	460d      	mov	r5, r1
 800a18c:	4614      	mov	r4, r2
 800a18e:	4606      	mov	r6, r0
 800a190:	b118      	cbz	r0, 800a19a <_putc_r+0x12>
 800a192:	6a03      	ldr	r3, [r0, #32]
 800a194:	b90b      	cbnz	r3, 800a19a <_putc_r+0x12>
 800a196:	f7ff f96b 	bl	8009470 <__sinit>
 800a19a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a19c:	07d8      	lsls	r0, r3, #31
 800a19e:	d405      	bmi.n	800a1ac <_putc_r+0x24>
 800a1a0:	89a3      	ldrh	r3, [r4, #12]
 800a1a2:	0599      	lsls	r1, r3, #22
 800a1a4:	d402      	bmi.n	800a1ac <_putc_r+0x24>
 800a1a6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1a8:	f7ff fbb5 	bl	8009916 <__retarget_lock_acquire_recursive>
 800a1ac:	68a3      	ldr	r3, [r4, #8]
 800a1ae:	3b01      	subs	r3, #1
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	60a3      	str	r3, [r4, #8]
 800a1b4:	da05      	bge.n	800a1c2 <_putc_r+0x3a>
 800a1b6:	69a2      	ldr	r2, [r4, #24]
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	db12      	blt.n	800a1e2 <_putc_r+0x5a>
 800a1bc:	b2eb      	uxtb	r3, r5
 800a1be:	2b0a      	cmp	r3, #10
 800a1c0:	d00f      	beq.n	800a1e2 <_putc_r+0x5a>
 800a1c2:	6823      	ldr	r3, [r4, #0]
 800a1c4:	1c5a      	adds	r2, r3, #1
 800a1c6:	6022      	str	r2, [r4, #0]
 800a1c8:	701d      	strb	r5, [r3, #0]
 800a1ca:	b2ed      	uxtb	r5, r5
 800a1cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a1ce:	07da      	lsls	r2, r3, #31
 800a1d0:	d405      	bmi.n	800a1de <_putc_r+0x56>
 800a1d2:	89a3      	ldrh	r3, [r4, #12]
 800a1d4:	059b      	lsls	r3, r3, #22
 800a1d6:	d402      	bmi.n	800a1de <_putc_r+0x56>
 800a1d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1da:	f7ff fb9d 	bl	8009918 <__retarget_lock_release_recursive>
 800a1de:	4628      	mov	r0, r5
 800a1e0:	bd70      	pop	{r4, r5, r6, pc}
 800a1e2:	4629      	mov	r1, r5
 800a1e4:	4622      	mov	r2, r4
 800a1e6:	4630      	mov	r0, r6
 800a1e8:	f7ff fa33 	bl	8009652 <__swbuf_r>
 800a1ec:	4605      	mov	r5, r0
 800a1ee:	e7ed      	b.n	800a1cc <_putc_r+0x44>

0800a1f0 <_fstat_r>:
 800a1f0:	b538      	push	{r3, r4, r5, lr}
 800a1f2:	4d07      	ldr	r5, [pc, #28]	@ (800a210 <_fstat_r+0x20>)
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	4604      	mov	r4, r0
 800a1f8:	4608      	mov	r0, r1
 800a1fa:	4611      	mov	r1, r2
 800a1fc:	602b      	str	r3, [r5, #0]
 800a1fe:	f7f7 fccb 	bl	8001b98 <_fstat>
 800a202:	1c43      	adds	r3, r0, #1
 800a204:	d102      	bne.n	800a20c <_fstat_r+0x1c>
 800a206:	682b      	ldr	r3, [r5, #0]
 800a208:	b103      	cbz	r3, 800a20c <_fstat_r+0x1c>
 800a20a:	6023      	str	r3, [r4, #0]
 800a20c:	bd38      	pop	{r3, r4, r5, pc}
 800a20e:	bf00      	nop
 800a210:	20000e34 	.word	0x20000e34

0800a214 <_isatty_r>:
 800a214:	b538      	push	{r3, r4, r5, lr}
 800a216:	4d06      	ldr	r5, [pc, #24]	@ (800a230 <_isatty_r+0x1c>)
 800a218:	2300      	movs	r3, #0
 800a21a:	4604      	mov	r4, r0
 800a21c:	4608      	mov	r0, r1
 800a21e:	602b      	str	r3, [r5, #0]
 800a220:	f7f7 fcca 	bl	8001bb8 <_isatty>
 800a224:	1c43      	adds	r3, r0, #1
 800a226:	d102      	bne.n	800a22e <_isatty_r+0x1a>
 800a228:	682b      	ldr	r3, [r5, #0]
 800a22a:	b103      	cbz	r3, 800a22e <_isatty_r+0x1a>
 800a22c:	6023      	str	r3, [r4, #0]
 800a22e:	bd38      	pop	{r3, r4, r5, pc}
 800a230:	20000e34 	.word	0x20000e34

0800a234 <_init>:
 800a234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a236:	bf00      	nop
 800a238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a23a:	bc08      	pop	{r3}
 800a23c:	469e      	mov	lr, r3
 800a23e:	4770      	bx	lr

0800a240 <_fini>:
 800a240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a242:	bf00      	nop
 800a244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a246:	bc08      	pop	{r3}
 800a248:	469e      	mov	lr, r3
 800a24a:	4770      	bx	lr
